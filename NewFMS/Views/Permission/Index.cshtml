@model IEnumerable<NewFMS.WCF_Common.OBJ_Permission>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}
<script src="~/Scripts/accounting.js"></script>

@(X.Window()
    .Title("تعیین دسترسی")
    .Border(false)
    .ID("Permission")
    .Closable(true)
    .Maximized(true)
    .Height(300)
    .Listeners(l => l.AfterLayout.Handler = "setSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(LayoutType.Fit)
    .KeyMap(
        Html.X().KeyMap()
            .ID("PermissionMap")
            .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("SavePermission(); ")
                );

            }))
    .Items(
        X.Panel()
            .Border(false)
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                            .Text("ذخیره")
                            .Icon(Ext.Net.Icon.Add)
                            .ToolTip("کلید میانبر F8")
                            .Listeners(li => li.Click.Handler = "SavePermission();")
                            )
                        )
            .Items(
                X.Panel()
                    .ItemID("Panel")
                    .Defaults(new { Margin = 10 })
                    .Items(
                        X.ComboBox()
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .FieldLabel("گروه کاربری")
                            .ItemID("CboGrohKarbari")
                            .TypeAhead(true)
                            .Editable(false)
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Listeners(a =>
                            {
                                a.Change.Handler = "Change()";
                            }
                            )
                            .Store(
                                X.Store()
                                    .Model(
                                        X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                    )
                                        )
                                    .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetUserGroup"))
                                    .Reader(X.JsonReader().Root("data"))
                                     )
                                     .Listeners(li => li.BeforeLoad.Handler = "LoadUserGroup();")
                             )
                    ),
                X.Panel()
                    .Border(false)
                    .Items(
                        X.TreePanel()
                            .ID("Tree")
                            .AutoScroll(true)
                            .Width(300)
                            .ColSpan(2)
                            .Expand(true)
                            .UseArrows(true)
                            .Border(false)
                            .Listeners(a =>
                            {
                                a.ItemClick.Handler = "GetId(record)";
                                a.BeforeLoad.Fn = "nodeLoad";
                            })
                            .Root(
                                Html.X().Node()
                                    .NodeID("0")
                                    .Text("تعیین دسترسی"))
                            )
            )

                        )
)
<script type="text/javascript">
    var NodeId;
    var id;

    function LoadUserGroup() {
        Ext.net.DirectMethod.request({
            url: '/Permission/ReloadDrp',
            success: function (data) {
                var CboType = App.Permission.queryById('CboGrohKarbari');
                CboType.setValue(data.fldUserGroupId);
            }
    });
    }

    function setSize() {
        var height=App.Permission.getHeight();
        App.Tree.setHeight(height-120);
    }

    function Change() {
        var GrohKarbari = App.Permission.queryById('CboGrohKarbari');
        Ext.net.DirectMethod.request({
            url: '/Permission/NodeLoad',
            params: {
                node: "0",
                GrohKarbari: GrohKarbari.getValue()
            },
            success: function () {
                Reload();
            },
            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }

        });
        return false;
    }

    var nodeLoad = function (store, operation, options) {
        var GrohKarbari = App.Permission.queryById('CboGrohKarbari');
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/Permission/NodeLoad',
            params: {
                node: node.getId(),
                GrohKarbari: GrohKarbari.getValue()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand(true);
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });
        return false;
    };

    function Reload() {
        App.Tree.store.load();
    };

    function GetId(record) {
        NodeId = record.getId();
    };

    function SavePermission() {
        var Father = App.Tree;
        var Checked = Father.getChecked();
        if (Checked == []) { return; }
        var Permission = new Array();
        var CboGrohKarbari = App.Permission.queryById('CboGrohKarbari');
        var FatherId;
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        for (var i = 0; i < Checked.length ; i++) {
            FatherId = Checked[i];
            Permission.push({
                'fldApplicationPartID': FatherId.getId(),
                'fldUserGroupID': CboGrohKarbari.getValue()
            });
        }

        var data = {
            Permission: Permission,
            'UserGroupID': CboGrohKarbari.getValue()
        };
        $.ajax({
            type: "POST",
            url: '/Permission/SavePermission',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (data) {
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: Ext.MessageBox.INFO,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }
</script>