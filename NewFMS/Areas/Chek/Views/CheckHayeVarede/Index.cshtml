@model IEnumerable<NewFMS.WCF_Chek.OBJ_CheckHayeVarede>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{ var X = Html.X();
    var Per = false;
     NewFMS.WCF_Common.CommonService servic_Com = new NewFMS.WCF_Common.CommonService();
     NewFMS.WCF_Common.ClsError Err_Com = new NewFMS.WCF_Common.ClsError();
     if (servic_Com.Permission(1291, Convert.ToInt32(Session["OrganId"]), Session["Username"].ToString(), Session["Password"].ToString(), out Err_Com))
     {
         Per = true;
     }
   }
<br />
@(Html.X().Panel()
            .ID("SabtCheckHayeVarede")
            .Title("ثبت چک های وارده")
                .Listeners(li => { li.AfterRender.Handler = "CheckHayeVaredeSetSize()"; li.Render.Fn = "addKeyMapSabtCheckHayeVarede"; })
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .Border(false)
       .Items(
    X.Panel().Border(false).Items(X.Label()),
        X.Panel().Border(false)//.Buttons(
            //X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ItemID("btnSaveDasteChek")
            //        .Listeners(l => { l.Click.Handler = "SaveCheckHayeVarede();"; })
            //, X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
            //        .Listeners(l => { l.Click.Handler = "LoadCheckHayeVarede();"; })
            //, X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
            //        .Listeners(l => { l.Click.Handler = "DeleteCheckHayeVarede();"; })
            //, X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
            //    .Listeners(l => { l.Click.Handler = "HelpCheckHayeVarede();"; })       
            //, 
            //X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)
                        //.OnClientClick("App.SabtCheckHayeVarede.destroy()")
        //)
        .ButtonAlign(Ext.Net.Alignment.Center),
        //.Items(
        //        X.FormPanel().Border(false)
        //                      .Layout(LayoutType.VBox)
        //                         .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
        //    .Items(
        //            X.FieldSet().Title("اطلاعات چک وارده")
        //            .Border(true)
        //             .Defaults(new { Margin = 2 })
        //            .Layout(LayoutType.Table)
        //            .LayoutConfig(new TableLayoutConfig { Columns = 8 })
        //        .Items(
        //        X.Hidden().ItemID("fldId"),
        //        X.Hidden().ItemID("fldShomareHesabId"),
        //        X.Hidden().ItemID("fldSaderKonandeId"),
        //        X.FieldSet().ColSpan(4).Border(false).MarginSpec("0 0 0 57px")//.Width(400)
        //        .Defaults(new { Margin = 2 })
        //        .LayoutConfig(new TableLayoutConfig { Columns = 4 })
        //        .Items(
        //         X.Label("بانک:"),
        //         X.ComboBox().Width(150)
        //        .ItemID("cboBank")
        //        .LabelAlign(Ext.Net.LabelAlign.Top)
        //        .Editable(false)
        //        .TypeAhead(true)
        //        .QueryMode(DataLoadMode.Local)
        //        .ForceSelection(true)
        //        .TriggerAction(TriggerAction.All)
        //        .DisplayField("fldBankName")
        //        .ValueField("fldId")
        //        .EmptyText("بانک")
        //        .Listeners(ls =>
        //            ls.Change.Handler = " App.SabtCheckHayeVarede.queryById('CboShobe').getStore().load();" )
        //        .ValueNotFoundText("بانک...")
        //            .Store(X.Store()//.AutoLoad(false)
        //            .Model(X.Model()
        //                    .IDProperty("fldId")
        //                .Fields(
        //                    new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
        //                    new ModelField("fldBankName", ModelFieldType.String) { Mapping = "fldBankName" }
        //                )
        //            )
        //            .Proxy(X.AjaxProxy()
        //                .Url(Url.Action("GetBank"))
        //                .Reader(X.JsonReader().Root("data"))
        //            )
        //                //.Listeners(li => li.Load.Handler = "LoadCity();")
        //    )
        //        .AllowBlank(false)
        //        .BlankText("لطفا بانک را انتخاب کنید."),
        //        X.Label("شعبه:"),
        //            X.ComboBox().Width(150)
        //            .ItemID("CboShobe")
        //            .EmptyText("شعبه")
        //            .LabelAlign(Ext.Net.LabelAlign.Top)
        //            .TypeAhead(true)
        //            .Editable(false)
        //            .AllowBlank(false)
        //            .BlankText("لطفا شعبه مورد نظر را انتخاب نمایید.")
        //            .QueryMode(DataLoadMode.Local)
        //            .ForceSelection(true)
        //            .TriggerAction(TriggerAction.All)
        //                .DisplayField("fldName")
        //                .ValueField("fldId")
        //                .Store(X.Store().AutoLoad(false)
        //                .Model(X.Model()
        //                    .IDProperty("fldId")
        //                    .Fields(
        //                    new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
        //                    new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" })
        //                        )
        //                .Proxy(X.AjaxProxy()
        //                    .Url(Url.Action("GetShobe"))
        //                    .Reader(X.JsonReader().Root("data")))
        //                            .Parameters(ps => ps.Add(new StoreParameter("ID", "App.SabtCheckHayeVarede.queryById('cboBank').getValue()", ParameterMode.Raw)))
        //                                )),
        //            X.Label("نوع چک:")
        //                    , X.ComboBox().Width(120)
        //                    .ItemID("CboNoeChek")
        //                    .Editable(false)
        //                    .TypeAhead(true)
        //                    .AllowBlank(false)
        //                    .ForceSelection(true)
        //                    .BlankText("لطفا نوع چک را انتخاب کنید.")
        //                    .QueryMode(DataLoadMode.Local)
        //                    .TriggerAction(TriggerAction.All)
        //                    .EmptyText("نوع چک...")
        //                    .SelectedItems(new { Value = "2" })
        //                    .Items(
        //                        new ListItem("عادی", "0"),
        //                        new ListItem("ضمانتی", "1")
        //                        ),
        //                X.Label("شناسه کامل چک:"),
        //                            X.TextField().Width(120).MaxLength(20).EnforceMaxLength(true)
        //                    .ItemID("txtSheasechek").MaskRe("[0-9]")
        //                    .AllowBlank(false)
        //                    .BlankText("لطفا شناسه چک را وارد کنید.")
        //                    .LabelAlign(Ext.Net.LabelAlign.Top)
        //                    ,
        //                    X.FieldSet().ColSpan(4).MarginSpec("0 0 0 3px").Border(false)//.Width(500)
        //                    .Defaults(new { Margin = 2 })
        //                    .LayoutConfig(new TableLayoutConfig { Columns = 2 })
        //                    .Items(
        //                    X.Label("صادر کننده چک:"),
        //                    X.TextField().Width(340).ReadOnly(true)
        //                    .ItemID("txtSaderKonande")
        //                    .Icon(Ext.Net.Icon.UserAdd)
        //                    .AllowBlank(false)
        //                    .BlankText("لطفا صادر کننده چک را وارد کنید.")
        //                    .LabelAlign(Ext.Net.LabelAlign.Top)
        //                    .DirectEvents(li =>
        //                            {
        //                                li.SpecialKey.Url = "/Daramad/SearchAshkhas/Index?State=9";
        //                                li.SpecialKey.Before = "return e.getKey() == Ext.EventObject.INSERT;";
        //                                li.IconClick.Url = "/Daramad/SearchAshkhas/Index?State=9";
        //                            })
        //                    ),
        //                    X.Label().Text("تاریخ دریافت:"),
        //                    X.PDateField()
        //                    .ItemID("txtTarikhDaryaft")
        //                    .AllowBlank(false)
        //                    .MaskRe("[0-9,/]").Width(120)
        //                    .BlankText("لطفا تاریخ دریافت را وارد کنید.")
        //                    .Editable(false), 
        //                X.Label().Text("تاریخ وصول:"),
        //                    X.PDateField()
        //                    .ItemID("txtTarikhVosol")
        //                    .AllowBlank(false)
        //                    .MaskRe("[0-9,/]").Width(120)
        //                    .BlankText("لطفا تاریخ وصول را وارد کنید.")
        //                    .Editable(false),
                        


        //                         X.FieldSet().ColSpan(4).Border(false).MarginSpec("0 0 0 57px")//.Width(400)
        //            .Defaults(new { Margin = 2 })
        //            .LayoutConfig(new TableLayoutConfig { Columns = 3 })
        //            .Items(
        //            X.Label("مبلغ:"),
        //            X.TextField().Width(100)
        //            .ItemID("txtMablagh")
        //                .AllowBlank(false).Listeners(l => { l.Blur.Handler = "SetMablagh_Horof()"; l.Change.Handler = "App.SabtCheckHayeVarede.queryById('txtMablagh').setValue(accounting.formatNumber(App.SabtCheckHayeVarede.queryById('txtMablagh').getValue()));"; })
        //            .BlankText("لطفا مبلغ را انتخاب کنید."),
        //                X.TextField().Width(237)
        //                .ItemID("txtMablagh_H")
        //                .ReadOnly(true)
        //                ),
        //                X.FieldSet().ColSpan(4).MarginSpec("0 0 0 33px").Border(false)
        //                .Defaults(new { Margin = 2 })
        //                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
        //                .Items(
        //                X.Label("بابت:"),
        //                X.TextField().Width(358)
        //                .ItemID("txtBabat")
        //                .AllowBlank(false)
        //                .BlankText("لطفا بابت را وارد کنید.")
        //                .LabelAlign(Ext.Net.LabelAlign.Top)
        //                )
        //                    ,
        //                X.FieldSet().ColSpan(4).Border(false).MarginSpec("0 0 0 34px")//.Width(420)
        //                .Defaults(new { Margin = 2 })
        //                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
        //                .Items(    
        //                X.Label("توضیحات:"),
        //                    X.TextField().Width(342)
        //                .ItemID("txtDesc")
        //                .AllowBlank(true)
        //                .LabelAlign(Ext.Net.LabelAlign.Top))
        //        )
        //    )
        //),
        X.GridPanel()
            .ItemID("CheckHayeVaredeGrid")
            .BottomBar(X.PagingToolbar())
                    .TopBar(Html.X().Toolbar().Items(
                    X.Button().Text("دریافت").Hidden(@Per==false).Icon(Ext.Net.Icon.Tick).ItemID("btnReceivedChek")
                   .Listeners(l => { l.Click.Handler = "SaveReceivedChek();"; }),
                   X.ToolbarSeparator(),
                        X.ComboBox()
                            .ItemID("CboType")
                            .TypeAhead(true)
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .SelectedItems(new  { Value="2"})
                                .Listeners(l => l.Select.Handler = "App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').store.load();")
                            .Items(
                                new ListItem("دریافت شده", "1"),
                                new ListItem("دریافت نشده", "0"),
                                new ListItem("همه موارد", "2")
                            )
            ))

            .Store(
                            X.StoreForModel()
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                            )
                                    .Parameters(ps => ps.Add(new StoreParameter("Type", "App.SabtCheckHayeVarede.queryById('CboType').getValue()", ParameterMode.Raw)))
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                        )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                )
                    .Plugins(X.FilterHeader().Remote(true))
                     .Listeners(l =>
                     {
                         l.AfterRender.Handler = "var grid = App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid');grid.setHeight(App.ChekWin.getHeight() - 185); ";

                     })
        .ColumnModel(
            Html.X().RowNumbererColumn(),
            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
            Html.X().Column().DataIndex(Model, m => m.fldBankName).Text("نام بانک").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldShobeName).Text("نام شعبه").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.NoeeCheckName).Text("نوع چک").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldTypeShakhs).Text("نوع شخص").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldSaderKonandeh).Text("صادر کننده چک").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldTarikhVosolCheck).Text("تاریخ وصول").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldTarikhDaryaftCheck).Text("تاریخ دریافتی").Flex(2),
            Html.X().Column().DataIndex(Model, m => m.fldShenaseKamelCheck).Text("شناسه کامل چک").Flex(3),
            Html.X().Column().DataIndex(Model, m => m.fldBabat).Text("بابت").Flex(5),
            Html.X().Column().DataIndex(Model, m => m.fldReceiveName).Text("وضعیت").Flex(3).Wrap(true),            
            Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(5)
    )
                .SelectionModel(
                    Html.X().CheckboxSelectionModel()
                        .Mode(Ext.Net.SelectionMode.Multi)
                        .Listeners(l=>l.BeforeSelect.Fn="NotAllowedSelect")
    )
    )
)
<script type="text/javascript">
    var NotAllowedSelect = function (model, rec, idx) {
        if (rec.data.fldReceive)
            return false;
    };
    
    function SaveReceivedChek() {
        var Selection = App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').getSelectionModel().getSelection();
        if (Selection.length > 0) {
            for (var i = 0; i < Selection.length; i++) {
                var DocumentRecord_DetailsArray = new Array();
                DocumentRecord_DetailsArray.push({
                    fldId: 0,
                    fldCodingId: '@ViewBag.CodingEntezami',
                    fldDescription: "بابت دریافت چک " + Selection[i].data.fldSaderKonandeh + "(اعلام عوارض شماره " + Selection[i].data.fldElamAvarezId + ")",
                    fldBedehkar: Selection[i].data.fldMablagh,
                    fldBestankar: 0,
                    fldCenterCoId: 0,
                    fldCaseTypeId: 3,
                    fldCaseId: 0,
                    fldDocument_HedearId: 0,
                    fldSourceId: Selection[i].data.fldId,
                    fldOrder: 0
                });
                DocumentRecord_DetailsArray.push({
                    fldId: 0,
                    fldCodingId: '@ViewBag.CodingTarafEntezami',
                    fldDescription: "بابت دریافت چک " + Selection[i].data.fldSaderKonandeh + "(اعلام عوارض شماره " + Selection[i].data.fldElamAvarezId + ")",
                    fldBedehkar: 0,
                    fldBestankar: Selection[i].data.fldMablagh,
                    fldCenterCoId: 0,
                    fldCaseTypeId: 3,
                    fldCaseId: 0,
                    fldDocument_HedearId: 0,
                    fldSourceId: Selection[i].data.fldId,
                    fldOrder: 1
                });
                var data =
                    {
                        fldId: 0,
                        fldDocumentNum: 0,
                        fldFiscalYearId: '@ViewBag.FiscalYearId',
                        fldYear: '@ViewBag.Year',
                        fldArchiveNum: null,
                        fldDescriptionDocu: "بابت دریافت چک " + Selection[i].data.fldSaderKonandeh + "(اعلام عوارض شماره " + Selection[i].data.fldElamAvarezId + ")",
                        fldTarikhDocument: '@ViewBag.CurrentDate',
                        fldType: 1,
                        fldTypeSanad: 2,
                        fldShomareFaree: null,
                        fldEdit:2,
                        DocumentRecord_DetailsArray: DocumentRecord_DetailsArray,
                        CheckId: Selection[i].data.fldId
                    };
                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                $.ajax({
                    type: "POST",
                    url: '/Khazanedari/RegisterDocs/Save',
                    datatype: "json",
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (result) {
                        if (result.Er == 1) {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: result.Msg,
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                            return;
                        }
                        else if (i == Selection.length) {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "عملیات موفق",
                                msg: "عملیات با موفقیت انجام شد.",
                                icon: Ext.MessageBox.INFO,
                                buttons: Ext.MessageBox.OK
                            });
                            App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').store.load();
                        }
                    },
                    failure: function () {
                        Ext.net.Mask.hide();
                    }
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا حداقل یک سطر را انتخاب نمایید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function HelpCheckHayeVarede() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Chek/CheckHayeVarede/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function SetMablagh_Horof() {
        var txtMablagh = App.SabtCheckHayeVarede.queryById('txtMablagh');
        if (txtMablagh.getValue() != "") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Chek/CheckHayeVarede/Mablagh_Horof',
                params: {
                    Mablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '')
                },
                success: function (data) {
                    var txtMablagh_H = App.SabtCheckHayeVarede.queryById('txtMablagh_H');
                    txtMablagh_H.setValue(data.Mablagh_H);
                    Ext.net.Mask.hide();
                }
            });
        }
    }

    function CheckHayeVaredeSetSize() {
        App.SabtCheckHayeVarede.setWidth(App.ChekWin.getWidth());
        var grid = App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid');
        grid.setHeight(App.ChekWin.getHeight() - 175);
    }

    function LoadCheckHayeVarede() {
        var SelectedRow = App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Chek/CheckHayeVarede/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    var cboBank = App.SabtCheckHayeVarede.queryById('cboBank');
                    cboBank.setValue(data.fldBankId);
                    App.SabtCheckHayeVarede.queryById('CboShobe').clearValue(); App.SabtCheckHayeVarede.queryById('CboShobe').getStore().load();
                    var CboShobe = App.SabtCheckHayeVarede.queryById('CboShobe');
                    CboShobe.setValue(data.fldIdShobe);
                    var CboNoeChek = App.SabtCheckHayeVarede.queryById('CboNoeChek');
                    CboNoeChek.setValue(data.fldNoeeCheck);
                    var txtSheasechek = App.SabtCheckHayeVarede.queryById('txtSheasechek');
                    txtSheasechek.setValue(data.fldShenaseKamelCheck);

                    var txtSaderKonande = App.SabtCheckHayeVarede.queryById('txtSaderKonande');
                    txtSaderKonande.setValue(data.fldSaderKonandeh);
                    var fldSaderKonandeId = App.SabtCheckHayeVarede.queryById('fldSaderKonandeId');
                    fldSaderKonandeId.setValue(data.fldAshkhasId);

                    var txtTarikhVosol = App.SabtCheckHayeVarede.queryById('txtTarikhVosol');
                    txtTarikhVosol.setValue(data.fldTarikhVosolCheck);
                    var txtTarikhDaryaft = App.SabtCheckHayeVarede.queryById('txtTarikhDaryaft');
                    txtTarikhDaryaft.setValue(data.fldTarikhDaryaftCheck);
                    var txtMablagh = App.SabtCheckHayeVarede.queryById('txtMablagh');
                    txtMablagh.setValue(data.fldMablagh);
                    SetMablagh_Horof();
                    var txtBabat = App.SabtCheckHayeVarede.queryById('txtBabat');
                    txtBabat.setValue(data.fldBabat);
                    var fldId = App.SabtCheckHayeVarede.queryById('fldId');
                    fldId.setValue(data.fldId);
                    var txtDesc = App.SabtCheckHayeVarede.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveCheckHayeVarede() {
        var cboBank = App.SabtCheckHayeVarede.queryById('cboBank');
        var CboShobe = App.SabtCheckHayeVarede.queryById('CboShobe');
        var CboNoeChek = App.SabtCheckHayeVarede.queryById('CboNoeChek');
        var txtSheasechek = App.SabtCheckHayeVarede.queryById('txtSheasechek');
        var txtSaderKonande = App.SabtCheckHayeVarede.queryById('txtSaderKonande');
        var fldSaderKonandeId = App.SabtCheckHayeVarede.queryById('fldSaderKonandeId');
        var txtTarikhVosol = App.SabtCheckHayeVarede.queryById('txtTarikhVosol');
        var txtTarikhDaryaft = App.SabtCheckHayeVarede.queryById('txtTarikhDaryaft');
        var txtMablagh = App.SabtCheckHayeVarede.queryById('txtMablagh');
        var txtBabat = App.SabtCheckHayeVarede.queryById('txtBabat');
        var fldId = App.SabtCheckHayeVarede.queryById('fldId');
        var txtDesc = App.SabtCheckHayeVarede.queryById('txtDesc');

            var er = false;

            if (cboBank.validate() == false) {
                er = true;
            }
            if (CboShobe.validate() == false) {
                er = true;
            }
            if (CboNoeChek.validate() == false) {
                er = true;
            }
            if (txtSheasechek.validate() == false) {
                er = true;
            }
            if (txtSaderKonande.validate() == false) {
                er = true;
            }
            if (txtTarikhVosol.validate() == false) {
                er = true;
            }
            if (txtTarikhDaryaft.validate() == false) {
                er = true;
            }
            if (txtMablagh.validate() == false) {
                er = true;
            }
            if (txtBabat.validate() == false) {
                er = true;
            }
            if (er == true)
                return;
            var noeeChek = false;
            if (CboNoeChek.getValue() == "1")
                noeeChek = true;
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Chek/CheckHayeVarede/Save',
                params: {
                    fldId: fldId.getValue(),
                    fldIdShobe: CboShobe.getValue(),
                    fldMablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                    fldAshkhasId: fldSaderKonandeId.getValue(),
                    fldTarikhVosolCheck: txtTarikhVosol.rawValue,
                    fldTarikhDaryaftCheck: txtTarikhDaryaft.rawValue,
                    fldShenaseKamelCheck: txtSheasechek.getValue(),
                    fldBabat: txtBabat.getValue(),
                    fldNoeeCheck: noeeChek,
                    fldDesc: txtDesc.getValue()
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').store.load();
                    if (data.Err != 1)
                        ClearCheckHayeVarede();
                }

            });
    }
    function DeleteCheckHayeVarede() {
        var SelectedRow = App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Chek/CheckHayeVarede/Delete',
                            params: {
                                id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: Ext.MessageBox.INFO,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.SabtCheckHayeVarede.queryById('CheckHayeVaredeGrid').store.load()
                            }
                        });
                        Ext.net.Mask.hide();
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function ClearCheckHayeVarede() {
        
        App.SabtCheckHayeVarede.queryById('fldId').setValue(0);
        App.SabtCheckHayeVarede.queryById('txtMablagh_H').setValue("");
        App.SabtCheckHayeVarede.queryById('txtSheasechek').setValue("");
        App.SabtCheckHayeVarede.queryById('txtSaderKonande').setValue("");
        App.SabtCheckHayeVarede.queryById('fldSaderKonandeId').setValue(0);
        App.SabtCheckHayeVarede.queryById('txtTarikhVosol').setValue("");
        App.SabtCheckHayeVarede.queryById('txtTarikhDaryaft').setValue("");
        App.SabtCheckHayeVarede.queryById('txtMablagh').setValue("");
        App.SabtCheckHayeVarede.queryById('txtBabat').setValue("");
        App.SabtCheckHayeVarede.queryById('txtDesc').setValue("");
    }
    var addKeyMapSabtCheckHayeVarede = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.SabtCheckHayeVarede.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtDesc") {
                        nextfld = App.SabtCheckHayeVarede.queryById('btnSaveDasteChek');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>