@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net

@{
    var X = Html.X();
}

@(Html.X().Panel()
    .ID("Anticipation")
    .Title("پیش بینی درآمدی")
    .Closable(true)
    .Listeners(li => li.AfterRender.Handler = "AnticipationSetSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Layout(LayoutType.Fit)
    .Items(
        X.GridPanel()
            .ItemID("AnticipationGrid")
            .BottomBar(X.PagingToolbar().Listeners(l => l.BeforeChange.Fn = "CheckModifiedAnticipation"))
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).Listeners(li => li.Click.Handler = "SaveAnticipation();")
                    )
            )
            .Store(
                X.Store()
                    .Listeners(l => l.BeforeLoad.Handler = "AddModel()")
                    .Model(X.Model())
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("getData"))
                        .Reader(Html.X().JsonReader().Root("data"))
                        .ExtraParams(l => l.Add(new { Year = ViewBag.Year }))
                    )
                    .PageSize(20)
                    .RemoteFilter(false)
                    .RemotePaging(false)
            )
            .View(
                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
            )
            .Plugins(X.CellEditing().ClicksToEdit(1)).Listeners(l=>l.Edit.Fn="nextcellRowAnticipation")
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex("کدینگ").Text("کد حساب").Flex(3),
                Html.X().Column().DataIndex("عنوان").Text("عنوان حساب").Flex(5).Wrap(true)
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
            )
        )
)

<script type="text/javascript">
    var FirstLoad = false;
    var modelFields = [{ name: 'عنوان' }, { name: 'کدینگ' }];
    var HintPrice = 0;

    function AddModel() {
        if (FirstLoad == false) {
            FirstLoad = true;
            Ext.net.DirectMethod.request({
                url: '/Budget/Anticipation/getDynamicCol',
                params: {
                    State: 1
                },
                success: function (data) {
                    if (data.Cols.length > 0) {
                        for (var i = 0; i < data.Cols.length; i++) {
                            var eColumn = Ext.create('Ext.grid.column.Column', {
                                header: data.Cols[i].fldTitle,
                                flex: 3,
                                filterable: true,
                                dataIndex: data.Cols[i].fldTitle,
                                getEditor: function (record) {
                                    return Ext.create('Ext.grid.CellEditor', {
                                        field: Ext.create('Ext.form.field.Text', {
                                            enableKeyEvents: true,
                                            maskRe: /[0-9.]/,
                                            listeners: {
                                                specialKey: function (field, e) {
                                                    if (e.getKey() == 13) {
                                                        HintPrice = 1;
                                                    }
                                                }
                                            }
                                        })
                                    })
                                }
                            });
                            App.Anticipation.queryById('AnticipationGrid').headerCt.insert(App.Anticipation.queryById('AnticipationGrid').columns.length, eColumn);
                            App.Anticipation.queryById('AnticipationGrid').getView().refresh();

                            modelFields.push({
                                name: data.Cols[i].fldTitle
                            });
                        }
                    }
                    App.Anticipation.queryById('AnticipationGrid').store.model.setFields(modelFields);
                    /*App.Anticipation.queryById('AnticipationGrid').reconfigure(App.Anticipation.queryById('AnticipationGrid').store, App.Anticipation.queryById('AnticipationGrid').columns);*/
                }
            });
        }
    }

    var CheckModifiedAnticipation = function (pagetoolbar, page, eOpts) {
        var changedRow = App.Anticipation.queryById('AnticipationGrid').store.getModifiedRecords();
        if (changedRow.length > 0) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا تمایل دارید اطلاعات ویرایش شده ذخیره شود؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        var Trains = new Array();
                        var ModifiedRec = App.AnvaGhatar.queryById('GridAnvaGhatar').store.getModifiedRecords();
                        for (var i = 0; i < ModifiedRec.length; i++) {
                            Trains.push({
                                fldCode: ModifiedRec[i].data.fldCode,
                                fldMoaser: ModifiedRec[i].data.fldMoaser,
                                fldType: ModifiedRec[i].data.fldType,
                                fldIsTondroString: ModifiedRec[i].data.fldIsTondroString
                            });
                        }
                        var data = {
                            Trains: Trains
                        };

                        $.ajax({
                            type: "POST",
                            url: '/AnvaGhatar/Save',
                            datatype: "json",
                            data: JSON.stringify(data),
                            contentType: 'application/json',
                            success: function (result) {
                                if (result.Er == 1) {
                                    Ext.MessageBox.show({
                                        title: result.MsgTitle,
                                        msg: result.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {
                                    pagetoolbar.getStore().loadPage(page);
                                }
                            },
                            failure: function (data) {
                                alert(data.data);
                            }
                        });
                    }
                    else {
                        pagetoolbar.getStore().loadPage(page);
                    }
                }
            });
            return false;
        }
    };

    var nextcellRowAnticipation = function (a, b) {
        if (HintPrice == 1) {
            HintPrice = 0;
            App.Anticipation.queryById("AnticipationGrid").editingPlugin.startEdit(b.rowIdx + 1, b.colIdx);
            a.getEditor(b.row, b.column).field.selectText();
        }
    };

    function AnticipationSetSize() {
        App.Anticipation.setWidth(App.BudjeWin.getWidth());
        App.Anticipation.queryById('AnticipationGrid').setHeight(App.BudjeWin.getHeight() - 170);
    }

    function CheckDocStatus() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow.data.fldModuleErsalId != 4) {
            App.DocRegister_Header.queryById('btnEdit').disable();
            App.DocRegister_Header.queryById('btnDelete').disable();
            App.DocRegister_Header.queryById('btnGhati').disable();
            App.DocRegister_Header.queryById('btnArchive').disable();
        }
        else {
            App.DocRegister_Header.queryById('btnEdit').enable();
            App.DocRegister_Header.queryById('btnDelete').enable();
            if (SelectedRow.data.fldType == 2) {
                App.DocRegister_Header.queryById('btnPrint').disable();
                App.DocRegister_Header.queryById('btnGhati').disable();
                App.DocRegister_Header.queryById('btnArchive').disable();
            }
            else {
                App.DocRegister_Header.queryById('btnPrint').enable();
                App.DocRegister_Header.queryById('btnGhati').enable();
                App.DocRegister_Header.queryById('btnArchive').enable();
            }
        }
    }

    function SortDocs() {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا جهت مرتب سازی اسناد مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                    Ext.net.DirectMethod.request({
                        url: '/Accounting/DocRegistration/SortDocs',
                        params: {
                            Year: '@ViewBag.Year'
                        },
                        success: function (data) {
                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                            var ic = Ext.MessageBox.INFO;
                            if (data.Er == 1)
                                ic = Ext.MessageBox.ERROR;
                            Ext.MessageBox.show({
                                title: data.MsgTitle,
                                msg: data.Msg,
                                icon: ic,
                                buttons: Ext.MessageBox.OK
                            });
                            Ext.net.Mask.hide();
                        }
                    });
                }
            }
        });
    }

    function PrintDocRegister() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldType != 2) {
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/Accounting/DocRegistration/PrintDocument',
                    params: {
                        DocHeaderId: SelectedRow.data.fldId
                    },
                    success: function (data) {
                        Ext.net.Mask.hide();
                    }
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function PrintDocRegister_Group() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/PrintDocument_Group',
            params: {
                containerId: "FirstTabAccounting",
                Year: '@ViewBag.Year'
            },
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }

    function GotoGeneralView() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/GeneralView',
            params: {
                Year: '@ViewBag.Year'
            },
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }

    function DeleteDocRegister() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                if (SelectedRow.data.fldModuleErsalId == 4) {
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا برای حذف مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/DeleteHeader',
                                    params: {
                                        Id: SelectedRow.data.fldId,
                                        Year: SelectedRow.data.fldYear
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        if (data.Er != 1) {
                                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                        }
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان حذف برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده ثبت قطعی شده است و امکان حذف آن وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveGhati() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                if (SelectedRow.data.fldType == 1) {
                    if (SelectedRow.data.fldModuleErsalId == 4) {
                        Ext.MessageBox.show({
                            title: "هشدار",
                            msg: "آیا جهت قطعی کردن سند مطمئن هستید؟",
                            icon: Ext.MessageBox.WARNING,
                            buttons: Ext.MessageBox.YESNO,
                            fn: function (btn) {
                                if (btn == 'yes') {
                                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                                    Ext.net.DirectMethod.request({
                                        url: '/Accounting/DocRegistration/SaveGhati',
                                        params: {
                                            HeaderId: SelectedRow.data.fldId,
                                            FiscalYearId: '@ViewBag.FiscalYearId',
                                            Year: '@ViewBag.Year'
                                        },
                                        success: function (data) {
                                            var ic = Ext.MessageBox.INFO;
                                            if (data.Er == 1)
                                                ic = Ext.MessageBox.ERROR;
                                            Ext.MessageBox.show({
                                                title: data.MsgTitle,
                                                msg: data.Msg,
                                                icon: ic,
                                                buttons: Ext.MessageBox.OK
                                            });
                                            if (data.Er != 1) {
                                                App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                            }
                                            Ext.net.Mask.hide();
                                        }
                                    });
                                }
                            }
                        });
                    }
                    else {
                        Ext.MessageBox.show({
                            title: "خطا",
                            msg: "امکان قطعی کردن برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان قطعی کردن برای یادداشت وجود ندارد",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده قبلا قطعی شده است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function EditDocRegister() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                if (SelectedRow.data.fldModuleErsalId == 4) {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Accounting/DocRegistration/New',
                        params: {
                            HeaderId: SelectedRow.data.fldId,
                            FiscalYearId: '@ViewBag.FiscalYearId',
                            Year: '@ViewBag.Year'
                        },
                        success: function () {
                            Ext.net.Mask.hide();
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان ویرایش برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده ثبت قطعی شده است و امکان ویرایش آن وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function NewDocRegister() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/New',
            params: {
                HeaderId: 0,
                FiscalYearId: '@ViewBag.FiscalYearId',
                Year: '@ViewBag.Year'
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function AccountingArchive() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldType == 1) {
                if (SelectedRow.data.fldModuleErsalId == 4) {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Accounting/DocRegistration/Archive',
                        params: {
                            HeaderId: SelectedRow.data.fldId
                        },
                        success: function () {
                            Ext.net.Mask.hide();
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان ثبت فایل برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "امکان ثبت فایل برای یادداشت وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
</script>
