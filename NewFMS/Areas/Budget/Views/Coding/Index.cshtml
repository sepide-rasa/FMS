@model IEnumerable<NewFMS.WCF_Budget.OBJ_CodingBudje_Header>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net

@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Panel()
    .ID("Coding_HeaderB")
    .Title("تعریف کدینگ")
    .Closable(true)
    .Listeners(li => li.AfterRender.Handler = "Coding_HeaderBSetSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Items(
        X.Panel()
            .Border(false)
            .Items(X.Label()),
        X.Panel()
            .Border(false)
            .ButtonAlign(Ext.Net.Alignment.Center)
            .Buttons(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
                    .Listeners(l => l.Click.Handler = "SaveCoding_HeaderB();"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .OnClientClick("App.Coding_HeaderB.destroy()")
            )
            .Items(
                X.Panel()
                    .Border(false)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Items(
                        X.FieldSet()
                            .Title("سال مالی")
                            .Border(true)
                            .Defaults(new { Margin = 2 })
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                            .Items(
                                X.Hidden()
                                    .ItemID("fldId"),
                                X.Label("ســـال:"),
                                X.ComboBox()
                                    .ItemID("CboYear")
                                    .AutoFocus(true)
                                    .DisplayField("fldYear")
                                        .ValueField("fldYear")
                                    .TypeAhead(true)
                                    .Editable(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا سال را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .Listeners(l => l.AfterRender.Handler = "App.Coding_HeaderB.queryById('CboYear').validate()")
                                    .Store(X.Store()
                                        //.Listeners(l => l.Load.Handler = "setDefaultYearCoding_HeaderB()")
                                           .Model(X.Model()
                                                                .IDProperty("fldYear")
                                                                .Fields(
                                                                    new ModelField("fldYear", ModelFieldType.String) { Mapping = "fldYear" }
                                                                )
                                                            )
                                        .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetSal"))
                                            .Reader(X.JsonReader().Root("data"))
                                        )
                                    ),
                            X.Label("توضیحات:"),
                            X.TextField()
                                .ItemID("txtDesc")
                                .Width(375)
                        )
                )
        ),
        X.GridPanel()
            .ItemID("Coding_HeaderGridB")
            .BottomBar(X.PagingToolbar())
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                            .Text("ویرایش")
                            .Icon(Ext.Net.Icon.Pencil)
                            .Listeners(l => l.Click.Handler = "LoadCoding_HeaderB();"),
                        X.Button()
                            .Text("حذف")
                            .Icon(Ext.Net.Icon.Delete)
                            .Listeners(l => l.Click.Handler = "DeleteCoding_HeaderB();"),
                        //X.Button()
                        //    .Text("کپی از الگو")
                        //    .Icon(Ext.Net.Icon.PageCopy)
                        //    .Listeners(l => l.Click.Handler = "CopyFromTemplateCodingB();"),
                        X.Button()
                            .Text("تعریف ساختار کدینگ")
                            .IconCls("treeIcon")
                            .Listeners(l => l.Click.Handler = "Coding_DetailB();")
                    )
            )
            .Store(
                X.StoreForModel()
                    .Listeners(l => l.DataChanged.Handler = "App.Coding_HeaderB.queryById('Coding_HeaderGridB').selModel.refresh();")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .PageSize(20)
                    .RemoteFilter(false)
                    .RemotePaging(false)
            )
            .View(
                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
            )
            .Plugins(X.FilterHeader().Remote(false))
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldYear).Text("سال").Flex(2),
                Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
            )
    )
)
<script type="text/javascript">

    function setDefaultYearCoding_HeaderB() {
        App.Coding_HeaderB.queryById('CboYear').setValue(App.Coding_HeaderB.queryById('CboYear').store.getAt(App.Coding_HeaderB.queryById('CboYear').store.count() - 1));
    }

    function DeleteCoding_HeaderB() {
        var SelectedRow = App.Coding_HeaderB.queryById('Coding_HeaderGridB').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        Ext.net.DirectMethod.request({
                            url: '/Budget/Coding/Delete',
                            params: {
                                Id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                if (data.Er != 1) {
                                    App.Coding_HeaderB.queryById('Coding_HeaderGridB').store.load();
                                }
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function Coding_HeaderBSetSize() {
        App.Coding_HeaderB.setWidth(App.BudjeWin.getWidth());
        App.Coding_HeaderB.queryById('Coding_HeaderGridB').setHeight(App.BudjeWin.getHeight() - 250);
    }

    function SaveCoding_HeaderB() {
        var CboYear = App.Coding_HeaderB.queryById('CboYear');
        var txtDesc = App.Coding_HeaderB.queryById('txtDesc');
        var fldId = App.Coding_HeaderB.queryById('fldId');
        var er = false;

        if (CboYear.validate() == false) {
            er = true;
        }

        if (er == true)
            return;

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        Ext.net.DirectMethod.request({
            url: '/Budget/Coding/SaveHeader',
            params: {
                fldId: fldId.getValue(),
                fldYear: CboYear.getValue(),
                fldDesc: txtDesc.getValue()
            },
            success: function (data) {
                Ext.net.Mask.hide();
                if (data.Er == 1) {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
                else {
                    if (data.HeaderId != 0) {/*مود ذخیره*/
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.INFO,
                            buttons: Ext.MessageBox.YESNO,
                            fn: function (btn) {
                                if (btn == 'yes') {
                                    Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                    Ext.net.DirectMethod.request({
                                        url: '/Budget/Coding/CopyDetails',
                                        params: {
                                            HeaderId: data.HeaderId
                                        },
                                        success: function (result) {
                                            Ext.net.Mask.hide();
                                            Ext.MessageBox.show({
                                                title: result.MsgTitle,
                                                msg: result.Msg,
                                                icon: Ext.MessageBox.INFO,
                                                buttons: Ext.MessageBox.OK
                                            });
                                        }
                                    });
                                }
                                else {
                                    Ext.net.Mask.hide();
                                }
                            }
                        });
                    }
                    else {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.INFO,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                }
                App.Coding_HeaderB.queryById('Coding_HeaderGridB').store.load();
                if (data.Er != 1)
                    ClearCoding_HeaderB();
            }
        });
    }

    function ClearCoding_HeaderB() {
        App.Coding_HeaderB.queryById('fldId').setValue(0);
        App.Coding_HeaderB.queryById('CboYear').setValue("");
        App.Coding_HeaderB.queryById('txtDesc').setValue("");
    }

    function LoadCoding_HeaderB() {
        var SelectedRow = App.Coding_HeaderB.queryById('Coding_HeaderGridB').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Budget/Coding/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    var CboYear = App.Coding_HeaderB.queryById('CboYear');
                    CboYear.setValue(data.fldYear);
                    var txtDesc = App.Coding_HeaderB.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    var fldId = App.Coding_HeaderB.queryById('fldId');
                    fldId.setValue(data.fldId);
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function Coding_DetailB() {
        var SelectedRow = App.Coding_HeaderB.queryById('Coding_HeaderGridB').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Budget/Coding/Coding',
                params: {
                    HeaderId: SelectedRow.data.fldId,
                    Year: SelectedRow.data.fldYear
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function CopyFromTemplateCodingB() {
        var SelectedRow = App.Coding_HeaderB.queryById('Coding_HeaderGridB').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Budget/Coding/SelectTemplate',
                params: {
                    HeaderId: SelectedRow.data.fldId,
                    Year: SelectedRow.data.fldYear
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
</script>
