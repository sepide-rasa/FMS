@model IEnumerable<NewFMS.WCF_Automation.OBJ_Ronevesht>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities
@{

    var X = Html.X();
}
<style>
    .custom-icon {
        margin-right: 380px !important;
    }

    .custom-icon2 {
        margin-right: 180px !important;
    }
    #filedsetFileLetter legend {
        text-align: right;
        font-family: Tahoma !important;
    }
</style>

@(X.Window()
    .Height(550)
    .Width(700)
    .Modal(true)
    .ID("VaredeLetterWin")
        .Title("نامه وارده")
        //  .Icon(Ext.Net.Icon.UserComment2)
    .Closable(true)
    .Border(false)
    .CloseAction(Ext.Net.CloseAction.Destroy)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
        X.Panel()
                            .ID("ActionnPanellLetterV")
                            .Border(false)
        // .Frame(true)
        //  .MarginSpec("0 0 7px 0")
                            .TitleAlign(TitleAlign.Right)
        // .Collapsible(true)
        //.AnimCollapse(true)
                            .Height(60)
                            .Content(@<div id="mainLetterV">
                                <div class="maincontainer2">
                                    <ul class="ribbon5">
                                        <li>
                                            <ul class="menu2" style="left: 0px;float: right;direction: rtl;">
                                                <li id="LiActions1">
                                                    <ul id="ulActions1">
                                                        <li id="LetterVOP">
                                                            <div id="SaveLetterV">
                                                                <img src="~/content/icons/Automation/ذخیره نامه.png" style="width: 33px;" alt="ذخیره نامه" />
                                                                ذخیره
                                                            </div>
                                                            <div id="SendLetterVInLett">
                                                                <img src="~/content/icons/Automation/ارجاع نامه.png" style="width: 33px;" alt="ارجاع نامه" />
                                                                ارجاع
                                                            </div>
                                                            <div id="ToziLetterInLett">
                                                                <img src="~/content/icons/Automation/توزیع نامه.png" style="width: 33px;" alt="توزیع نامه" />
                                                                توزیع نامه
                                                            </div>
                                                            <div id="EbtalInLett">
                                                                <img src="~/content/icons/Automation/ابطال نامه.png" style="width: 33px;" alt="ابطال نامه" />
                                                                ابطال
                                                            </div>
                                                            <div id="KhatemeInLett">
                                                                <img src="~/content/icons/Automation/خاتمه کار.png" style="width: 33px;" alt="خاتمه کار" />
                                                                خاتمه کار
                                                            </div>
                                                            <div id="CharkheInLett">
                                                                <img src="~/content/icons/Automation/چرخه نامه.png" style="width: 33px;" alt="چرخه نامه" />
                                                                چرخه نامه
                                                            </div>

                                                        </li>

                                                    </ul>
                                                </li>
                                            </ul>
                                        </li>
                                    </ul>
                                </div>
                            </div>)
                        ,

                        X.TabPanel().Border(false).Height(500).Listeners(l => l.AfterRender.Handler = "FormLoad();")
                        .ID("pnlVaredeLetterDetails")
                        .AutoScroll(true).Closable(false)
                            .Layout(Ext.Net.LayoutType.Fit)
                                 .TopBar(
                        Html.X().Toolbar()
                            .Items(
                                        X.Label("تاریخ ساخت:")
                                            .MarginSpec("0 0 0 20px"),
                                   X.TextField()
                                    .ItemID("txtTarikhSakht")
                                    .ReadOnly(true)
                                    .Width(90),
                                     X.Label("شماره نامه:")
                                         .MarginSpec("0 0 0 10px"),
                                   X.TextField()
                                                .ItemID("txtShomareName")
                                        .ReadOnly(true)
                                        .Width(90),
                                            X.Label("تاریخ نامه:")
                                             .MarginSpec("0 0 0 10px"),
                                       X.TextField()
                                                .ItemID("txtTarikhName")
                                        .ReadOnly(true)
                                        .Width(90),
                                                 X.Label("شماره ثبت رایانه:")
                                             .MarginSpec("0 0 0 10px"),
                                       X.TextField()
                                                .ItemID("txtShomareSabt")
                                        .ReadOnly(true)
                                        .Width(90)
                                                                )
                                                            )
                        .Items(
                            X.Panel()
                            .Title("مشخصات نامه")
                            .ID("PnlAsliLetterV")
                                .Border(false)
                                .AutoScroll(true)
                     .Layout(LayoutType.VBox)
                     .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                                   .Items(
                            X.Hidden().ItemID("fldLetterId"),
                                    X.Hidden().ItemID("RecieverSelected"),
                                    X.Hidden().ItemID("SenderSelected"),
                                    X.Hidden().ItemID("RuneveshtSelected"),
                                        X.FieldSet().Border(true).Title("اطلاعات نامه")
                                    .Defaults(new { Margin = 2 })
                                    .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                    .Items(
                            X.Label("موضوع نامه:"),
                           X.TextField()
                            .ItemID("txtSubject")
                            .ColSpan(5)
                                .MaxLength(300)
                            .EnforceMaxLength(true)
                        .AllowBlank(false)
                        .BlankText("لطفا موضوع نامه را وارد کنید.")
                        .AutoFocus(true)
                        .Width(400)
                            ,
                            X.Label("شماره نامه:"),
                           X.TextField()
                            .ItemID("txtLetterNumber")
                                .MaxLength(50)
                            .EnforceMaxLength(true)
                        .AllowBlank(false)
                        .BlankText("لطفا شماره نامه را وارد کنید."),
                            X.Label("تاریخ نامه:"),
                    X.PDateField()
                        .ItemID("txtDateLetter")
                        .AllowBlank(true)
                        .BlankText("لطفا تاریخ نامه را وارد کنید.")
                        .Editable(true)
                        .MaskRe("/[0-9/]/")
                        .MaxLength(10)
                            .MinLength(10)
                        .EnforceMaxLength(true),
                                             X.Label("محرمانگی:"),
                                            X.ComboBox()
                                                        .ItemID("CboSecurityType")
                                                    .TypeAhead(true)
                                                    .Editable(false)
                                                    .QueryMode(DataLoadMode.Local)
                                                    .AllowBlank(false)
                                                    //.Width(200)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                    .BlankText("لطفا نوع محرمانگی را انتخاب کنید.")
                                                    .TriggerAction(TriggerAction.All)
                                                    .DisplayField("Name")
                                                    .ValueField("ID")
                                                    .EmptyText("نوع محرمانگی...")
                                                    .Store(X.Store()
                                                        .Model(X.Model()
                                                            .IDProperty("ID")
                                                            .Fields(
                                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                )
                                                            )
                                            .Proxy(Html.X().AjaxProxy()
                                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                .Url(Url.Action("GetSecurityType"))
                                                            .Reader(X.JsonReader().Root("data"))
                                                        )
                                                    )
                                         ,
                                                 X.Label("فوریت:"),
                                                X.ComboBox()
                                                                .ItemID("CboImmediacy")
                                                        .TypeAhead(true)
                                                        .Editable(false)
                                                        .QueryMode(DataLoadMode.Local)
                                                        .AllowBlank(false)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                        .BlankText("لطفا نوع محرمانگی را انتخاب کنید.")
                                                        .TriggerAction(TriggerAction.All)
                                                        .DisplayField("Name")
                                                        .ValueField("ID")
                                                        .EmptyText("فوریت...")
                                                        .Store(X.Store()
                                                            .Model(X.Model()
                                                                .IDProperty("ID")
                                                                .Fields(
                                                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                    )
                                                                )
                                                .Proxy(Html.X().AjaxProxy()
                                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                        .Url(Url.Action("GetImmediacy"))
                                                                .Reader(X.JsonReader().Root("data"))
                                                            )
                                                        )


                        ,
                              X.Label("گیرنده نامه (Ins):"),
                                X.TextField()
                                     .Width(400)
                                     .ColSpan(5)
                                    .ItemID("txtReceiver")
                                    .AllowBlank(false)
                                         .ReadOnly(true)
                                    .FieldStyle("padding-right:0px;")
                                    .Icon(Icon.UserAdd)
                                    .BlankText("لطفا گیرنده نامه را انتخاب کنید.")
                                        .Listeners(l =>
                                    {
                                        l.SpecialKey.Handler = "SelectReceiverCommision(e.getKey());";
                                        l.IconClick.Handler = "SelectReceiverCommision(111111);";
                                        l.AfterRender.Handler = "App.PnlAsliLetterV.queryById('txtReceiver').icon.dom.classList.add('custom-icon');";
                                    })

                                         ,
                                  X.Label("فرستنده نامه (Ins):"),
                                    X.TextField()
                                         .Width(400)
                                         .ColSpan(5)
                                        .ItemID("txtSender")
                                        .AllowBlank(false)
                                             .ReadOnly(true)
                                        .FieldStyle("padding-right:0px;")
                                        .Icon(Icon.UserAdd)
                                        .BlankText("لطفا فرستنده نامه را انتخاب کنید.")
                                            .Listeners(l =>
                                        {
                                            l.SpecialKey.Handler = "SelectSenderCommision(e.getKey());";
                                            l.IconClick.Handler = "SelectSenderCommision(111111);";
                                            l.AfterRender.Handler = "App.PnlAsliLetterV.queryById('txtSender').icon.dom.classList.add('custom-icon');";
                                        })
                                        
                                   , X.Label("ایجاد کننده:"),
                                            X.ComboBox()
                                                            .ItemID("CboCreator")
                                                    .TypeAhead(true)
                                                    .Editable(false)
                                                    .QueryMode(DataLoadMode.Local)
                                                        .AllowBlank(false)
                                         .Width(400)
                                         .ColSpan(5)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                    .BlankText("لطفا ایجاد کننده نامه را انتخاب کنید.")
                                                    .TriggerAction(TriggerAction.All)
                                                    .DisplayField("Name")
                                                    .ValueField("ID")
                                                    .EmptyText("ایجاد کننده...")
                                                        .Store(X.Store()
                                                        .Listeners(l => l.Load.Handler = "SetDefultCreator()")
                                                        .Model(X.Model()
                                                            .IDProperty("ID")
                                                            .Fields(
                                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                )
                                                            )
                                            .Proxy(Html.X().AjaxProxy()
                                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                    .Url(Url.Action("GetCreator"))
                                                            .Reader(X.JsonReader().Root("data"))
                                                        )
                                                    )
                        )

                            ,
                              X.FieldSet().Border(true).Title("کلید واژه")
                                            .Defaults(new { Margin = 2 })
                                                         .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                        .Items(
                            X.TextField().ItemID("txtKeywords").Width(500)
                        )
                             ,
                              X.FieldSet().Border(true).Title("رونوشت نامه")
                                        .Defaults(new { Margin = 2 })
                                        .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                        .Items(
                                 X.GridPanel().AutoScroll(true)//.Title("رونوشت نامه")
                                        .TopBar(
                                            Html.X().Toolbar()
                                            .Items(
                                                 X.Button().Text("اضافه").Icon(Ext.Net.Icon.Add).Listeners(li => li.Click.Handler = "SelectRuneveshtCommision()"),
                                                    X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                                                            .Listeners(li => li.Click.Handler = "if (App.PnlAsliLetterV.queryById('GridRunevesht').selModel.getLastSelected() == null) {Ext.MessageBox.show({ title: 'خطا', msg: 'لطفا یک سطر را انتخاب کنید',icon: Ext.MessageBox.ERROR,buttons: Ext.MessageBox.OK});return false;}else DelMomayez();")

                                            )
                                        )
                                            .ItemID("GridRunevesht").Flex(2)

                                    .Height(120).Width(500)
        //.ColumnWidth(0.6)
        //.Layout(Ext.Net.LayoutType.Column)
                                    .Store(
                                           X.StoreForModel()//.AutoLoad(false)
                                            .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("ReadRunevesht"))
                                                .Reader(Html.X().JsonReader().Root("data"))
             .ExtraParams(x => x.Add(new { LetterId = @ViewBag.LetterId }))
                                        )
                                        .PageSize(10)
                                        .RemoteFilter(false)
                                        .RemotePaging(true)

                                    )
                                    .View(
                                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                                    )
                                        .Plugins(Html.X().CellEditing())
                                    .ColumnModel(
        //Html.X().RowNumbererColumn(),
                                                    Html.X().Column().DataIndex(Model, m => m.fldid).Text("کد").Flex(1).Hidden(true),
                                                            Html.X().Column().DataIndex(Model, m => m.fldId_Type).Text("fldId_Type").Flex(1).Hidden(true),
                                                            Html.X().Column().DataIndex(Model, m => m.fldAshkhasHoghoghiId).Text("fldAshkhasHoghoghiId").Flex(1).Hidden(true),
                                                                Html.X().Column().DataIndex(Model, m => m.fldCommisionId).Text("fldCommisionId").Flex(1).Hidden(true),
                                                    Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام").Flex(4),
                                                 Html.X().ComponentColumn().ID("colAssType").DataIndex(Model, m => m.fldAssignmentTypeId).Filterable(false)
                                        .Flex(3).Editor(true).Text("نوع")//.Listeners(l=>l.Bind.Fn="setToken").Listeners(l=>l.Edit.Fn="AddtoArray")
                                        .Component(
                                            X.ComboBox()
                                                .ItemID("CboType")
                                                .ID("CboAssType")
                                                .TypeAhead(true)
                                                .Editable(false)
                                                .QueryMode(DataLoadMode.Local)
                                                .AllowBlank(false)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                .BlankText("لطفا نوع را انتخاب کنید.")
                                                .TriggerAction(TriggerAction.All)
                                                .DisplayField("Name")
                                                .ValueField("ID")
                                                .EmptyText("نوع...")
                                                .Store(X.Store()
                                                    .Model(X.Model()
                                                        .IDProperty("ID")
                                                        .Fields(
                                                            new ModelField("ID", ModelFieldType.String) { Mapping = "fldId" },
                                                            new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                                                            )
                                                        )
                                        .Proxy(Html.X().AjaxProxy()
                                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                        .Url(Url.Action("GetAssType"))
                                                        .Reader(X.JsonReader().Root("data"))
                                                    )
                                                )
                                        ),
                                                    Html.X().Column().DataIndex(Model, m => m.fldText).Text("شرح").Flex(7)
                                                .Editor(X.TextField().ID("txtDesc"))

                                    )


                                    .SelectionModel(
                                        Html.X().RowSelectionModel()
                                            .Mode(Ext.Net.SelectionMode.Single)
                                    )

                        )
                             ,
                                  X.FieldSet().Border(true).Title("توضیحات")
                                            .Defaults(new { Margin = 2 })
                                                     .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                            .Items(
                                    X.TextArea().ItemID("txtDesc").Width(500)
                            )
                            ,
                            X.FieldSet().Border(true).Title("انتخاب متن نامه").Width(520)
                                .Defaults(new { Margin = 2 })
                                            .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                                            .MarginSpec("0 0 60px 0")
                            .Items(
                                X.ComboBox()
                                .ItemID("CboTypeLetter")
                                .Editable(false)
                                .TypeAhead(true)
                                .BlankText("لطفا یک مورد را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .AllowBlank(false)
                                .Items(
                                    new ListItem("فایل", "1"),
                                    new ListItem("اسکنر", "0")
                                    )
                                        .Listeners(l => l.Change.Handler = "ChangeTypeLetter()"),
                        X.FieldSet().ID("filedsetFileLetter")
                            .Border(false)
                                    .AutoScroll(true)
                           // .Title("انتخاب فایل(حداکثر حجم مجاز: 10MB)")
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                            .Items(
                                X.FormPanel()
                                    .Border(false)
                                    .Width(470)
                                    .Layout(LayoutType.HBox)
                                    .ItemID("fieldsetShowFile")
                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle })
        //.Listeners(l => l.AfterRender.Handler = "App.NewHuman.queryById('fieldsetShowFile').setWidth(App.BasicInfWin.getWidth() - 1050)")
                                    .Items(
                                        X.FileUploadField()
                                            .MarginSpec("0 10px 10px 0")
                                            .Icon(Ext.Net.Icon.DiskUpload)
                                            .ButtonOnly(true)
                                            .ButtonText("انتخاب فایل")
                                            .DirectEvents(l =>
                                            {
                                                l.Change.Action = "UploadFileLetter";
                                                //l.Change.ExtraParams.Add(new { LetterId = ViewBag.LetterId_Upload });
                                                l.Change.Delay = 2000;
                                                l.Change.Before = "if(GotoServerFileLetter==false){return false;}";
                                                l.Change.Success = "hideprogressFileLetter()";
                                            })
                                                    .Listeners(l => l.Change.Fn = "showFileLetter"),
                                        X.Container()
                                            .Content(@<div id="fi-button-msgLetter" style="width:570px;text-align:right;"><b>فایل انتخاب شده:</b></div>)
                                        )
                            )
                            )

                    )

                    )
)
)
<script>
    
    function ChangeTypeLetter() {
        var CboTypeLetter = App.VaredeLetterWin.queryById('CboTypeLetter');
        if (CboTypeLetter.getValue() == "1") {
            App.VaredeLetterWin.queryById('filedsetFileLetter').show();
        }
        else {
            App.VaredeLetterWin.queryById('filedsetFileLetter').hide();
        }
    }
    var HaveFileLetter = false;
    var EndUploadFileLetter = false;
    var GotoServerFileLetter = false;

    var CheckFileLetter = setInterval(CheckEndFileLetter, 500);

   
    function CheckEndFileLetter() {
        if (EndUploadFileLetter == true) {
            Ext.MessageBox.hide();
            clearInterval(CheckEndFileLetter);
            EndUploadFileLetter = false;
            App.VaredeLetterWin.body.mask("آپلود فایل با موفقیت انجام شد. در حال ذخیره سازی...");
            Ext.net.DirectMethod.request({
                url: '/Automation/VaredeLetter/SaveFiles',
                params: {
                    LetterId: LetterId,
                },
                success: function (data) {
                    GotoServer = false;
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1) {
                        ic = Ext.MessageBox.ERROR;
                    }
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    
                    App.VaredeLetterWin.body.mask().hide();
                    Ext.get('fi-button-msgLetter').update('<b>فایل انتخاب شده:</b>');
                }
            });
        }
    }
    function showProgressBarFileLetter() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
    function hideprogressFileLetter() {
        EndUploadFileLetter = true;
    }
    

   
    var showFileLetter = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msgLetter');
        if (v) {
            HaveFileLetter = true;
            showProgressBarFileLetter();

            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png" || v.split('.').pop().toLowerCase() == "jpeg" ||
               v.split('.').pop().toLowerCase() == "tif" || v.split('.').pop().toLowerCase() == "tiff" || v.split('.').pop().toLowerCase() == "bmp" ||
                v.split('.').pop().toLowerCase() == "pdf" || v.split('.').pop().toLowerCase() == "gif") {
                if (document.getElementById(id).files[0].size <= 10485760) {
                    GotoServerFileLetter = true;
                    el.update('<b>فایل انتخاب شده:</b> ' + v);

                }
                else {
                    clearInterval(CheckEndFileLetter);
                    el.update("");
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "حجم فایل انتخاب شده غیرمجاز است.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                }
                else {
                    el.highlight();
                }
            }
            else {
                clearInterval(CheckEndFileLetter);
                el.update("");
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "فایل انتخاب شده غیرمجاز است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
    };
    var CommisionId = 0;
    var LetterId = 0;
    function FormLoad() {
        App.VaredeLetterWin.queryById('CboTypeLetter').setValue("1");
        CommisionId = '@ViewBag.CommisionId';
        LetterId = '@ViewBag.LetterId';
        
        ShowPanels();
        LoadDataInLetter();
    }
    function ShowPanels() {
        if (LetterId != 0) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/VaredeLetter/LetterAttach',
                params: {
                    containerId: "pnlVaredeLetterDetails",
                    LetterId: LetterId
                },
                success: function () {
                    Ext.net.DirectMethod.request({
                        url: '/Automation/VaredeLetter/LetterHistory',
                        params: {
                            containerId: "pnlVaredeLetterDetails",
                            LetterId: LetterId
                        },
                        success: function () {
                            Ext.net.DirectMethod.request({
                                url: '/Automation/VaredeLetter/LetterFollow',
                                params: {
                                    containerId: "pnlVaredeLetterDetails",
                                    LetterId: LetterId
                                },
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    function LoadDataInLetter() {
        if (LetterId != 0) {
            Ext.net.Mask.show({ msg: 'در حال بارگزاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/VaredeLetter/DetailsLetter',
                params: {
                    Id: LetterId
                },
                success: function (data) {
                    var RecieverSelected = App.PnlAsliLetterV.queryById('RecieverSelected');
                    RecieverSelected.setValue(data.fldReceiver);
                    var SenderSelected = App.PnlAsliLetterV.queryById('SenderSelected');
                    SenderSelected.setValue(data.fldExternalSender);
                    var RuneveshtSelected = App.PnlAsliLetterV.queryById('RuneveshtSelected');
                    RuneveshtSelected.setValue(data.fldRoonevesht);
                    var txtShomareName = App.pnlVaredeLetterDetails.queryById('txtShomareName');
                    txtShomareName.setValue(data.fldLetterNumber);
                    var txtTarikhSakht = App.pnlVaredeLetterDetails.queryById('txtTarikhSakht');
                    txtTarikhSakht.setValue(data.fldCreatedDate);
                    var txtShomareSabt = App.pnlVaredeLetterDetails.queryById('txtShomareSabt');
                    txtShomareSabt.setValue(data.fldOrderId);
                    var txtTarikhName = App.pnlVaredeLetterDetails.queryById('txtTarikhName');
                    txtTarikhName.setValue(data.fldLetterDate);
                    var txtLetterNumber = App.PnlAsliLetterV.queryById('txtLetterNumber');
                    txtLetterNumber.setValue(data.fldLetterNumber);
                    var txtDateLetter = App.PnlAsliLetterV.queryById('txtDateLetter');
                    txtDateLetter.setValue(data.fldLetterDate);
                    var txtKeywords = App.PnlAsliLetterV.queryById('txtKeywords');
                    txtKeywords.setValue(data.fldKeywords);
                    var txtSubject = App.PnlAsliLetterV.queryById('txtSubject');
                    txtSubject.setValue(data.fldSubject);
                    var CboSecurityType = App.PnlAsliLetterV.queryById('CboSecurityType');
                    CboSecurityType.setValue(data.fldSecurityTypeID);
                    var CboImmediacy = App.PnlAsliLetterV.queryById('CboImmediacy');
                    CboImmediacy.setValue(data.fldImmediacyID);
                    var CboCreator = App.PnlAsliLetterV.queryById('CboCreator');
                    CboCreator.setValue(data.fldComisionID);
                    var txtDesc = App.PnlAsliLetterV.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    var txtReceiver = App.PnlAsliLetterV.queryById('txtReceiver');
                    txtReceiver.setValue(data.fldRecieverName);
                    var txtSender = App.PnlAsliLetterV.queryById('txtSender');
                    txtSender.setValue(data.fldExternalSenderName);

                    Ext.net.Mask.hide();
                }
            });
        }
        else {

            App.PnlAsliLetterV.queryById('CboSecurityType').setValue("1");
            App.PnlAsliLetterV.queryById('CboImmediacy').setValue("1");
        }
    }
    function SelectReceiverCommision(Code) {
        if (Code == 45 || Code == 111111) {
            Ext.net.DirectMethod.request({
                url: '/Automation/SearchReferralRules/Index',
                params: {
                    State: 3,
                    SearchType: 0,
                    CommId: CommisionId
                }
            });
        }
    }
    function SelectSenderCommision(Code) {
        if (Code == 45 || Code == 111111) {
            Ext.net.DirectMethod.request({
                url: '/Automation/SearchReferralRules/Index',
                params: {
                    State: 4,
                    SearchType: 0,
                    CommId: CommisionId
                }
            });
        }
    }
    function SelectRuneveshtCommision() {
        Ext.net.DirectMethod.request({
            url: '/Automation/SearchReferralRules/Index',
            params: {
                State: 5,
                SearchType: 0,
                CommId: CommisionId
            }
        });
    }
    $('#SaveLetterV').click(function () {
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        var RecieverSelected = App.PnlAsliLetterV.queryById('RecieverSelected');
        var SenderSelected = App.PnlAsliLetterV.queryById('SenderSelected');
        var txtShomareName = App.pnlVaredeLetterDetails.queryById('txtShomareName');
        var txtTarikhName = App.pnlVaredeLetterDetails.queryById('txtTarikhName');
        var txtKeywords = App.PnlAsliLetterV.queryById('txtKeywords');
        var txtSubject = App.PnlAsliLetterV.queryById('txtSubject');
        var CboSecurityType = App.PnlAsliLetterV.queryById('CboSecurityType');
        var CboImmediacy = App.PnlAsliLetterV.queryById('CboImmediacy');
        var CboCreator = App.PnlAsliLetterV.queryById('CboCreator');
        var txtDesc = App.PnlAsliLetterV.queryById('txtDesc');
        var txtReceiver = App.PnlAsliLetterV.queryById('txtReceiver');
        var txtSender = App.PnlAsliLetterV.queryById('txtSender');
        var txtLetterNumber = App.PnlAsliLetterV.queryById('txtLetterNumber');
        var txtDateLetter = App.PnlAsliLetterV.queryById('txtDateLetter');


        var er = false;


        if (txtSender.validate() == false) {
            er = true;
        } if (txtReceiver.validate() == false) {
            er = true;
        } if (CboCreator.validate() == false) {
            er = true;
        } if (CboImmediacy.validate() == false) {
            er = true;
        } if (CboSecurityType.validate() == false) {
            er = true;
        } if (txtSubject.validate() == false) {
            er = true;
        } if (txtKeywords.validate() == false) {
            er = true;
        } if (txtLetterNumber.validate() == false) {
            er = true;
        } if (txtDateLetter.validate() == false) {
            er = true;
        }

        var Items = new Array();
        var er = false;
        var SelectedRow = App.PnlAsliLetterV.queryById('GridRunevesht');
        var ErAssignmentTypeID = 0;
        for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
            row = SelectedRow.selModel.store.data.items[i];
            if (row.data.fldAssignmentTypeID != 0) {
                Items.push({
                    'fldAshkhasHoghoghiId': row.data.fldAshkhasHoghoghiId,
                    'fldCommisionId': row.data.fldCommisionId,
                    'fldAssignmentTypeId': row.data.fldAssignmentTypeId,
                    'fldText': row.data.fldText
                });
            }
            else
                ErAssignmentTypeID = 1;
        }
        if (ErAssignmentTypeID == 1) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "فیلد نوع ارجاع انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            Ext.net.Mask.hide();
            er = true;
        }


        if (er == true)
            return;

        var data1 = {
            runevesht: Items,
            Recievers: RecieverSelected.getValue(),
            Senders: SenderSelected.getValue(),
            fldDesc: txtDesc.getValue(),
            fldID: LetterId,
            fldComisionID: CboCreator.getValue(),/* CommisionId,*/
            fldImmediacyID: CboImmediacy.getValue(),
            fldSecurityTypeID: CboSecurityType.getValue(),
            fldSubject: txtSubject.getValue(),
            fldKeywords: txtKeywords.getValue(),
            fldLetterDate: txtDateLetter.rawValue,
            fldLetterNumber: txtLetterNumber.getValue()

        };

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/Automation/VaredeLetter/SaveLetter',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data1),
            datatype: "json",
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Err == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK,
                    fn: function (btn) {
                        if (btn == 'ok') {
                            if (data.Err == 0 && LetterId == 0) {
                                LetterId = data.LetterID;
                           
                                App.pnlVaredeLetterDetails.queryById('txtShomareSabt').setValue(data.LetterOrderId);
                                App.pnlVaredeLetterDetails.queryById('txtTarikhSakht').setValue(data.LetterCreateDate);
                                App.pnlVaredeLetterDetails.queryById('txtShomareName').setValue(data.LetterNumber);
                                App.pnlVaredeLetterDetails.queryById('txtTarikhName').setValue(data.LetterDate);
                                ShowPanels();
                            }
                        }
                    }
                });

                Ext.net.Mask.hide();
            }
        });

    });
    function SetDefultCreator() {
        App.PnlAsliLetterV.queryById('CboCreator').setValue(CommisionId.toString());
        if ('@ViewBag.LetterId' != 0)
            App.PnlAsliLetterV.queryById('CboCreator').setDisabled(true);
    }
    $('#SendLetterVInLett').click(function () {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            var CboCreator = App.PnlAsliLetterV.queryById('CboCreator');
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/LetterKartabl/ErjaWin',
                params: {
                    fldLetterId: LetterId,
                    fldMessageId: '',
                    SourceAssId: '@ViewBag.SourceAssId',
                    commId: CboCreator.getValue(),
                    state: 2,
                    LetterTypeId: 1
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
    });
    $('#ToziLetterInLett').click(function () {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            Ext.net.Mask.show({ msg: 'در حال بررسی...' });

            var RecieverSelected = App.PnlAsliLetterV.queryById('RecieverSelected');
            var RuneveshtSelected = App.PnlAsliLetterV.queryById('RuneveshtSelected');
            var CboCreator = App.PnlAsliLetterV.queryById('CboCreator');

            var Items = new Array();
            var er = false;
            var SelectedRow = App.PnlAsliLetterV.queryById('GridRunevesht');
            var ErAssignmentTypeID = 0;
            for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
                row = SelectedRow.selModel.store.data.items[i];
                if (row.data.fldAssignmentTypeID != 0) {
                    Items.push({
                        'fldAshkhasHoghoghiId': row.data.fldAshkhasHoghoghiId,
                        'fldCommisionId': row.data.fldCommisionId,
                        'fldAssignmentTypeId': row.data.fldAssignmentTypeId,
                        'fldText': row.data.fldText
                    });
                }
                else
                    ErAssignmentTypeID = 1;
            }
            if (ErAssignmentTypeID == 1) {
                Ext.MessageBox.show({
                    Name: "خطا",
                    msg: "فیلد نوع ارجاع انتخاب نشده است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
                er = true;
            }

            Ext.net.DirectMethod.request({
                url: '/Automation/SadereLetter/CheckInternalP',
                params: {
                    fldReceiverComisionID: RecieverSelected.getValue(),
                    fldRoneveshId: RuneveshtSelected.getValue()
                },
                success: function (data) {
                    if (data.In == 1) {
                        Ext.net.DirectMethod.request({
                            url: '/Automation/SadereLetter/DistributeWin',
                            params: {
                                LetterID: LetterId,
                                ReceiverComisionID: RecieverSelected.getValue(),
                                ComisionID: CboCreator.getValue(),
                                SourceAssId: '@ViewBag.SourceAssId'
                            },
                            success: function (data) {
                                Ext.net.Mask.hide();
                            }
                        });
                    } else {
                        var data1 = {
                            runevesht: Items,
                            LetterID: LetterId,
                            ReceiverComisionID: RecieverSelected.getValue(),
                            ComisionID: CboCreator.getValue(),
                            SourceAssId: '@ViewBag.SourceAssId',
                            AnswerDate: ""
                        };
                        $.ajax({
                            type: "POST",
                            url: '/Automation/SadereLetter/Distribute',
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify(data1),
                            datatype: "json",
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Err == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK,
                                    fn: function (btn) {
                                        if (btn == 'ok') {
                                            SearchSK();
                                        }
                                    }
                                });
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
    });
     
    $('#EbtalInLett').click(function () {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا برای ابطال نامه مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Automation/LetterActionType/SaveLetterActions',
                        params: {
                            LetterIds: LetterId + ";",
                            fldLetterActionTypeId: 2
                        },
                        success: function (data) {
                            var ic = Ext.MessageBox.INFO;
                            if (data.Err == 1)
                                ic = Ext.MessageBox.ERROR;
                            Ext.MessageBox.show({
                                title: data.MsgTitle,
                                msg: data.Msg,
                                icon: ic,
                                buttons: Ext.MessageBox.OK
                            });
                            Ext.net.Mask.hide();
                            SearchSK();
                        }
                    });
                }
            }
        });
    });
    $('#KhatemeInLett').click(function () {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا برای خاتمه نامه مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Automation/LetterActionType/SaveLetterActions',
                        params: {
                            LetterIds: LetterId + ";",
                            fldLetterActionTypeId: 3
                        },
                        success: function (data) {
                            var ic = Ext.MessageBox.INFO;
                            if (data.Err == 1)
                                ic = Ext.MessageBox.ERROR;
                            Ext.MessageBox.show({
                                title: data.MsgTitle,
                                msg: data.Msg,
                                icon: ic,
                                buttons: Ext.MessageBox.OK
                            });
                            Ext.net.Mask.hide();
                            SearchSK();
                        }
                    });
                }
            }
        });
    });
    $('#CharkheInLett').click(function () {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Automation/LetterCharkhe/Index',
            params: {
                LetterId: LetterId,
                MessageId: "",
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    });
</script>