@*@model IEnumerable<NewFMS.WCF_Common.OBJ_ReferralRules>*@
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}

@(X.Panel().Border(false)
                .ID("ReferralRules")
                            .Listeners(li => li.AfterRender.Handler = "setSizePnl();")
    .Title("قوانین ارجاع")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.Panel()
                .Border(false)
                .AutoScroll(true)
    .KeyMap(
        Html.X().KeyMap()
            .ID("ReferralRulesMap")
            .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("SaveReferralRules(); ")
                );

            }))
    .Items(
        X.Panel()
            .Border(false)
            .TopBar(
                Html.X().Toolbar()
                    .Items(


                            X.Button()
                                .Text("ذخیره")
                                .Icon(Ext.Net.Icon.Add)
                                .Listeners(li => li.Click.Handler = "SaveReferralRules();"),
                              X.Button().Text("راهنما")
                              .Icon(Ext.Net.Icon.Help)
                                  .Listeners(l => { l.Click.Handler = "HelpReferralRules();"; })

                                //, X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
        //.Listeners(de =>
        //    {
        //        de.Click.Handler = "HelpReferralRules();";
        //    })
                            )
                        )
            .Items(
                X.Panel()
                        .ItemID("Panel")
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 5 })
                    .Height(50)
                    .Items(
                          
                                 X.Label("پست:"),
                            X.ComboBox()
                                .LabelAlign(Ext.Net.LabelAlign.Top)
                                .ItemID("CboPosts")
                                .Width(300)
                                .TypeAhead(true)
                                .AllowBlank(false)
                                .BlankText("لطفا پست ارجاع دهنده را انتخاب کنید")
                                .Editable(true)
                                .ForceSelection(true)
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .DisplayField("Name")
                                .ValueField("ID")
                               .Listeners(a =>
                                {
                                    a.Change.Handler = "Change()";
                                }
                                )
                                .Store(
                                    X.Store()
                                 //   .AutoLoad(false)
                                    .Model(
                                        X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                    )
                                        )
                                    .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetPosts"))
                                    .Reader(X.JsonReader().Root("data"))
                                        )
                                   // .Parameters(ps => ps.Add(new StoreParameter("userGroup", "App.ReferralRules.queryById('CboGrohKarbari').getValue()", ParameterMode.Raw)))
                                 )
                                 ,
                                  X.Label("سازمان:"),
                            X.ComboBox()
                                .LabelAlign(Ext.Net.LabelAlign.Top)
                                .ItemID("CboOrgs")
                                .Width(300)
                                .TypeAhead(true)
                                .AllowBlank(false)
                                .BlankText("لطفا ارگان را انتخاب کنید")
                                    .Editable(true)
                                .ForceSelection(true)
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .DisplayField("Name")
                                .ValueField("ID")
                               .Listeners(a =>
                                {
                                    a.Change.Handler = "Change()";
                                }
                                )
                                .Store(
                                    X.Store()
                                 //   .AutoLoad(false)
                                    .Model(
                                        X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                    )
                                        )
                                    .Proxy(X.AjaxProxy()
                                                .Url(Url.Action("GetOrgan"))
                                    .Reader(X.JsonReader().Root("data"))
                                        )
                                   // .Parameters(ps => ps.Add(new StoreParameter("userGroup", "App.ReferralRules.queryById('CboGrohKarbari').getValue()", ParameterMode.Raw)))
                                 )
                    ),
                X.Panel()
                    .Border(false).AutoScroll(true).ItemID("pnlTree")
                    .Items
        //                (
        //                            X.TreePanel()
        //                            .ID("TreeChartOrgan")
        //                                .AutoScroll(true)
        //                                .Width(300)
        //                                .ColSpan(2)
        ////.Height(450)
        //                                .UseArrows(true)
        //                                .Border(false)
        //                                    .Store(
        //                Html.X().TreeStore()
        //                    .Proxy(
        //                                Html.X().AjaxProxy().Url(Url.Action("Node"))
        //                    )
        //            )

        //                                .Listeners(a =>
        //                                {
        //                                    a.ItemClick.Handler = "GetIdTreePosts(record)";
        //                                    a.AfterRender.Handler = "this.getRootNode().expand();";
        //                                    a.BeforeLoad.Fn = "nodeLoad";
        //                                })
        //                   .Root(Html.X().Node().NodeID("0").Text("چارت سازمانی"))

        //                                .View(
        //                                X.TreeView()
        //                                .Plugins(
        //                                X.TreeViewDragDrop().AppendOnly(true).ContainerScroll(true)

        //                            )
        //                    )
        //                    )
                        (
                            X.TreePanel()
                                    .ID("TreePosts")
                                .AutoScroll(true)
                                .Width(600)
                                .ColSpan(2)
        //.Expand(true)
                                .Listeners(l => l.AfterItemCollapse.Fn = "reloadTreePosts")
                                .UseArrows(true)
                                .Border(false)
                                .Store(
                                    X.TreeStore()
                                        .AutoLoad(false)
                                        .Proxy(
                                            Html.X().AjaxProxy()
                                                .Url(Url.Action("NodeLoad"))
                                            )
                                                .Listeners(l =>
                                                {
                                                    l.BeforeLoad.Fn = "GetParamTreePosts";
                                                    // a.BeforeLoad.Fn = "nodeLoadRequest";
                                                })
                                    )
                                .Listeners(a =>
                                {
                                    a.ItemClick.Handler = "GetIdTreePosts(record)";
                                    /*a.BeforeLoad.Fn = "nodeLoad";
                                    a.CheckChange.Fn = "GetGroupId";*/
                                })
                                .Root(
                                    Html.X().Node()
                                        .NodeID("0")
        //.Expanded(true)
                                        .Text("پست های اجرائی")
                                        .Checked(null))
                                )
            )
                        )
)
)
<script type="text/javascript">
    var NodeId;
    var id;
    var node2;

    var nodeLoad = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/Automation/ReferralRules/NodeLoad',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };
 
    var reloadTreePosts = function (record, value, htmlrec) {
        if (value == 0) {
            App.TreePosts.expandAll();
        }
    };

    var GetParamTreePosts = function (store, operation, eOpts) {
        var nodeId = operation.node.getId();
        operation.params.nod = nodeId;

        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/Automation/ReferralRules/NodeLoad',
            params: {
                nod: nodeId,
                fldPostErjaDahandeId: App.ReferralRules.queryById('CboPosts').getValue(),
                OrganId: App.ReferralRules.queryById('CboOrgs').getValue()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                App.TreePosts.expandAll();
               /* App.TreePosts.getSelectionModel().select(App.TreePosts.getSelectionModel().store.getAt(index));
                App.TreePosts.scrollByDeltaX(100);
                NodeId = App.TreeRequest.getSelectionModel().getLastSelected().data.id;*/
            
            },
            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });
        return false;
    };

  
    var UnChecked = "";
    var GetGroupId = function (node, checked, eOpts) {
        if (node.childNodes.length > 0) {
            node.cascadeBy(function (n) {
                n.set('checked', checked);
                if (checked == false) {
                    /*UnChecked = UnChecked.replace(n.getId() + ";", '');*/
                    UnChecked = UnChecked + n.getId() + ";";
                }
            });
            if (checked == true) {
                while (node.parentNode.getId() != 0) {
                    node.parentNode.set('checked', true);
                    node = node.parentNode;
                }
            }
            else {
                var StateEqual = true;
                while (node.parentNode.getId() != 0) {
                    node.parentNode.cascadeBy(function (n) {
                        if (n != node.parentNode) {
                            if (n.get('checked') == true) {
                                StateEqual = false;
                            }
                        }
                    });
                    if (StateEqual == true) {
                        node.parentNode.set('checked', false);
                        UnChecked = UnChecked + node.getId() + ";";
                        UnChecked = UnChecked + node.parentNode.getId() + ";";

                    }
                    node = node.parentNode;
                }
            }
        }
        else {
            if (checked == false) {
                UnChecked = UnChecked + node.getId() + ";";
            }
            if (checked == true) {
                while (node.parentNode.getId() != 0) {
                    node.parentNode.set('checked', true);
                    node = node.parentNode;
                }
            }
            else {
                var StateEqual = true;
                node.parentNode.cascadeBy(function (n) {
                    if (n != node.parentNode) {
                        if (n.get('checked') != checked) {
                            StateEqual = false;
                        }
                    }
                });
                if (StateEqual != checked) {
                    node.parentNode.set('checked', checked);
                    if (checked == false) {
                        /*UnChecked = UnChecked.replace(node.getId() + ";", '');*/
                        UnChecked = UnChecked + node.getId() + ";";
                        UnChecked = UnChecked + node.parentNode.getId() + ";";
                    }
                }

                var StateEqual2 = true;
                while (node.parentNode.getId() != 0) {
                    node.parentNode.cascadeBy(function (n) {
                        if (n != node.parentNode) {
                            if (n.get('checked') == true) {
                                StateEqual2 = false;
                            }
                        }
                    });
                    if (StateEqual2 == true) {
                        node.parentNode.set('checked', false);
                        UnChecked = UnChecked + node.getId() + ";";
                        UnChecked = UnChecked + node.parentNode.getId() + ";";
                    }
                    node = node.parentNode;
                }
            }
        }
        
    };

    function HelpReferralRules() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Automation/ReferralRules/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function setSizePnl() {
        App.ReferralRules.setWidth(App.AutomationWin.getWidth());
        var pnl = App.ReferralRules.queryById('pnlTree');
        pnl.setHeight(App.AutomationWin.getHeight() - 251);
    }

    function Change() {
        var CboOrgs = App.ReferralRules.queryById('CboOrgs');
        var CboPosts = App.ReferralRules.queryById('CboPosts');
        if (CboOrgs.getValue() != "" && CboOrgs.getValue() != null && CboPosts.getValue() != "" && CboPosts.getValue() != null) {

            App.TreePosts.store.getProxy().extraParams = {
                "fldPostErjaDahandeId": App.ReferralRules.queryById('CboPosts').getValue(),
                "OrganId": App.ReferralRules.queryById('CboOrgs').getValue()
            };
            if (App.TreePosts.getRootNode().isExpanded() == true) {
                App.TreePosts.store.load();
                App.TreePosts.collapseAll();
            }
            else {
                App.TreePosts.expandAll();
            }
        }
       

    }

 

    function GetIdTreePosts(record) {
        NodeId = record.getId();
    };

    function SaveReferralRules() {
        var Father = App.TreePosts;
        var Checked = Father.getChecked();
        if (Checked == []) { return; }
        var ReferralRules = new Array();
        var CboPosts = App.ReferralRules.queryById('CboPosts');
        var CboOrgs = App.ReferralRules.queryById('CboOrgs');
        var FatherId;


            Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
            for (var i = 0; i < Checked.length ; i++) {
                FatherId = Checked[i];
                if (FatherId.getId().length > 1) {
                    var ss = FatherId.getId();
                    if (ss.substring(0, 1) == "P") {
                        FatherId = ss.substring(1, ss.length);
                        ReferralRules.push({
                            'fldPostErjaGirandeId': FatherId,
                            'fldPostErjaDahandeId': CboPosts.getValue(),
                            'fldChartEjraeeGirandeId': null
                        });
                    }
                }
                else {
                    ReferralRules.push({
                        'fldPostErjaGirandeId':null,
                        'fldPostErjaDahandeId': CboPosts.getValue(),
                        'fldChartEjraeeGirandeId': FatherId.getId()
                    });
                }
            }

            var data = {
                Rules: ReferralRules,
                'PostErjaDahandeId': CboPosts.getValue(),
                'OrganId': CboOrgs.getValue()
            };
            $.ajax({
                type: "POST",
                url: '/Automation/ReferralRules/SaveReferralRules',
                datatype: "json",
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (result) {
                    var data = result;/*JSON.parse(result);*/
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: Ext.MessageBox.INFO,
                        buttons: Ext.MessageBox.OK
                    });
                    Ext.net.Mask.hide();
                    UnChecked = "";
                },
                failure: function (data) {
                    alert(data.data);
                }
            });
        }

</script>