@model IEnumerable<NewFMS.WCF_Accounting.OBJ_DocumentRecord_Header>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net

@{
    var X = Html.X();
    NewFMS.WCF_Common.CommonService servic = new NewFMS.WCF_Common.CommonService();
    string IP = System.Web.HttpContext.Current.Request.ServerVariables["REMOTE_HOST"];
    NewFMS.WCF_Common.ClsError Err = new NewFMS.WCF_Common.ClsError();
    
}

<script>
    var EditOrNot = function (value, record) {
        if (value == 1 && record.record.data.fldAccept == 1) {
            var template = "<img src='/Content/icons/Accounting/mini/قفل بسته.png' title='غیرقابل ویرایش' style='width:17px;height:17px;' />";
            return template;
        }
        else {
            var template = "<img src='/Content/icons/Accounting/mini/قفل باز.png' title='قابل ویرایش' style='width:17px;height:17px;' />";
            return template;
        }
    }; 

    var AttachOrNot = function (value, record) {
        if (value == 1) {
            var template = "<img src='/Content/icons/attach.png' style='width:17px;height:17px;' />";
            return template;
        }
        else {
            return "";
        }
    };

    var showRelatedDoc = function (value, record) {
        if (record.record.data.fldDocumentNum_Pid != 0) {
            return value + "(مربوط به سند شماره " + record.record.data.fldDocumentNum_Pid + ")";
        }
        return value;
    };
    
    var LinktoMain = function (value, record) {
        if (value == 0) { return '' };
        if (record.record.data.fldModuleErsalId == 4)
            return value;
        var templateDoc = '<a href="#" onclick={0}>{1}</a>';
        var fldId = String(record.record.data.fldPId);
        var fldModuleErsalId = String(record.record.data.fldModuleErsalId);
        var s = "GotoShowDocument(" + fldId + "," + fldModuleErsalId + ");";
        return Ext.String.format(templateDoc, s,value);
    };
   /* var test = function (value, metaData, record) {
        var deviceDetail = record.get('fldTypeSanadName') + " " + record.get('fldTypeSanadName');
        metaData.tdAttr = 'data-qtip="' + deviceDetail + '"';
        return value;
    };*/
</script>
<style>
    .Coloring .x-grid-cell, .x-grid-rowwrap-div{
        background-color:#F7D2AC !important;/*CEF55E*/
    }
    #DocRegister_HeaderGrid .x-column-header-text {
        white-space: pre-wrap;
        height: 30px !important;
    }
</style>
@(Html.X().Panel()
    .ID("DocRegister_Header")
    .Title("ثبت سند")
    .Closable(true)
    .Listeners(li => li.AfterRender.Handler = "DocRegister_HeaderSetSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Items(
        X.Panel()
            .Border(false)
            .Items(X.Label()),
        X.GridPanel()
            .ID("DocRegister_HeaderGrid")
            .BottomBar(X.PagingToolbar())
            .Listeners(l=>l.Select.Handler="CheckDocStatus()")
            .DockedItems(
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                            .Text("جدید")
                            .Icon(Ext.Net.Icon.Add)
                            .Listeners(l => l.Click.Handler = "NewDocRegister();"),
                        X.Button()
                            .Text("ویرایش")
                            .Icon(Ext.Net.Icon.Pencil)
                            .ItemID("btnEdit")
                            .Listeners(l => l.Click.Handler = "EditDocRegister();"),
                        X.Button()
                            .Text("حذف")
                            .Icon(Ext.Net.Icon.Delete)
                            .ItemID("btnDelete")                            
                            .Listeners(l => l.Click.Handler = "DeleteDocRegister();"),                        
                        X.SplitButton()
                            .Text("چاپ سند")
                            .Icon(Ext.Net.Icon.Printer)
                            .ItemID("btnPrint")            
                            .Menu(
                                X.Menu()
                                    .Items(
                                        X.MenuItem()
                                            .Text("افقی")
                                            .Icon(Ext.Net.Icon.PageLandscape)
                                            .Listeners(l => l.Click.Handler = "PrintDocRegister(1)"),
                                        X.MenuItem()
                                            .Text("عمودی")
                                            .Icon(Ext.Net.Icon.PagePortrait)
                                            .Listeners(l => l.Click.Handler = "PrintDocRegister(2)")                                        
                                    )
                            ),
                        X.Button()
                            .Text("چاپ گروهی اسناد")
                            .Icon(Ext.Net.Icon.Printer)
                            .ItemID("btnPrint_Group")
                            .Listeners(l => l.Click.Handler = "PrintDocRegister_Group();"),                        
                        X.Button()
                            .Text("مرتب سازی اسناد")
                            .Icon(Ext.Net.Icon.TableSort)
                            .Listeners(l => l.Click.Handler = "SortDocs();"),
                        X.Button()
                            .Text("کپی سند")
                            .Icon(Ext.Net.Icon.PageCopy)
                            .Listeners(l => l.Click.Handler = "CopyDoc();"),
                        X.Button()
                            .Text("قطعی کردن سند")
                            .Icon(Ext.Net.Icon.LockAdd)
                            .ItemID("btnGhati")
                            .Listeners(l => l.Click.Handler = "SaveGhati();"),
                        X.Button()
                            .Text("بازگشت از حالت قطعی")
                            .Icon(Ext.Net.Icon.LockAdd)
                            .ItemID("btnNotGhati")
                            .Listeners(l => l.Click.Handler = "DisableGhati();")
                    ),
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                            .ItemID("mag")
                            .Text("فیلتر")
                            .EnableToggle(true)
                            .Icon(Ext.Net.Icon.Magnifier)
                            .Listeners(l => l.Click.Handler = "OpenWinSearch();"),                    
                        X.Button()
                            .Text("ارسال به خزانه داری")
                            .Icon(Ext.Net.Icon.ArrowUp)
                            .ItemID("btnSend")
                            .Hidden(!servic.Permission(1222, Convert.ToInt32(Session["OrganId"]), Session["Username"].ToString(), Session["Password"].ToString(), out Err))
                            .Listeners(l => l.Click.Handler = "SendToKhazanedari();"),
                        X.Button()
                            .Text("بازگشت به ماژول مرجع")
                            .Icon(Ext.Net.Icon.ArrowUndo)
                            .ItemID("btnBack")
                            .Listeners(l => l.Click.Handler = "BackToMainModule();"),
                        X.Button()
                            .Text("نمای کلی")
                            .Icon(Ext.Net.Icon.ApplicationViewList)
                            .Listeners(l => l.Click.Handler = "GotoGeneralView();"),
                        X.Button()
                            .Text("بایگانی دیجیتال")
                            .Icon(Ext.Net.Icon.FolderBookmark)
                            .ItemID("btnArchive")                            
                            .Listeners(l => l.Click.Handler = "AccountingArchive();")
                    )
            )
            .Store(
                X.StoreForModel()
                    .Listeners(l => {
                        l.DataChanged.Handler = "App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.refresh();";
                        l.Load.Handler = "enableAllButtons()";
                    })
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                        .ExtraParams(l => l.Add(new { Year = @ViewBag.Year }))
                    )
                    .PageSize(20)
                    .RemoteFilter(true)
                    .RemotePaging(true)
            )
            .ViewConfig(
                X.GridView()
                    .GetRowClass(l => l.Fn = "SetColorRow")
                    .LoadingText("در حال بارگذاری...").RTL(true)
            )
            .Plugins(X.FilterHeader().Remote(true))
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex(Model, m => m.fldType).Filterable(false).Text(" ").Renderer("EditOrNot").Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldIsArchive).Filterable(false).Text(" ").Renderer("AttachOrNot").Flex(1),                
                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldDocumentNum).Text("شماره سند").Flex(2).Renderer("if(value==0){return ''}return value;"),
                Html.X().Column().DataIndex(Model, m => m.fldAtfNum).Text("شماره عطف").Flex(2).Renderer("if(value==0){return ''}return value;"),
                Html.X().Column().DataIndex(Model, m => m.ShomareRoozane).Text("شماره روزانه").Flex(2).Renderer("if(value==0){return ''}return value;"),
                Html.X().Column().DataIndex(Model, m => m.fldArchiveNum).Text("شماره بایگانی").Flex(2),
                Html.X().Column().DataIndex(Model, m => m.fldShomareFaree).Text("شماره فرعی").Flex(2).Renderer("if(value==0){return ''}return value;"),
                Html.X().Column().DataIndex(Model, m => m.fldNameModule).Text("ماژول مرجع").Flex(2).Wrap(true),
                Html.X().Column().DataIndex(Model, m => m.fldMainDocNum).Text("شماره سند در ماژول مرجع").Flex(3).Wrap(true).Renderer("LinktoMain"),
                Html.X().Column().DataIndex(Model, m => m.fldTypeSanadName).Text("نوع سند").Wrap(true).Renderer("showRelatedDoc").Flex(2),
                Html.X().Column().DataIndex(Model, m => m.fldTypeName).Text("وضعیت سند").Flex(2).Wrap(true),                
                Html.X().Column().DataIndex(Model, m => m.fldTarikhDocument).Text("تاریخ سند").Flex(3),
                Html.X().Column().DataIndex(Model, m => m.fldDescriptionDocu).Text("شرح سند").Flex(10).Wrap(true)                
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
            )
        )
)
<script type="text/javascript">
    function CopyDoc() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا جهت کپی سند موردنظر مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        Ext.net.DirectMethod.request({
                            url: '/Accounting/DocRegistration/CopyDocument',
                            params: {
                                DocHeaderId: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });

        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function DocRegister_HeaderSetSize() {
        App.DocRegister_Header.setWidth(App.AccountingWin.getWidth());
        App.DocRegister_Header.queryById('DocRegister_HeaderGrid').setHeight(App.AccountingWin.getHeight() - 170);
    }
    function OpenWinSearch() {
        var mag = App.DocRegister_Header.queryById('mag');
        if (mag.pressed) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Accounting/SimpleSearch/IndexWin',
                params: {
                    Year: '@ViewBag.Year',
                    FiscalYearId: '@ViewBag.FiscalYearId'
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
        else
            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
    }

    function GotoShowDocument(fldId, fldModuleErsalId) {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/Document',
            params: {
                DocHeaderId: fldId,
                Year: '@ViewBag.Year',
                ModuleId: fldModuleErsalId
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function enableAllButtons() {
        App.DocRegister_Header.queryById('btnEdit').enable();
        App.DocRegister_Header.queryById('btnDelete').enable();
        App.DocRegister_Header.queryById('btnGhati').enable();
        App.DocRegister_Header.queryById('btnArchive').enable();
        App.DocRegister_Header.queryById('btnBack').enable();
        App.DocRegister_Header.queryById('btnPrint').enable();
        App.DocRegister_Header.queryById('btnNotGhati').enable();
    }

    function CheckDocStatus() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow.data.fldAccept == true) {
            App.DocRegister_Header.queryById('btnNotGhati').enable();
        }
        else {
            App.DocRegister_Header.queryById('btnNotGhati').disable();
        }
        if (SelectedRow.data.fldModuleErsalId != 4) {
            /*App.DocRegister_Header.queryById('btnSend').disable();*/
            /*App.DocRegister_Header.queryById('btnEdit').disable();*/
            App.DocRegister_Header.queryById('btnDelete').disable();
            App.DocRegister_Header.queryById('btnGhati').enable();
            App.DocRegister_Header.queryById('btnArchive').disable();
            App.DocRegister_Header.queryById('btnEdit').enable();
            Ext.net.DirectMethod.request({
                url: '/Khazanedari/RegisterDocs/CheckStatus',
                params: {
                    DocId: SelectedRow.data.fldPId,
                    ModuleId: 4,
                    Year: '@ViewBag.Year',
                    fldPid: 0
                },
                success: function (data) {
                    if (data.Status == false && SelectedRow.data.fldId == data.Id) {/*سند اصلاحیه ثبت نشده*/
                        App.DocRegister_Header.queryById('btnBack').enable();
                        App.DocRegister_Header.queryById('btnGhati').enable();
                    }
                    else {
                        App.DocRegister_Header.queryById('btnBack').disable();
                        App.DocRegister_Header.queryById('btnGhati').disable();
                    }
                }
            });
        }
        else {
            App.DocRegister_Header.queryById('btnBack').disable();
            if ((SelectedRow.data.fldTypeSanad == 1 && '@ViewBag.HaveEkhtetamiye' != 0) || SelectedRow.data.fldTypeSanad == 4 || SelectedRow.data.fldTypeSanad == 5) {
                App.DocRegister_Header.queryById('btnEdit').disable();
            }
            else {
                App.DocRegister_Header.queryById('btnEdit').enable();
            }
            App.DocRegister_Header.queryById('btnDelete').enable();
            if (SelectedRow.data.fldType == 2) {
                App.DocRegister_Header.queryById('btnPrint').disable();
                App.DocRegister_Header.queryById('btnGhati').disable();
                App.DocRegister_Header.queryById('btnArchive').disable();
                /*App.DocRegister_Header.queryById('btnSend').disable();*/
            }
            else {
                /*if (SelectedRow.data.fldTypeSanad == 1 || SelectedRow.data.fldTypeSanad == 4)
                    App.DocRegister_Header.queryById('btnSend').disable();
                else
                    App.DocRegister_Header.queryById('btnSend').enable();*/
                App.DocRegister_Header.queryById('btnPrint').enable();
                App.DocRegister_Header.queryById('btnGhati').enable();
                App.DocRegister_Header.queryById('btnArchive').enable();

            }
        }
    }

    function SortDocs() {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا جهت مرتب سازی اسناد مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                    Ext.net.DirectMethod.request({
                        url: '/Accounting/DocRegistration/SortDocs',
                        params: {
                            Year: '@ViewBag.Year',
                            ModuleId: 4
                        },
                        success: function (data) {
                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                            var ic = Ext.MessageBox.INFO;
                            if (data.Er == 1)
                                ic = Ext.MessageBox.ERROR;
                            Ext.MessageBox.show({
                                title: data.MsgTitle,
                                msg: data.Msg,
                                icon: ic,
                                buttons: Ext.MessageBox.OK
                            });
                            Ext.net.Mask.hide();
                        }
                    });
                }
            }
        });
    }

    function PrintDocRegister(Type) {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldType != 2) {
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/Accounting/DocRegistration/PrintDocument',
                    params: {
                        DocHeaderId: SelectedRow.data.fldId,
                        ModuleId: 4,
                        Type: Type,
                        Year: '@ViewBag.Year'
                    },
                    success: function (data) {
                        Ext.net.Mask.hide();
                    }
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function PrintDocRegister_Group() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/PrintDocument_Group',
            params: {
                containerId: "FirstTabAccounting",
                Year: '@ViewBag.Year',
                ModuleId: 4
            },
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }

    function GotoGeneralView() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/GeneralView',
            params: {
                Year: '@ViewBag.Year',
                ModuleId: 4
            },
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }

    function DeleteDocRegister() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                if (SelectedRow.data.fldModuleErsalId == 4) {
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا برای حذف مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/DeleteHeader',
                                    params: {
                                        Id: SelectedRow.data.fldId,
                                        Year: SelectedRow.data.fldYear,
                                        ModuleId: 4
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        if (data.Er != 1) {
                                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                        }
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان حذف برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده ثبت قطعی شده است و امکان حذف آن وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DisableGhati() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == true) {
                if (SelectedRow.data.fldType == 1) {
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا جهت بازگشت از وضعیت قطعی مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/DisableGhati',
                                    params: {
                                        HeaderId: SelectedRow.data.fldId,
                                        FiscalYearId: '@ViewBag.FiscalYearId',
                                        TypeSanadId: SelectedRow.data.fldTypeSanad
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        if (data.Er != 1) {
                                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                        }
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    });
                }
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveGhati() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                if (SelectedRow.data.fldType == 1) {
                    /*if (SelectedRow.data.fldModuleErsalId == 4) {*/
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا جهت قطعی کردن سند مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/SaveGhati',
                                    params: {
                                        HeaderId: SelectedRow.data.fldId,
                                        FiscalYearId: '@ViewBag.FiscalYearId',
                                        Year: '@ViewBag.Year'
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        if (data.Er != 1) {
                                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                        }
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    });
                    /*}
                    else {
                        Ext.MessageBox.show({
                            title: "خطا",
                            msg: "امکان قطعی کردن برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }*/
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان قطعی کردن برای یادداشت وجود ندارد",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده قبلا قطعی شده است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SendToKhazanedari() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldModuleErsalId == 4) {
                if (SelectedRow.data.fldTypeSanad != 1 && SelectedRow.data.fldTypeSanad != 4) {
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا جهت ارسال سند مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                if ('@ViewBag.Flag' == 1) {
                                    Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                    Ext.net.DirectMethod.request({
                                        url: '/Khazanedari/RegisterDocs/SendToModule',
                                        params: {
                                            DocId: SelectedRow.data.fldId,
                                            fldModuleErsalId: 4,
                                            fldModuleSaveId: 10,
                                            DocDate: ""
                                        },
                                        success: function (data) {
                                            var ic = Ext.MessageBox.INFO;
                                            if (data.Er == 1)
                                                ic = Ext.MessageBox.ERROR;
                                            Ext.MessageBox.show({
                                                title: data.MsgTitle,
                                                msg: data.Msg,
                                                icon: ic,
                                                buttons: Ext.MessageBox.OK
                                            });
                                            App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                            if (App.DocRegister_HeaderKhazane != undefined)
                                                App.DocRegister_HeaderKhazane.queryById('DocRegister_HeaderKhazaneGrid').store.load();
                                            Ext.net.Mask.hide();
                                        }
                                    });
                                }
                                else {
                                    Ext.net.Mask.show({ msg: 'در حال بارگزاری...' });
                                    Ext.net.DirectMethod.request({
                                        url: '/Accounting/DocRegistration/DocDate',
                                        params: {
                                            DocId: SelectedRow.data.fldId,
                                            fldModuleErsalId: 4,
                                            fldModuleSaveId: 10,
                                            State: 1,
                                            Year:'@ViewBag.Year'
                                        },
                                        success: function () {
                                            Ext.net.Mask.hide();
                                        }
                                    });
                                }
                            }
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان ارسال اسناد افتتاحیه و اختتامیه وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده از نوع حسابداری نبوده و امکان ارسال ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function BackToMainModule() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldAccept == false) {
                Ext.MessageBox.show({
                    title: "هشدار",
                    msg: "آیا جهت بازگشت سند مطمئن هستید؟",
                    icon: Ext.MessageBox.WARNING,
                    buttons: Ext.MessageBox.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            if ('@ViewBag.Flag' == 1) {
                                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/BackToKhazanedari',
                                    params: {
                                        DocId: SelectedRow.data.fldId,
                                        fldModuleErsalId: SelectedRow.data.fldModuleErsalId,
                                        fldModuleSaveId: 4,
                                        DocDate: ""
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        App.DocRegister_Header.queryById('DocRegister_HeaderGrid').store.load();
                                        if (App.DocRegister_HeaderKhazane != undefined)
                                            App.DocRegister_HeaderKhazane.queryById('DocRegister_HeaderKhazaneGrid').store.load();
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                            else {
                                Ext.net.Mask.show({ msg: 'در حال بارگزاری...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Accounting/DocRegistration/DocDate',
                                    params: {
                                        DocId: SelectedRow.data.fldId,
                                        fldModuleErsalId: SelectedRow.data.fldModuleErsalId,
                                        fldModuleSaveId: 4,
                                        State: 2,
                                        Year: '@ViewBag.Year'
                                    },
                                    success: function () {
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    }
                });
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "سند انتخاب شده ثبت قطعی شده است و امکان بازگشت آن وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    var SetColorRow = function (record, rowIndex, rowParams, store) {
        if (record.data.fldModuleErsalId != 4) {
            return "Coloring";
        }
    };

    function EditDocRegister() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldTypeSanad != 1 || (SelectedRow.data.fldTypeSanad == 1 && '@ViewBag.HaveEkhtetamiye' == 0)) {
                if (SelectedRow.data.fldAccept == false) {
                    if (SelectedRow.data.fldModuleErsalId == 4) {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Accounting/DocRegistration/New',
                            params: {
                                HeaderId: SelectedRow.data.fldId,
                                FiscalYearId: '@ViewBag.FiscalYearId',
                                Year: '@ViewBag.Year'
                            },
                            success: function () {
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                    else {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Accounting/DocRegistration/SpecificEdit',
                            params: {
                                HeaderId: SelectedRow.data.fldId,
                                ModuleId: 4,
                                Year: '@ViewBag.Year'
                            },
                            success: function () {
                                Ext.net.Mask.hide();
                            }
                        });
                        /*Ext.MessageBox.show({
                            title: "خطا",
                            msg: "امکان ویرایش برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });*/
                    }
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "سند انتخاب شده ثبت قطعی شده است و امکان ویرایش آن وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "امکان ویرایش سند افتتاحیه اتوماتیک وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function NewDocRegister() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Accounting/DocRegistration/New',
            params: {
                HeaderId: 0,
                FiscalYearId: '@ViewBag.FiscalYearId',
                Year: '@ViewBag.Year'
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function AccountingArchive() {
        var SelectedRow = App.DocRegister_Header.queryById('DocRegister_HeaderGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldType == 1) {
                if (SelectedRow.data.fldModuleErsalId == 4) {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Accounting/DocRegistration/Archive',
                        params: {
                            HeaderId: SelectedRow.data.fldId
                        },
                        success: function () {
                            Ext.net.Mask.hide();
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "امکان ثبت فایل برای اسناد دریافتی از دیگر ماژولها وجود ندارد.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "امکان ثبت فایل برای یادداشت وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
</script>