@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Panel()
    .Closable(true)
    .AutoScroll(true)
    .Border(false)
    .Title("گزارش مانده مغایرت")
    .CloseAction(CloseAction.Destroy)
    .Listeners(li => { li.AfterRender.Handler = "setSizePnlRptMoghayeratRemain()"; li.Render.Fn = "addKeyMapRptMoghayeratRemain"; })
    .Layout(LayoutType.Fit)
    .ID("RptMoghayeratRemain")
    .Items(
        X.Panel()
            .Border(false)
            .Items(
                X.Panel()
                    .AutoScroll(true)
                    .Border(false)
                    .ButtonAlign(Alignment.Center)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Buttons(
                        Html.X().Button()
                            .Text("چاپ")
                            .Icon(Ext.Net.Icon.Printer)
                            .Listeners(l => l.Click.Handler = "PrintRptMoghayeratRemain()"),
                        Html.X().Button()
                            .Text("خروج")
                            .Icon(Ext.Net.Icon.DoorOut)
                            .Listeners(l => l.Click.Handler = "App.RptMoghayeratRemain.destroy();")
                    )
                    .Items(         
                        X.FieldSet()
                            .Border(false)
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 4 })                      
                            .Defaults(new { Margin = 2 })
                                .Items(
                                    X.Label("از تاریخ:"),
                                    X.PDateField()
                                        .ItemID("txtAzTarikh")
                                        .Listeners(l =>
                                        {
                                            l.Change.Handler = "setDateTaTarikhMoghayeratRemain()";
                                            l.AfterRender.Handler = "setMinValueFiscalYear()";
                                        })
                                        .AllowBlank(false)
                                        .AutoFocus(true)
                                        .BlankText("لطفا تاریخ را وارد کنید.")
                                        .Editable(true)
                                        .MaskRe("/[0-9/]/")
                                        .MaxLength(10)
                                        .MinLength(10)
                                        .EnforceMaxLength(true),
                                    X.Label("تا تاریخ:"),
                                    X.PDateField()
                                        .ItemID("txtTaTarikh")
                                        .Listeners(l =>
                                        {
                                            l.Change.Handler = "setDateAzTarikhMoghayeratRemain()";
                                            l.AfterRender.Handler = "setMaxValueFiscalYear()";
                                        })
                                        .AllowBlank(false)
                                        .BlankText("لطفا تاریخ را وارد کنید.")
                                        .Editable(true)
                                        .MaskRe("/[0-9/]/")
                                        .MaxLength(10)
                                        .MinLength(10)
                                        .EnforceMaxLength(true)
                                )
                            ),
                        Html.X().Panel()
                            .Border(true)
                            .Listeners(L => L.AfterRender.Handler = "setSizePnlRptMoghayeratRemain2()")
                            .AutoScroll(true)
                            .ItemID("RptPanel2")
            )
    )
)

<script type="text/javascript">

    function setDateTaTarikhMoghayeratRemain() {
        var txtAzTarikh = App.RptMoghayeratRemain.queryById('txtAzTarikh');
        var txtTaTarikh = App.RptMoghayeratRemain.queryById('txtTaTarikh');
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "فیلد از تاریخ نباید بعد از فیلد تا تاریخ باشد.";
    }

    function setDateAzTarikhMoghayeratRemain() {
        var txtAzTarikh = App.RptMoghayeratRemain.queryById('txtAzTarikh');
        var txtTaTarikh = App.RptMoghayeratRemain.queryById('txtTaTarikh');
        txtTaTarikh.setMinValue(txtAzTarikh.getValue());
        txtAzTarikh.minText = "فیلد از تاریخ نباید بعد از فیلد تا تاریخ باشد.";
    }

    function setMinValueFiscalYear() {
        var txtAzTarikh = App.RptMoghayeratRemain.queryById('txtAzTarikh');
        txtAzTarikh.setMinValue(new Date('@ViewBag.MinDate'));
        txtAzTarikh.setMaxValue(new Date('@ViewBag.MaxDate'));
        txtAzTarikh.minText = "فیلد از تاریخ باید در محدوده سال مالی باشد.";
        txtAzTarikh.maxText = "فیلد از تاریخ باید در محدوده سال مالی باشد.";
    }

    function setMaxValueFiscalYear() {
        var txtTaTarikh = App.RptMoghayeratRemain.queryById('txtTaTarikh');
        txtTaTarikh.setMaxValue(new Date('@ViewBag.MaxDate'));
        txtTaTarikh.setMinValue(new Date('@ViewBag.MinDate'));
        txtTaTarikh.maxText = "فیلد تا تاریخ باید در محدوده سال مالی باشد.";
        txtTaTarikh.minText = "فیلد تا تاریخ باید در محدوده سال مالی باشد.";
    }

    function setSizePnlRptMoghayeratRemain2() {
        App.RptMoghayeratRemain.queryById('RptPanel2').setSize(App.AccountingWin.getWidth() - 20, App.AccountingWin.getHeight() - 240);
    }

    function setSizePnlRptMoghayeratRemain() {
        App.RptMoghayeratRemain.setSize(App.AccountingWin.getWidth() - 20, App.AccountingWin.getHeight() - 170);
    }

    function PrintRptMoghayeratRemain() {
        var txtTaTarikh = App.RptMoghayeratRemain.queryById('txtTaTarikh');
        var txtAzTarikh = App.RptMoghayeratRemain.queryById('txtAzTarikh');
        var height = App.AccountingWin.getHeight() - 245;

        if (txtAzTarikh.validate() && txtTaTarikh.validate()) {
            App.RptMoghayeratRemain.queryById('RptPanel2').update("<center><object class='se-pre-con' style='width:100%;height:" + height +
                "px;border: 1px solid #ccc;' type='application/pdf' data='/Accounting/RptCodingStatus/PdfRptMoghayerat?FiscalYearId=" + '@ViewBag.FiscalYearId'
                 + "&TaTarikh=" + txtTaTarikh.getRawValue() + "&Year=" + '@ViewBag.Year' + "&AzTarikh=" + txtAzTarikh.getRawValue() + "'></object></center>");
        }
    }

    var addKeyMapRptMoghayeratRemain = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.RptMoghayeratRemain.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;

                    if (keyfield.itemId == "txtTaTarikh") {
                        PrintRptMoghayeratRemain();
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                        nextfld.focus();
                    }
                }
            }]
        });
    };
</script>

