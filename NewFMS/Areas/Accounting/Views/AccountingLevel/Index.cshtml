@model IEnumerable<NewFMS.WCF_Accounting.OBJ_AccountingLevel>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using NewFMS.WCF_AnbarAmval

@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Panel()
    .ID("AccountingLevel")
    .Title("تعریف سطوح حسابداری")
    .Closable(true)
    .Listeners(li => li.AfterRender.Handler = "AccountingLevelSetSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Items(
        X.Panel()
            .Border(false)
            .Items(X.Label()),
        X.Panel()
            .Border(false)
            .Items(
                X.Panel()
                    .Border(false)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Items(
                        X.FieldSet()
                            //.Title("مشخصات سطوح")
                            //.Height(50)
                            .Border(false)
                            .Defaults(new { Margin = 2 })
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                        .Items(
                            X.Hidden()
                                .ItemID("fldId"),
                            X.Label("ســـال:"),
                            X.ComboBox()
                                .ItemID("CboYear")
                                .AutoFocus(true)
                                .DisplayField("fldYear")
                                .ValueField("fldId")
                                .TypeAhead(true)
                                .Editable(true)
                                .AllowBlank(false)
                                .BlankText("لطفا سال را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .ForceSelection(true)
                                .TriggerAction(TriggerAction.All)
                                .Listeners(l => l.Change.Handler = "LoadGridAccountingLevel()")
                                .Store(X.Store()
                                    .Listeners(l => l.Load.Handler = "setDefaultYearAccountingLevel()")
                                    .Model(X.Model()
                                        .IDProperty("fldId")
                                        .Fields(
                                            new ModelField("fldYear", ModelFieldType.String) { Mapping = "fldYear" },
                                            new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" }
                                        )
                                    )
                                    .Proxy(X.AjaxProxy()
                                        .Url(Url.Action("GetSal"))
                                        .Reader(X.JsonReader().Root("data"))
                                    )
                                )//,
                        //X.Label("تعداد سطح:"),
                        //X.TextField()
                        //    .ItemID("txtLevelCount")
                        //    .MaskRe("[0-9]")
                        //    .AllowBlank(false)
                        //    .BlankText("لطفا تعداد سطح را وارد کنید.")
                        //    .Listeners(l=>l.Blur.Handler="CheckCount()"),
                        //X.Button()
                        //    .Text("بارگذاری")
                        //    .Icon(Icon.ArrowDown)
                        //    .Listeners(l => l.Click.Handler = "LoadGridAccountingLevel()")
                        )
                    )
        ),
        X.GridPanel()
            .ItemID("AccountingLevelGrid")
            .BottomBar(X.PagingToolbar())
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("افزودن سطر جدید")
                            .Icon(Ext.Net.Icon.BulletPlus)
                            .Listeners(l => l.Click.Handler = "AddAccountingLevel();"),
                        Html.X().Button()
                            .Text("ذخیره")
                            .Icon(Ext.Net.Icon.Disk)
                            .Listeners(l => l.Click.Handler = "SaveAccountingLevel();")
                    )
            )
            .Store(
                X.StoreForModel()
                    .AutoLoad(false)
                    .Listeners(l => l.DataChanged.Handler = "App.AccountingLevel.queryById('AccountingLevelGrid').selModel.refresh();")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .PageSize(20)
                    .RemoteFilter(false)
                    .RemotePaging(false)
                )
            .View(
                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                )
            .Plugins(X.FilterHeader().Remote(false))
            .Plugins(Html.X().CellEditing().ClicksToEdit(1).Listeners(l => l.Edit.Fn = "nextcellRow"))
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldName).Text("عنوان سطح").Flex(9),
                Html.X().Column().DataIndex(Model, m => m.fldArghamNum).Text("تعداد ارقام").Flex(4).Editor(Html.X().TextField()
                    .ItemID("txtCount").AutoFocus(true).MaskRe("[0-9]").EnableKeyEvents(true).Listeners(l =>
                    {
                        l.SpecialKey.Handler = "checkhintkey(e.getKey())";
                    })),
                Html.X().ComponentColumn().ID("ColDel").Listeners(l=>l.Bind.Fn="CheckDisable").Flex(1).ItemID("CmpDel").Component(Html.X().Button().Icon(Icon.Delete).Text("حذف")
                    .Listeners(l => l.Click.Handler = "DeleteLevel();")).Filterable(false)
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
            )
    )
)
<script type="text/javascript">
    var HintEnter = 0;
    function setDefaultYearAccountingLevel() {
        App.AccountingLevel.queryById('CboYear').setValue(App.AccountingLevel.queryById('CboYear').store.getAt(App.AccountingLevel.queryById('CboYear').store.count() - 1));
    }

    /*function CheckCount() {
        if (parseInt(App.AccountingLevel.queryById('txtLevelCount').getValue()) < 3 || parseInt(App.AccountingLevel.queryById('txtLevelCount').getValue()) > 2147483647) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "تعداد وارد شده غیرمجاز است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK,
                closable: false,
                fn: function (btn) {
                    if (btn == "ok") {
                        App.AccountingLevel.queryById('txtLevelCount').setValue("");
                        App.AccountingLevel.queryById('txtLevelCount').focus();
                    }
                }
            });
        }
    }*/

    function checkhintkey(e) {
        if (e == 13) {
            HintEnter = 1;
        }
    };

    var nextcellRow = function (a, b) {
        vv = b.rowIdx;
        if (b.field == "fldArghamNum") {
            if (parseInt(b.value) > 2147483647 || parseInt(b.value) <= 0) {
                b.record.set("fldArghamNum", 1);
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "مقدار وارد شده غیرمجاز است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK,
                    closable: false,
                    fn: function (btn) {
                        if (btn == "ok") {
                            App.AccountingLevel.queryById("AccountingLevelGrid").editingPlugin.startEdit(b.rowIdx, 2);
                            a.getEditor(b.row, b.column).field.selectText();
                        }
                    }
                });
            }
            else {
                if (HintEnter == 1) {
                    HintEnter = 0;
                    App.AccountingLevel.queryById("AccountingLevelGrid").editingPlugin.startEdit(b.rowIdx + 1, 2);
                    a.getEditor(b.row, b.column).field.selectText();
                }
            }
        }
    };

    var CheckDisable = function (ComponentColumn, button, record, index) {
        if (index == 0 || index == 1 || index == 2) {
            ComponentColumn.getComponent(index).hide();
        }       
        else if (index == App.AccountingLevel.queryById('AccountingLevelGrid').getStore().count() - 1) {
            ComponentColumn.getComponent(index).enable();
        }
        else {
            ComponentColumn.getComponent(index).disable();
        }
    };

    function DeleteLevel() {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا برای حذف مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    var record = App.ColDel.activeRecord.record;
                    if (record.data.fldId == 0) {
                        App.AccountingLevel.queryById("AccountingLevelGrid").store.remove(record);
                    }
                    else {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        Ext.net.DirectMethod.request({
                            url: '/Accounting/AccountingLevel/Delete',
                            params: {
                                Id: record.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                if (data.Er != 1) {
                                    LoadGridAccountingLevel();
                                }
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            }
        });
    }

    function AccountingLevelSetSize() {
        App.AccountingLevel.setWidth(App.AccountingWin.getWidth());
        App.AccountingLevel.queryById('AccountingLevelGrid').setHeight(App.AccountingWin.getHeight() - 209);
    }

    function LoadGridAccountingLevel() {
        App.AccountingLevel.queryById('AccountingLevelGrid').getStore().getProxy().setExtraParam("Year", App.AccountingLevel.queryById('CboYear').getDisplayValue());
        App.AccountingLevel.queryById('AccountingLevelGrid').getStore().load();
    }

    function AddAccountingLevel() {
        var store = App.AccountingLevel.queryById('AccountingLevelGrid').getStore();
        var index = store.count();
        var LastRec = store.data.items[index - 1].data.fldName;
        var No = parseInt(LastRec.substr(LastRec.search(' ') + 1));
        if (isNaN(No)) {
            App.AccountingLevel.queryById('AccountingLevelGrid').store.insert(index, {
                fldId: 0,
                fldName: "تفصیلی 1",
                fldArghamNum: 1
            });
            App.AccountingLevel.queryById('AccountingLevelGrid').getView().refresh();
        }
        else {
            App.AccountingLevel.queryById('AccountingLevelGrid').store.insert(index, {
                fldId: 0,
                fldName: "تفصیلی " + parseInt(No + 1),
                fldArghamNum: 1
            });
            App.AccountingLevel.queryById('AccountingLevelGrid').getView().refresh();
        }        
    }

    function SaveAccountingLevel() {
        var Grid=App.AccountingLevel.queryById('AccountingLevelGrid');
        var CboYear = App.AccountingLevel.queryById('CboYear');
        var AccountLevelArray = new Array();
        var er = false;

        if (CboYear.validate() == false) {
            er = true;
        }        
        if (er == true)
            return;

        for (var i = 0; i < Grid.getStore().count() ; i++) {
            if (Grid.store.data.items[i].data.fldArghamNum == 0) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "تعداد ارقام نمی تواند صفر باشد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }
            else {
                AccountLevelArray.push({
                    fldId: Grid.store.data.items[i].data.fldId,
                    fldName: Grid.store.data.items[i].data.fldName,
                    fldArghamNum: Grid.store.data.items[i].data.fldArghamNum
                });
            }
        }
        var data = {
            Year: CboYear.getDisplayValue(),
            AccountLevelArray: AccountLevelArray
        };

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/Accounting/AccountingLevel/Save',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (result) {
                var ic = Ext.MessageBox.INFO;
                if (result.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: result.MsgTitle,
                    msg: result.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
                if (result.Er != 1) {
                    Grid.store.load();
                }
            },
            failure: function () {
                Ext.net.Mask.hide();
            }
        });
    }
    /*function HelpStorageGroup() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/AnbarAmval/StorageGroup/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }*/
</script>