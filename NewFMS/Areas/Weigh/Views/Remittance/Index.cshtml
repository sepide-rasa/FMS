@model IEnumerable<NewFMS.WCF_Weigh.OBJ_Remittance_Header>
    @using Ext.Net.MVC
    @using Hogaf.ExtNet.UX
    @using Ext.Net

    @{
        var X = Html.X();
    }

    <script>
        var EditOrNot = function (value, record) {
            if (value == 1 && record.record.data.fldAccept == 1) {
                var template = "<img src='/Content/icon/Weigh/mini/قفل بسته.png' title='غیرقابل ویرایش' style='width:17px;height:17px;' />";
                return template;
            }
            else {
                var template = "<img src='/Content/icons/Weigh/mini/قفل باز.png' title='قابل ویرایش' style='width:17px;height:17px;' />";
                return template;
            }
        }
    </script>

    @(Html.X().Panel()
    .ID("Remittance_Header")
    .Title("ثبت حواله")
    .Closable(true)
    .Listeners(li => li.AfterRender.Handler = "Remittance_HeaderSetSize();")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Items(
        X.Panel()
            .Border(false)
            .Items(X.Label()),
        X.GridPanel()
            .ItemID("Remittance_HeaderGrid")
            .BottomBar(X.PagingToolbar())
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                            .Text("ثبت حواله")
                            .Icon(Ext.Net.Icon.Add)
                            .Listeners(l => l.Click.Handler = "NewRemittance();"),
                        X.Button()
                            .Text("ویرایش")
                            .Icon(Ext.Net.Icon.Pencil)
                            .Listeners(l => l.Click.Handler = "EditRemittance();"),
                        X.Button()
                            .Text("حذف")
                            .Icon(Ext.Net.Icon.Delete)
                            .Listeners(l => l.Click.Handler = "DeleteRemittance();")
                        ,X.Button()
                            .Text("جزئیات حواله")
                            .Icon(Ext.Net.Icon.Information)
                            .Listeners(l => l.Click.Handler = "DetailRemittance();")
                    )
            )
            .Store(
                X.StoreForModel()
                    .Listeners(l => l.DataChanged.Handler = "App.Remittance_Header.queryById('Remittance_HeaderGrid').selModel.refresh();")
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                    )
                    .PageSize(20)
                    .RemoteFilter(true)
                    .RemotePaging(true)
            )
            .View(
                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
            )
            .Plugins(X.FilterHeader().Remote(true))
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldAshkhasiId).Text("fldAshkhasiId").Hidden(true).Flex(3),
                        Html.X().Column().DataIndex(Model, m => m.fldNameNoeHavale).Text("نوع حواله").Wrap(true).Flex(2),
                
                        Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("عنوان پروژه").Wrap(true).Flex(3),
                        Html.X().Column().DataIndex(Model, m => m.fldFamilyName).Text("نام شخص").Wrap(true).Flex(3),
                        Html.X().Column().DataIndex(Model, m => m.fldNameChart).Text("واحد سازمانی").Wrap(true).Flex(3),
                        
                        Html.X().Column().DataIndex(Model, m => m.fldKalaName).Text("نام کالا").Wrap(true).Flex(5),
                                Html.X().Column().DataIndex(Model, m => m.fldNameTahvilGirande).Text("تحویل گیرنده").Wrap(true).Flex(3),
                        
                        
                        
                            
                        Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کد/شناسه ملی").Wrap(true).Flex(2),
                        Html.X().Column().DataIndex(Model, m => m.fldStartDate).Text("تاریخ شروع").Wrap(true).Flex(2),
                        Html.X().Column().DataIndex(Model, m => m.fldEndDate).Text("تاریخ پایان").Wrap(true).Flex(2),
                        Html.X().Column().DataIndex(Model, m => m.fldStatusName).Text("وضعیت").Wrap(true).Flex(2),
                Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(4).Wrap(true),
                        Html.X().ImageCommandColumn().Wrap(true)
                    .Listeners(l => l.Command.Fn = "GoToPrintHavale").PrepareCommand("hidFilebtn")
                    .Flex(2).Commands(
                            Html.X().ImageCommand().CommandName("PrintHavale").Icon(Ext.Net.Icon.Printer).ToolTip(tt => tt.Text = "چاپ"),
                        Html.X().ImageCommand().CommandName("DeleteFileHavale").Icon(Ext.Net.Icon.Delete).ToolTip(tt => tt.Text = "حذف فایل"),
                                
                        Html.X().ImageCommand().CommandName("DownloadFileHavale").Icon(Ext.Net.Icon.DiskDownload).ToolTip(tt => tt.Text = "دانلود فایل")
                                

                    )
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
            )
        )
    )
    <script type="text/javascript">
        var hidFilebtn = function (grid, command, record, row) {
            if (command.command == 'DeleteFileHavale' || command.command == 'DownloadFileHavale') {
                if (record.data.fldFileId == 0 ) {
                    command.disabled = true;
                    command.hideMode = 'visibility';
                }
                else{
                    command.disabled = false;
                    command.hideMode = 'visibility';
                }
            }
        };

        function GoToPrintHavale(grid, command, record, row) {
            if (command == 'PrintHavale') {
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/Weigh/Remittance/PrintHavale',
                    params: {
                        HeaderId: record.data.fldId,
                    },
                    success: function () {
                        Ext.net.Mask.hide();

                    }
                });
            }
            else if (command == 'DeleteFileHavale') {
                Ext.MessageBox.show({
                    title: "هشدار",
                    msg: "آیا جهت حذف فایل مطمئن هستید؟",
                    icon: Ext.MessageBox.WARNING,
                    buttons: Ext.MessageBox.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                            Ext.net.DirectMethod.request({
                                url: '/Weigh/Remittance/DeleteFileHavale',
                                params: {
                                    fldId: record.data.fldId,
                                },
                                success: function (data) {
                                    var ic = Ext.MessageBox.INFO;
                                    if (data.Er == 1)
                                        ic = Ext.MessageBox.ERROR;
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: ic,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    if (data.Er != 1) {
                                        App.Remittance_Header.queryById('Remittance_HeaderGrid').store.load();
                                    }
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                    }
                });
            }
            else {
                openWindowWithPost("/Weigh/Remittance/DownloadFileHavale", {
                    fldFileId: record.data.fldFileId
                });
            }
        }

        function openWindowWithPost(url, data) {
            var form = document.createElement("form");
            form.target = "_blank";
            form.method = "POST";
            form.action = url;
            form.style.display = "none";

            for (var key in data) {
                var input = document.createElement("input");
                input.type = "hidden";
                input.name = key;
                input.value = data[key];
                form.appendChild(input);
            }

            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }

        function Remittance_HeaderSetSize() {
            App.Remittance_Header.setWidth(App.TasisatWin.getWidth());
            App.Remittance_Header.queryById('Remittance_HeaderGrid').setHeight(App.TasisatWin.getHeight() - 170);
        }

        function DeleteRemittance() {
            var SelectedRow = App.Remittance_Header.queryById('Remittance_HeaderGrid').selModel.getLastSelected();
            if (SelectedRow != null) {
                    Ext.MessageBox.show({
                        title: "هشدار",
                        msg: "آیا برای حذف مطمئن هستید؟",
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.YESNO,
                        fn: function (btn) {
                            if (btn == 'yes') {
                                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                Ext.net.DirectMethod.request({
                                    url: '/Weigh/Remittance/DeleteHeader',
                                    params: {
                                        Id: SelectedRow.data.fldId
                                    },
                                    success: function (data) {
                                        var ic = Ext.MessageBox.INFO;
                                        if (data.Er == 1)
                                            ic = Ext.MessageBox.ERROR;
                                        Ext.MessageBox.show({
                                            title: data.MsgTitle,
                                            msg: data.Msg,
                                            icon: ic,
                                            buttons: Ext.MessageBox.OK
                                        });
                                        if (data.Er != 1) {
                                            App.Remittance_Header.queryById('Remittance_HeaderGrid').store.load();
                                        }
                                        Ext.net.Mask.hide();
                                    }
                                });
                            }
                        }
                    });

            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا یک سطر را انتخاب کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        function DetailRemittance() {
            var SelectedRow = App.Remittance_Header.queryById('Remittance_HeaderGrid').selModel.getLastSelected();
            if (SelectedRow != null) {
                var Url = '/Weigh/Remittance/InfoRemittance';
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: Url,
                    params: {
                        HeaderId: SelectedRow.data.fldId
                    },
                    success: function () {
                        Ext.net.Mask.hide();
                    }
                });

            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا یک سطر را انتخاب کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        function EditRemittance() {
            var SelectedRow = App.Remittance_Header.queryById('Remittance_HeaderGrid').selModel.getLastSelected();
            if (SelectedRow != null) {
                    var Url = '/Weigh/Remittance/New';
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: Url,
                        params: {
                            HeaderId: SelectedRow.data.fldId
                        },
                        success: function () {
                            Ext.net.Mask.hide();
                        }
                    });

            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا یک سطر را انتخاب کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }

        function NewRemittance() {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Weigh/Remittance/New',
                params: {
                    HeaderId: 0
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }


    </script>
