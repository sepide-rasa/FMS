@model IEnumerable<NewFMS.WCF_Daramad.OBJ_ShomareHesabCodeDaramad>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}
@(Html.X().Window().Modal(true)
            .Width(700).Height(340)
            .Title("کد درآمد")
                        .ID("SearchCodeDaramad")
                        .Listeners(l=>l.Destroy.Handler="setFocustxtCode()")
            .Closable(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.Panel().Border(false)
                .Border(false)
                .AutoScroll(true)
                .Items(
                         X.GridPanel().AutoScroll(true).Height(330).Listeners(l => l.AfterRender.Handler = "Reload()")
                                        .ID("TreeDaramadSearch").Flex(2)
                                    .Store(
                                            X.StoreForModel().AutoLoad(false)
                                            .Proxy(Html.X().AjaxProxy()
                                                    .Url(Url.Action("ReadTreeDaramadSearch"))
                                            .Reader(Html.X().JsonReader().Root("data"))

                                        )
                                        .PageSize(200000000)
                                        .RemoteFilter(true)
                                            .RemotePaging(true)

                                    )
                                    .View(
                                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                                    )
                                             .Plugins(X.FilterHeader().Remote(true))
                                        .TopBar(X.Toolbar().Items(
                                                    X.Button().Text("انتخاب").Icon(Icon.ArrowRedo).Listeners(l => l.Click.Handler = "NextSearchCodeDaramad()")
                                        ))
                                        .ColumnModel(
                                        X.RowNumbererColumn(),
                                                        X.Column().Text("کد").DataIndex(Model, m => m.fldId).Wrap(true).Hidden(true).Flex(10),
                                                X.Column().Text("عنوان").DataIndex(Model, m => m.fldDaramadTitle).Wrap(true).Flex(10),
                                            X.Column().Text("کد درآمد").DataIndex(Model, m => m.fldDaramadCode).Wrap(true).Flex(3),
                                            X.Column().Text("واحد").DataIndex(Model, m => m.fldNameVahed).Wrap(true).Flex(2),
                                            X.CheckColumn().Text("ارزش افزوده").DataIndex(Model, m => m.fldMashmooleArzesheAfzoode)/*.Renderer("hidecheck")*/.Editable(false).StopSelection(false).Flex(2),
                                            X.CheckColumn().Text("کارمزد").DataIndex(Model, m => m.fldMashmooleKarmozd)/*.Renderer("hidecheck")*/.Editable(false).StopSelection(false).Flex(2)

                                        )
                                                .Listeners(a => a.CellDblClick.Handler = "NextSearchCodeDaramad();")
        //    .Root(Html.X().Node().NodeID("1").AttributesObject(new { fldDaramadCode = "", fldMashmooleArzesheAfzoode = false, fldMashmooleKarmozd = false,  fldNameVahed = "", fldDaramadTitle = "کدهای درآمد" }).Expanded(true))

            )
        )
)

<script type="text/javascript">
    var State = '@ViewBag.State';
    function setFocustxtCode() {
        if (State == 1) {
            App.SalesRules.queryById('txtCodeDaramad').focus();
        }
    }
    var hidecheck = function (value, metaData, record, rowIndex, colIndex, store) {
        if (record.data.id != 1)
            return Ext.ux.CheckColumn.prototype.renderer.apply(this, arguments);
    };

    var GetParamTreeDaramad = function (store, operation, eOpts) {
        var nodeId = operation.node.getId();
        operation.params.nod = nodeId;

    };
    function Reload() {
        var Organ = 0;
        if (State == 1) {

            var CboOrgan = App.SalesRules.queryById('CboOrgan');
            Organ = CboOrgan.getValue();
        }
        
        App.TreeDaramadSearch.getStore().getProxy().setExtraParam("OrganId", Organ);
        App.TreeDaramadSearch.getStore().getProxy().setExtraParam("FiscalYearId", '@ViewBag.FiscalYearId');
        App.TreeDaramadSearch.store/*getStore()*/.load();
    }

    function NextSearchCodeDaramad() {
        var SelectedNode = App.TreeDaramadSearch.getSelectionModel().getLastSelected();
        if (SelectedNode != null) {
            if (SelectedNode.data.fldId != 1) {
                if (State == 1) {
                    Ext.net.DirectMethod.request({
                        url: '/Weigh/SearchCodeDaramad_Baskool/CheckExistCodeDaramad',
                        params: {
                            ShomareHesabCodeDaramadId: SelectedNode.data.fldId,
                            OrganId: '@ViewBag.OrganId',
                            SaleRuleId:'@ViewBag.SaleRuleId'
                        },
                        success: function (result) {
                            if (result.Exist) {
                                Ext.MessageBox.show({
                                    title: "خطا",
                                    msg: "کد درآمد انتخاب شده قبلا به کالای دیگری اختصاص داده شده است.",
                                    icon: Ext.MessageBox.ERROR,
                                    buttons: Ext.MessageBox.OK
                                });
                            }
                            else {
                                App.SalesRules.queryById('fldShomareHesabCodeDaramadId').setValue(SelectedNode.data.fldId);
                                App.SalesRules.queryById('txtCodeDaramad').setValue(SelectedNode.data.fldDaramadCode + "(" + SelectedNode.data.fldDaramadTitle + ")");
                                App.SearchCodeDaramad.destroy();
                            }
                        }
                    });
                }
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "کاربر گرامی؛ امکان انتخاب سطر مورد نظر وجود ندارد.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر (شاخه) را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }


</script>