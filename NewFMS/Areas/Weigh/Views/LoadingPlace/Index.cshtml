@model IEnumerable<NewFMS.WCF_Weigh.OBJ_LoadingPlace>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{ var X = Html.X();}
<br />
@(Html.X().Panel()
        .ID("SabtLoadingPlace")
            .Title("ثبت محل بارگیری")
                            .Listeners(li => { li.AfterRender.Handler = "LoadingPlaceSetSize();"; li.Render.Fn = "addKeyMapSabtLoadingPlace"; })
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .Border(false)
       .Items(
    X.Panel().Border(false).Items(X.Label()),
        X.Panel().Border(false).Buttons(
            X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ItemID("btnSaveLoadingPlace")
                .Listeners(l => { l.Click.Handler = "SaveLoadingPlace();"; })
            , X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                .Listeners(l => { l.Click.Handler = "LoadLoadingPlace();"; })
            , X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                .Listeners(l => { l.Click.Handler = "DeleteLoadingPlace();"; })
                , X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help).Listeners(l => { l.Click.Handler = "HelpLoadingPlace();"; })
            , X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)
                    .OnClientClick("App.SabtLoadingPlace.destroy()")
        ).ButtonAlign(Ext.Net.Alignment.Center)
        .Items(
            X.Panel().Border(false)
             .Layout(LayoutType.VBox)
                         .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.FieldSet().Border(true).Title("محل بارگیری").Height(50)
                     .Defaults(new { Margin = 2 })
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                .Items(
                    X.Hidden().ItemID("fldId"),
                        X.Label("نام محل بارگیری:"),
                       X.TextField()
                        .ItemID("txtName")
                                .MaxLength(150).Width(260)
                            .EnforceMaxLength(true)
                                .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
        // .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا نام محل بارگیری را وارد کنید.")
                    .AutoFocus(true)
                    , X.Label("توضیحات:"),
                        X.TextField()
                    .ItemID("txtDescLoadingPlace")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Width(360)
                )
            )
        ),
        X.GridPanel()
        .ItemID("LoadingPlaceGrid")
            .BottomBar(X.PagingToolbar())
            .Store(
                            X.StoreForModel()
                                            .Listeners(l => l.DataChanged.Handler = "App.SabtLoadingPlace.queryById('LoadingPlaceGrid').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                            )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                        )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                )
                    .Plugins(X.FilterHeader().Remote(true))
                     .Listeners(l =>
                     {
                         l.AfterRender.Handler = "var grid = App.SabtLoadingPlace.queryById('LoadingPlaceGrid');grid.setHeight(App.TasisatWin.getHeight() - 260); ";

                     })
        .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                Html.X().Column().DataIndex(Model, m => m.fldName).Text("محل بارگیری").Flex(3),
                                    Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
    )
                .SelectionModel(
                    Html.X().RowSelectionModel()
                        .Mode(Ext.Net.SelectionMode.Single)
    )
    )
)
<script type="text/javascript">

    /*App.Win.addListener('resize', function () {
        App.LoadingPlace.setWidth(App.Win.getWidth());
    });
    App.Win.addListener('resize', function () {
        var grid = App.LoadingPlace.queryById('LoadingPlaceGrid');
        grid.setHeight(App.Win.getHeight()-260);
    });*/
    function HelpLoadingPlace() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Weigh/LoadingPlace/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function LoadingPlaceSetSize() {
        App.SabtLoadingPlace.setWidth(App.TasisatWin.getWidth());
        var grid = App.SabtLoadingPlace.queryById('LoadingPlaceGrid');
        grid.setHeight(App.TasisatWin.getHeight() - 260);
    }
    function LoadLoadingPlace() {
        var SelectedRow = App.SabtLoadingPlace.queryById('LoadingPlaceGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Weigh/LoadingPlace/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    var txtName = App.SabtLoadingPlace.queryById('txtName');
                    txtName.setValue(data.fldName);
                    var txtDescLoadingPlace = App.SabtLoadingPlace.queryById('txtDescLoadingPlace');
                    txtDescLoadingPlace.setValue(data.fldDesc);
                    var fldId = App.SabtLoadingPlace.queryById('fldId');
                    fldId.setValue(data.fldId);
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveLoadingPlace() {
        var txtName = App.SabtLoadingPlace.queryById('txtName');
        var txtDescLoadingPlace = App.SabtLoadingPlace.queryById('txtDescLoadingPlace');
        var fldId = App.SabtLoadingPlace.queryById('fldId');
            var er = false;

            if (txtName.validate() == false) {
                er = true;
            }
            if (er == true)
                return;

            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Weigh/LoadingPlace/Save',
                params: {
                    fldId: fldId.getValue(),
                    fldName: txtName.getValue(),
                    fldDesc: txtDescLoadingPlace.getValue()
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.SabtLoadingPlace.queryById('LoadingPlaceGrid').store.load();
                    if (data.Err != 1)
                        ClearLoadingPlace();
                }

            });
    }
    function DeleteLoadingPlace() {
        var SelectedRow = App.SabtLoadingPlace.queryById('LoadingPlaceGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Weigh/LoadingPlace/Delete',
                            params: {
                                id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.SabtLoadingPlace.queryById('LoadingPlaceGrid').store.load()
                            }
                        });
                        Ext.net.Mask.hide();
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function ClearLoadingPlace() {
        App.SabtLoadingPlace.queryById('fldId').setValue(0);
        App.SabtLoadingPlace.queryById('txtName').setValue("");
        App.SabtLoadingPlace.queryById('txtDescLoadingPlace').setValue("");
    }
    var addKeyMapSabtLoadingPlace = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.SabtLoadingPlace.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtDescLoadingPlace") {
                        nextfld = App.SabtLoadingPlace.queryById('btnSaveLoadingPlace');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>