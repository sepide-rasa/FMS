@model IEnumerable<NewFMS.WCF_Automation.OBJ_Ronevesht>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities
@{

    var X = Html.X();
}
@*<script>
    tinymce.init({
        script_url: '@Url.Content("~/Scripts/tinymce/tiny_mce.js")',
        theme: "advanced",
        elements: "txtMatnLetter",

        height: "500",
        width: "790",
        verify_html: false,
        plugins: "pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave",

        theme_advanced_buttons1: "save,newdocument,|,bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,styleselect,formatselect,fontselect,fontsizeselect",
        theme_advanced_buttons2: "cut,copy,paste,pastetext,pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,blockquote,|,undo,redo,|,link,unlink,anchor,image,cleanup,help,code,|,insertdate,inserttime,preview,|,forecolor,backcolor",
        theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,visualaid,|,sub,sup,|,charmap,emotions,iespell,media,advhr,|,print,|,ltr,rtl,|,fullscreen",
        theme_advanced_buttons4: "insertlayer,moveforward,movebackward,absolute,|,styleprops,|,cite,abbr,acronym,del,ins,attribs,|,visualchars,nonbreaking,template,pagebreak,restoredraft,codehighlighting,netadvimage",
        theme_advanced_toolbar_location: "top",
        theme_advanced_toolbar_align: "left",
        theme_advanced_statusbar_location: "bottom",
        theme_advanced_resizing: false,

        content_css: "@Url.Content("~/Scripts/tinymce/css/content.css")",
        convert_urls: false,

        template_external_list_url: "lists/template_list.js",
        external_link_list_url: "lists/link_list.js",
        external_image_list_url: "lists/image_list.js",
        media_external_list_url: "lists/media_list.js"
    });
</script>*@
<script>
    var h;
    var onInitializeToEn = function (htmlEditor) {
        h = htmlEditor;
        htmlEditor.getDoc()[Ext.isGecko ? 'onkeypress' : 'onkeyup'] = function (e) {
            htmlEditor.setValue(FaLangAlert(htmlEditor.getValue()));
        };
    };

</script>
<style>
    .custom-icon {
        margin-right: 380px !important;
    }
    .custom-icon2 {
        margin-right: 180px !important;
    }
</style>

@(X.Window()
    .Height(550)
    .Width(700)
    .Modal(true)
    .ID("SadereLetterWin")
        .Title("نامه صادره/داخلی")
        //  .Icon(Ext.Net.Icon.UserComment2)
    .Closable(true)
    .Border(false)
    .CloseAction(Ext.Net.CloseAction.Destroy)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
        .Items(
        X.Panel()
                            .ID("ActionnPanellLetter")
                            .Border(false)
                           // .Frame(true)
                           //  .MarginSpec("0 0 7px 0")
                            .TitleAlign(TitleAlign.Right)
                           // .Collapsible(true)
                           //.AnimCollapse(true)
                            .Height(60)
                            .Content(@<div id="mainLetter">
                                <div class="maincontainer2">
                                    <ul class="ribbon5">
                                        <li>
                                            <ul class="menu2" style="left: 0px;float: right;direction: rtl;">
                                                <li id="LiActions1">
                                                    <ul id="ulActions1">
                                                        <li id="LetterOP">
                                                            <div id="SaveLetter">
                                                                <img src="~/content/icons/Automation/ذخیره نامه.png" style="width: 33px;" alt="ذخیره نامه" />
                                                                ذخیره
                                                            </div>
                                                            <div id="SendLetterInLett">
                                                                <img src="~/content/icons/Automation/ارجاع نامه.png" style="width: 33px;" alt="ارجاع نامه" />
                                                                ارجاع
                                                            </div>
                                                            @*<div id="AnsLetterInLett">
                                                                <img src="~/content/icons/Automation/پاسخ به نامه.png" style="width: 33px;" alt="پاسخ به نامه" />
                                                                پاسخ به نامه
                                                            </div>*@
                                                            <div id="SignLetterInLett">
                                                                <img src="~/content/icons/Automation/امضای نامه.png" style="width: 33px;" alt="امضا نامه" />
                                                                امضا نامه
                                                            </div>
                                                           <div id="SendLetterDabirkhaneInLett">
                                                                <img src="~/content/icons/Automation/ارسال به دبیرخانه.png" style="width: 33px;" alt="ارسال به دبیرخانه" />
                                                                ارسال به دبیرخانه
                                                            </div>
                                                            <div id="CharkheLetterInLett">
                                                                <img src="~/content/icons/Automation/چرخه نامه.png" style="width: 33px;" alt="چرخه نامه" />
                                                                چرخه نامه
                                                            </div>
                                                            @*<div id="PrintLetterInLett">
                                                                <img src="~/content/icons/Automation/چاپ نامه.png" style="width: 33px;" alt="چاپ نامه" />
                                                                چاپ نامه
                                                            </div>
                                                            <div id="PrintRuneveshtInLett">
                                                                <img src="~/content/icons/Automation/چاپ با رونوشت.png" style="width: 33px;" alt="چاپ نامه با رونوشت" />
                                                                چاپ با رونوشت
                                                            </div>*@
                                                            <div id="ToziLetterInLett">
                                                                <img src="~/content/icons/Automation/توزیع نامه.png" style="width: 33px;" alt="توزیع نامه" />
                                                                توزیع نامه
                                                            </div>
                                                            <div id="KhatemeInLett">
                                                                <img src="~/content/icons/Automation/خاتمه کار.png" style="width: 33px;" alt="خاتمه کار" />
                                                                خاتمه کار
                                                            </div>
                                                        </li>

                                                    </ul>
                                                </li>
                                            </ul>
                                        </li>
                                    </ul>
                                </div>
                            </div>)
                        ,

                                X.TabPanel().Border(false).Height(500).Listeners(l => {  l.AfterRender.Handler = "FormLoad();"; })
                        .ID("pnlSadereLetterDetails")
                        .AutoScroll(true).Closable(false)
                            .Layout(Ext.Net.LayoutType.Fit)
                                 .TopBar(
                        Html.X().Toolbar()
                            .Items(
                                        X.Label("تاریخ ساخت:")
                                            .MarginSpec("0 0 0 20px"),
                                   X.TextField()
                                    .ItemID("txtTarikhSakht")
                                    .ReadOnly(true)
                                    .Width(90),
                                     X.Label("شماره نامه:")
                                         .MarginSpec("0 0 0 10px"),
                                   X.TextField()
                                                .ItemID("txtShomareName")
                                        .ReadOnly(true)
                                        .Width(90),
                                            X.Label("تاریخ نامه:")
                                             .MarginSpec("0 0 0 10px"),
                                       X.TextField()
                                                .ItemID("txtTarikhName")
                                        .ReadOnly(true)
                                        .Width(90),
                                                 X.Label("شماره ثبت رایانه:")
                                             .MarginSpec("0 0 0 10px"),
                                       X.TextField()
                                                .ItemID("txtShomareSabt")
                                        .ReadOnly(true)
                                        .Width(90)
                                                                )
                                                            )
                        .Items(
                            X.Panel()
                            .Title("مشخصات نامه")
                            .ID("PnlAsliLetter")
                                .Border(false)
                                .AutoScroll(true)
                     .Layout(LayoutType.VBox)
                     .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                                   .Items(
                            X.Hidden().ItemID("fldLetterId"),
                                        X.Hidden().ItemID("fldContentFileID"),
                                    X.Hidden().ItemID("RecieverSelected"),
                                    X.Hidden().ItemID("SignerSelected"),
                                    X.Hidden().ItemID("RuneveshtSelected"),
                                        X.FieldSet().Border(true).Title("اطلاعات نامه")
                                    .Defaults(new { Margin = 2 })
                                    .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                    .Items(
                            X.Label("موضوع نامه:"),
                           X.TextField()
                            .ItemID("txtSubject")
                            .ColSpan(5)
                                .MaxLength(300)
                            .EnforceMaxLength(true)
                        .AllowBlank(false)
                        .BlankText("لطفا موضوع نامه را وارد کنید.")
                        .AutoFocus(true)
                        .Width(400)
                            ,
                                             X.Label("محرمانگی:"),
                                            X.ComboBox()
                                                        .ItemID("CboSecurityType")
                                                    .TypeAhead(true)
                                                    .Editable(false)
                                                    .QueryMode(DataLoadMode.Local)
                                                    .AllowBlank(false)
                                                    .Width(200)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                    .BlankText("لطفا نوع محرمانگی را انتخاب کنید.")
                                                    .TriggerAction(TriggerAction.All)
                                                    .DisplayField("Name")
                                                    .ValueField("ID")
                                                    .EmptyText("نوع محرمانگی...")
                                                    .Store(X.Store()
                                                        .Model(X.Model()
                                                            .IDProperty("ID")
                                                            .Fields(
                                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                )
                                                            )
                                            .Proxy(Html.X().AjaxProxy()
                                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                .Url(Url.Action("GetSecurityType"))
                                                            .Reader(X.JsonReader().Root("data"))
                                                        )
                                                    )
                                         ,
                                                 X.Label("فوریت:"),
                                                X.ComboBox()
                                                                .ItemID("CboImmediacy")
                                                        .TypeAhead(true)
                                                        .Editable(false)
                                                        .QueryMode(DataLoadMode.Local)
                                                        .AllowBlank(false)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                        .BlankText("لطفا نوع محرمانگی را انتخاب کنید.")
                                                        .TriggerAction(TriggerAction.All)
                                                        .DisplayField("Name")
                                                        .ValueField("ID")
                                                        .EmptyText("فوریت...")
                                                        .Store(X.Store()
                                                            .Model(X.Model()
                                                                .IDProperty("ID")
                                                                .Fields(
                                                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                    )
                                                                )
                                                .Proxy(Html.X().AjaxProxy()
                                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                        .Url(Url.Action("GetImmediacy"))
                                                                .Reader(X.JsonReader().Root("data"))
                                                            )
                                                        )
                                                        
                                                            
                        ,
                              X.Label("گیرنده نامه (Ins):"),
                                X.TextField()
                                     .Width(400)
                                     .ColSpan(5)
                                    .ItemID("txtReceiver")
                                    .AllowBlank(false)
                                         .ReadOnly(true)
                                    .FieldStyle("padding-right:0px;")
                                    .Icon(Icon.UserAdd)
                                    .BlankText("لطفا گیرنده نامه را انتخاب کنید.")
                                        .Listeners(l =>
                                    {
                                        l.SpecialKey.Handler = "SelectReceiverCommision(e.getKey());";
                                        l.IconClick.Handler = "SelectReceiverCommision(111111);";
                                        l.AfterRender.Handler = "App.PnlAsliLetter.queryById('txtReceiver').icon.dom.classList.add('custom-icon');";
                                    })
                                    ,
                                          X.Label("امضا کننده (Ins):"),
                                    X.TextField()
                                        .ItemID("txtSigner")
                                             .Width(200)
                                            // .ColSpan(5)
                                    .AllowBlank(false)
                                         .ReadOnly(true)
                                    .FieldStyle("padding-right:0px;")
                                    .Icon(Icon.UserAdd)
                                    .BlankText("لطفا امضا کننده نامه را انتخاب کنید.")
                                        .Listeners(l =>
                                    {
                                        l.SpecialKey.Handler = "SelectSignerCommision(e.getKey());";
                                        l.IconClick.Handler = "SelectSignerCommision(111111);";
                                        l.AfterRender.Handler = "App.PnlAsliLetter.queryById('txtSigner').icon.dom.classList.add('custom-icon2');";
                                    })
                                        ,
                                                                      X.Label("نوع امضا:"),
                                                                X.ComboBox()
                                                                .ItemID("CboSignType")
        // .FieldLabel("نوع امضا")
                                                            .Editable(false)
                                                            .TypeAhead(true)
        //.Width(240)
                                                            .QueryMode(DataLoadMode.Local)
                                                            .TriggerAction(TriggerAction.All)
                                                             .SelectedItems(new { Value = "2" })
                                                            .Items(
                                                                new ListItem("امضا دیجیتال", "1"),
                                                                new ListItem("امضا گرم", "2")
                                                                )
                                   , X.Label("ایجاد کننده:"),
                                            X.ComboBox()
                                                    .ItemID("CboCreator")
                                                    .TypeAhead(true)
                                                    .Editable(false)
                                                    .QueryMode(DataLoadMode.Local)
                                                        .AllowBlank(false)
                                         .Width(400)
                                         .ColSpan(5)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                    .BlankText("لطفا ایجاد کننده نامه را انتخاب کنید.")
                                                    .TriggerAction(TriggerAction.All)
                                                    .DisplayField("Name")
                                                    .ValueField("ID")
                                                    .EmptyText("ایجاد کننده...")
                                                    .Store(X.Store()
                                                    .Listeners(l=>l.Load.Handler="SetDefultCreator()")
                                                        .Model(X.Model()
                                                            .IDProperty("ID")
                                                            .Fields(
                                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                                )
                                                            )
                                            .Proxy(Html.X().AjaxProxy()
                                                //.ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                                    .Url(Url.Action("GetCreator"))
                                                            .Reader(X.JsonReader().Root("data"))
                                                        )
                                                                         .Parameters(ps => ps.Add(new StoreParameter("LetterId", @ViewBag.LetterId, ParameterMode.Raw)))
                                                    ) 
                        )
                       
                             ,
                              X.FieldSet().Border(true).Title("متن نامه")
                                        .Defaults(new { Margin = 2 })
                                        .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                        .Items(
                            X.Label("الگوی نامه:"),
                                X.ComboBox()
                                                    .ItemID("CboLetterTemplate")
                                        .TypeAhead(true)
                                        .Editable(false)
                                        .QueryMode(DataLoadMode.Local)
                                        .AllowBlank(false)
                                            .Width(120)
//.ForceSelection(true)
//.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                        .BlankText("لطفا الگو نامه را انتخاب کنید.")
                                        .TriggerAction(TriggerAction.All)
                                        .DisplayField("Name")
                                        .ValueField("ID")
                                        .EmptyText("الگو...")
                                        .Store(X.Store()
                                            .Model(X.Model()
                                                .IDProperty("ID")
                                                .Fields(
                                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                    )
                                                )
                                .Proxy(Html.X().AjaxProxy()
                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                            .Url(Url.Action("GetLetterTemplate"))
                                                .Reader(X.JsonReader().Root("data"))
                                            )
                                        )
                                        ,
                                         X.Label("فونت:"),
                                            X.ComboBox()
                                            .ItemID("CboFont")
                                        .Editable(false)
                                        .TypeAhead(true)
.Width(120)
                                        .QueryMode(DataLoadMode.Local)
                                        .TriggerAction(TriggerAction.All)
                                            //.SelectedItems(new { Value = "1" })
                                        .Items(
                                                    new ListItem("B Nazanin", "B Nazanin"),
                                                new ListItem("B Titr", "B Titr"),
                                                        new ListItem("IranNastaliq", "IranNastaliq")
                                            )
                                            ,
                                        X.Button()
                                    .Text("دانلود نامه")
                                    .Icon(Ext.Net.Icon.PageWhiteWord)
                                        .Listeners(li => li.Click.Handler = "DlLeterWord();")
                                        ,
                                            X.Button()
                                        .Text("پیش نمایش")
                                            .Icon(Ext.Net.Icon.PageWhiteAcrobat)
                                            .Listeners(li => li.Click.Handler = "ShowLetterPdf();")
                                            
                                             , 
                                //             X.HtmlEditor().ItemID("txtMatnLetter")
                                //        .EnableSourceEdit(false)
                                ////.Width(700).Height(300)
                                //    .RTL(true)
                                             X.Panel().Content(@<textarea id="txtMatnLetter" rows="10" cols="70"></textarea>)
                                             .ColSpan(6)
                        )
                           ,
                              X.FieldSet().Border(true).Title("کلید واژه")
                                            .Defaults(new { Margin = 2 })
                                                         .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                        .Items(
                            X.TextField().ItemID("txtKeywords").Width(500)
                        )
                             ,
                              X.FieldSet().Border(true).Title("رونوشت نامه")
                                        .Defaults(new { Margin = 2 })
                                        .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                        .Items(
                                 X.GridPanel().AutoScroll(true)//.Title("رونوشت نامه")
                                        .TopBar(
                                            Html.X().Toolbar()
                                            .Items(
                                                 X.Button().Text("اضافه").Icon(Ext.Net.Icon.Add).Listeners(li => li.Click.Handler = "SelectRuneveshtCommision()"),
                                                    X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                                                            .Listeners(li => li.Click.Handler = "if (App.PnlAsliLetter.queryById('GridRunevesht').selModel.getLastSelected() == null) {Ext.MessageBox.show({ title: 'خطا', msg: 'لطفا یک سطر را انتخاب کنید',icon: Ext.MessageBox.ERROR,buttons: Ext.MessageBox.OK});return false;}else DelMomayez();")

                                            )
                                        )
                                            .ItemID("GridRunevesht").Flex(2)

                                    .Height(120).Width(500)
        //.ColumnWidth(0.6)
        //.Layout(Ext.Net.LayoutType.Column)
                                    .Store(
                                           X.StoreForModel()//.AutoLoad(false)
                                            .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("ReadRunevesht"))
                                            .Reader(Html.X().JsonReader().Root("data"))
         .ExtraParams(x => x.Add(new { LetterId = @ViewBag.LetterId }))
                                        )
                                        .PageSize(10)
                                        .RemoteFilter(false)
                                        .RemotePaging(true)

                                    )
                                    .View(
                                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                                    )
                                        .Plugins(Html.X().CellEditing())
                                    .ColumnModel(
        //Html.X().RowNumbererColumn(),
                                                    Html.X().Column().DataIndex(Model, m => m.fldid).Text("کد").Flex(1).Hidden(true),
                                                            Html.X().Column().DataIndex(Model, m => m.fldId_Type).Text("fldId_Type").Flex(1).Hidden(true),
                                                            Html.X().Column().DataIndex(Model, m => m.fldAshkhasHoghoghiId).Text("fldAshkhasHoghoghiId").Flex(1).Hidden(true),
                                                                Html.X().Column().DataIndex(Model, m => m.fldCommisionId).Text("fldCommisionId").Flex(1).Hidden(true),
                                                    Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام").Flex(4),
                                                 Html.X().ComponentColumn().ID("colAssType").DataIndex(Model, m => m.fldAssignmentTypeId).Filterable(false)
                                        .Flex(3).Editor(true).Text("نوع")//.Listeners(l=>l.Bind.Fn="setToken").Listeners(l=>l.Edit.Fn="AddtoArray")
                                        .Component(
                                            X.ComboBox()
                                                .ItemID("CboType")
                                                .ID("CboAssType")
                                                .TypeAhead(true)
                                                .Editable(false)
                                                .QueryMode(DataLoadMode.Local)
                                                .AllowBlank(false)
        //.ForceSelection(true)
        //.Listeners(l => l.AfterRender.Fn = "setValidateCboPaye")
                                                .BlankText("لطفا نوع ارجاع را انتخاب کنید.")
                                                .TriggerAction(TriggerAction.All)
                                                .DisplayField("Name")
                                                .ValueField("ID")
                                                .EmptyText("نوع...")
                                                .Store(X.Store()
                                                    .Model(X.Model()
                                                        .IDProperty("ID")
                                                        .Fields(
                                                            new ModelField("ID", ModelFieldType.String) { Mapping = "fldId" },
                                                            new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                                                            )
                                                        )
                                        .Proxy(Html.X().AjaxProxy()
                                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                                        .Url(Url.Action("GetAssType"))
                                                        .Reader(X.JsonReader().Root("data"))
                                                    )
                                                )
                                        ),
                                                    Html.X().Column().DataIndex(Model, m => m.fldText).Text("شرح").Flex(7)
                                                .Editor(X.TextField().ID("txtDesc"))

                                    )


                                    .SelectionModel(
                                        Html.X().RowSelectionModel()
                                            .Mode(Ext.Net.SelectionMode.Single)
                                    )

                        )
                             ,
                                  X.FieldSet().Border(true).Title("توضیحات")
                                            .Defaults(new { Margin = 2 })
                                                     .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                                                       .MarginSpec("0 0 60px 0")
                            .Items(
                                    X.TextArea().ItemID("txtDescAsli").Width(500)
                            )

                    )

                    )
)
)
<script>
    var flag = true;
    var CommisionId = 0;
    var LetterId = 0;
    var HistoryLetterID = 0;

  

    function FormLoad() {
        /*  if (flag) LoadContent();*/
        CommisionId = '@ViewBag.CommisionId';
        LetterId = '@ViewBag.LetterId';
        HistoryLetterID = '@ViewBag.HistoryLetterID';
        ShowPanels();
        LoadDataInLetter();

    }
    function ShowPanels() {
        if (LetterId != 0) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/SadereLetter/LetterAttach',
                params: {
                    containerId: "pnlSadereLetterDetails",
                    LetterId: LetterId
                },
                success: function () {
                    Ext.net.DirectMethod.request({
                        url: '/Automation/SadereLetter/LetterHistory',
                        params: {
                            containerId: "pnlSadereLetterDetails",
                            LetterId: LetterId
                        },
                        success: function () {
                            Ext.net.DirectMethod.request({
                                url: '/Automation/SadereLetter/LetterFollow',
                                params: {
                                    containerId: "pnlSadereLetterDetails",
                                    LetterId: LetterId
                                },
                                success: function () {

                                    App.pnlSadereLetterDetails.setActiveTab(3);
                                    App.pnlSadereLetterDetails.setActiveTab(2);
                                    App.pnlSadereLetterDetails.setActiveTab(1);
                                    App.pnlSadereLetterDetails.setActiveTab(0);

                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                    });
                }
            });
        }
    }
    function LoadDataInLetter() {
        if (LetterId != 0) {
            Ext.net.Mask.show({ msg: 'در حال بارگزاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/SadereLetter/DetailsLetter',
                params: {
                    Id: LetterId
                },
                success: function (data) {
                    var RecieverSelected = App.PnlAsliLetter.queryById('RecieverSelected');
                    RecieverSelected.setValue(data.fldReceiver);
                    var RuneveshtSelected = App.PnlAsliLetter.queryById('RuneveshtSelected');
                    RuneveshtSelected.setValue(data.fldRoonevesht);
                    var SignerSelected = App.PnlAsliLetter.queryById('SignerSelected');
                    SignerSelected.setValue(data.fldSigner);
                    var txtShomareName = App.pnlSadereLetterDetails.queryById('txtShomareName');
                    txtShomareName.setValue(data.fldLetterNumber);
                    var txtTarikhSakht = App.pnlSadereLetterDetails.queryById('txtTarikhSakht');
                    txtTarikhSakht.setValue(data.fldCreatedDate);
                    var txtShomareSabt = App.pnlSadereLetterDetails.queryById('txtShomareSabt');
                    txtShomareSabt.setValue(data.fldOrderId);
                    var txtTarikhName = App.pnlSadereLetterDetails.queryById('txtTarikhName');
                    txtTarikhName.setValue(data.fldLetterDate);
                    var CboSignType = App.PnlAsliLetter.queryById('CboSignType');
                    CboSignType.setValue(data.fldSignType);
                    var txtKeywords = App.PnlAsliLetter.queryById('txtKeywords');
                    txtKeywords.setValue(data.fldKeywords);
                    var txtSubject = App.PnlAsliLetter.queryById('txtSubject');
                    txtSubject.setValue(data.fldSubject);
                    var CboSecurityType = App.PnlAsliLetter.queryById('CboSecurityType');
                    CboSecurityType.setValue(data.fldSecurityTypeID);
                    var CboImmediacy = App.PnlAsliLetter.queryById('CboImmediacy');
                    CboImmediacy.setValue(data.fldImmediacyID);
                    var CboCreator = App.PnlAsliLetter.queryById('CboCreator');
                    CboCreator.setValue(data.fldComisionID);
                    var txtDescAsli = App.PnlAsliLetter.queryById('txtDescAsli');
                    txtDescAsli.setValue(data.fldDesc);
                    var txtReceiver = App.PnlAsliLetter.queryById('txtReceiver');
                    txtReceiver.setValue(data.fldRecieverName);
                    var txtSigner = App.PnlAsliLetter.queryById('txtSigner');
                    txtSigner.setValue(data.fldSignerName);
                    var CboLetterTemplate = App.PnlAsliLetter.queryById('CboLetterTemplate');
                    CboLetterTemplate.setValue(data.fldLetterTemplateId);
                    var CboFont = App.PnlAsliLetter.queryById('CboFont');
                    CboFont.setValue(data.fldFont);
                    
                    var fldContentFileID = App.PnlAsliLetter.queryById('fldContentFileID');
                    fldContentFileID.setValue(data.fldContentFileID);

                    var txtMatnLetter = tinyMCE.getInstanceById('txtMatnLetter');
                    $('#txtMatnLetter').val(data.fldMatnLetter);
                    /*txtMatnLetter.setContent(data.fldMatnLetter);
                    txtMatnLetter.val(data.fldMatnLetter);
                   var txtMatnLetter = App.PnlAsliLetter.queryById('txtMatnLetter');
                    txtMatnLetter.setValue(data.fldMatnLetter); */
                    Ext.net.Mask.hide();
                    if (flag) LoadContent();
                }
            });
        }
        else {
            if (HistoryLetterID != 0) {
                var RecieverSelected = App.PnlAsliLetter.queryById('RecieverSelected');
                RecieverSelected.setValue('@ViewBag.recieverId');
                var txtSubject = App.PnlAsliLetter.queryById('txtSubject');
                txtSubject.setValue('@ViewBag.Subject');
                var txtReceiver = App.PnlAsliLetter.queryById('txtReceiver');
                txtReceiver.setValue('@ViewBag.reciverName');
            }
            App.PnlAsliLetter.queryById('CboSignType').setValue("1");
            App.PnlAsliLetter.queryById('CboSecurityType').setValue("1");
            App.PnlAsliLetter.queryById('CboImmediacy').setValue("1");
           if (flag) LoadContent();
        }
    }
    function SetDefultCreator() {
        App.PnlAsliLetter.queryById('CboCreator').setValue(CommisionId.toString());
        if ('@ViewBag.LetterId' != 0)
            App.PnlAsliLetter.queryById('CboCreator').setDisabled(true);
    }
    function SelectReceiverCommision(Code) {
        if (Code == 45 || Code == 111111) {
            Ext.net.DirectMethod.request({
                url: '/Automation/SearchReferralRules/Index',
                params: {
                    State: 1,
                    SearchType: 0,
                    CommId: CommisionId
                }
            });
        }
    }
    function SelectSignerCommision(Code) {
        if (Code == 45 || Code == 111111) {
            Ext.net.DirectMethod.request({
                url: '/Automation/SearchSigner/Index',
                params: {
                    State: 1
                }
            });
        }
    }
    function SelectRuneveshtCommision() {
        Ext.net.DirectMethod.request({
            url: '/Automation/SearchReferralRules/Index',
            params: {
                State: 2,
                SearchType: 0,
                CommId: CommisionId
            }
        });
    }
    $('#SaveLetter').click(function () {
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        var RecieverSelected = App.PnlAsliLetter.queryById('RecieverSelected');
        var SignerSelected = App.PnlAsliLetter.queryById('SignerSelected');
        var txtShomareName = App.pnlSadereLetterDetails.queryById('txtShomareName');
        var txtTarikhName = App.pnlSadereLetterDetails.queryById('txtTarikhName');
        var CboSignType = App.PnlAsliLetter.queryById('CboSignType');
        var txtKeywords = App.PnlAsliLetter.queryById('txtKeywords');
        var txtSubject = App.PnlAsliLetter.queryById('txtSubject');
        var CboSecurityType = App.PnlAsliLetter.queryById('CboSecurityType');
        var CboImmediacy = App.PnlAsliLetter.queryById('CboImmediacy');
        var CboCreator = App.PnlAsliLetter.queryById('CboCreator');
        var txtDescAsli = App.PnlAsliLetter.queryById('txtDescAsli');
        var txtReceiver = App.PnlAsliLetter.queryById('txtReceiver');
        var txtSigner = App.PnlAsliLetter.queryById('txtSigner');
       /* var txtMatnLetter = App.PnlAsliLetter.queryById('txtMatnLetter');*/
        var txtMatnLetter = tinyMCE.getInstanceById('txtMatnLetter');
        var CboLetterTemplate = App.PnlAsliLetter.queryById('CboLetterTemplate');
        var CboFont = App.PnlAsliLetter.queryById('CboFont');
        var fldContentFileID = App.PnlAsliLetter.queryById('fldContentFileID');

        
        var er = false;


        if (txtSigner.validate() == false) {
            er = true;
        } if (txtReceiver.validate() == false) {
            er = true;
        } if (CboCreator.validate() == false) {
            er = true;
        } if (CboImmediacy.validate() == false) {
            er = true;
        } if (CboSecurityType.validate() == false) {
            er = true;
        } if (txtSubject.validate() == false) {
            er = true;
        } if (txtKeywords.validate() == false) {
            er = true;
        } if (CboSignType.validate() == false) {
            er = true;
        }
        /*if (txtMatnLetter.validate() == false) {
            er = true;
        }*/
        if (CboLetterTemplate.validate() == false) {
            er = true;
        } 

        var Items = new Array();
       
        var SelectedRow = App.PnlAsliLetter.queryById('GridRunevesht');
        var ErAssignmentTypeID = 0;
        for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
            row = SelectedRow.selModel.store.data.items[i];
            if (row.data.fldAssignmentTypeId != 0) {
                Items.push({
                    'fldAshkhasHoghoghiId': row.data.fldAshkhasHoghoghiId,
                    'fldCommisionId': row.data.fldCommisionId,
                    'fldAssignmentTypeId': row.data.fldAssignmentTypeId,
                    'fldText': row.data.fldText
                });
            }
            else
                ErAssignmentTypeID = 1;
        }
        if (ErAssignmentTypeID == 1) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "فیلد نوع ارجاع انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            Ext.net.Mask.hide();
            er = true;
        }

        if (er == true)
            return;

        var data1 = {
            runevesht: Items,
            Recievers: RecieverSelected.getValue(),
            Signers: SignerSelected.getValue(),
            fldDesc: txtDescAsli.getValue(),
            fldID: LetterId,
            fldComisionID: CboCreator.getValue(),/* CommisionId,*/
            fldImmediacyID: CboImmediacy.getValue(),
            fldSecurityTypeID: CboSecurityType.getValue(),
            fldSubject: txtSubject.getValue(),
            fldKeywords: txtKeywords.getValue(),
            fldSignType: CboSignType.getValue(),
            fldLetterDate: txtTarikhName.getValue(),
            fldLetterNumber: txtShomareName.getValue(),
            fldLetterTemplateId: CboLetterTemplate.getValue(),
           /* fldMatnLetter: encodeURI(txtMatnLetter.getValue())*/
            fldMatnLetter: txtMatnLetter.getContent(),
            fldContentFileID: fldContentFileID.getValue(),
            fldFont: CboFont.getValue()

        };

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/Automation/SadereLetter/SaveLetter',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data1),
            datatype: "json",
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Err == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK,
                    fn: function (btn) {
                        if (btn == 'ok') {
                            if (data.Err == 0 && LetterId == 0) {
                                LetterId = data.LetterID;
                                App.pnlSadereLetterDetails.queryById('txtShomareSabt').setValue(data.LetterOrderId);
                                App.pnlSadereLetterDetails.queryById('txtTarikhSakht').setValue(data.LetterCreateDate);
                                ShowPanels();
                                if (HistoryLetterID != 0) {
                                    Ext.net.DirectMethod.request({
                                        url: '/SadereLetter/SaveHistoryLetter',
                                        params: {
                                            fldId: 0,
                                            fldHistoryType_Id: 4,
                                            fldHistoryLetter_Id: HistoryLetterID,
                                            fldDesc: "",
                                            fldCurrentLetter_Id: LetterId
                                        },
                                        success: function (data) {
                                            App.PnlHistory.queryById('HistoryGrid').store.load();
                                        }

                                    });
                                }
                            }
                        }
                    }
                });

                Ext.net.Mask.hide();
            }
        });

    });
    $('#SendLetterInLett').click(function () {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            var CboCreator = App.PnlAsliLetter.queryById('CboCreator');
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/LetterKartabl/ErjaWin',
                params: {
                    fldLetterId: LetterId,
                    fldMessageId: '',
                    SourceAssId: '@ViewBag.SourceAssId',
                    commId: CboCreator.getValue(),
                    state: 2,
                    LetterTypeId: 1
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
    });


    $('#SendLetterDabirkhaneInLett').click(function () {
        var SignerSelected = App.PnlAsliLetter.queryById('SignerSelected');
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/SendToSecretariat/Index',
                params: {
                    LetterID: LetterId,
                    SourceAssId: '@ViewBag.SourceAssId',
                    CurrentComId: '@ViewBag.CurrentComId'
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
    });
    $('#SignLetterInLett').click(function () {
        var SignerSelected = App.PnlAsliLetter.queryById('SignerSelected');
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            var CboCreator = App.PnlAsliLetter.queryById('CboCreator');
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/SadereLetter/SignLetter',
                params: {
                    LetterID: LetterId,
                    SignerComisions: SignerSelected.getValue(),
                    CurrentComId: '@ViewBag.CurrentComId' /*CboCreator.getValue()*/
                },
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK,
                        fn: function (btn) {
                            if (btn == 'ok') {
                                SearchSK();
                            }
                        }
                    });
                    Ext.net.Mask.hide();
                }
            });
        }
    });
    $('#ToziLetterInLett').click(function () {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            Ext.net.Mask.show({ msg: 'در حال بررسی...' });

            var RecieverSelected = App.PnlAsliLetter.queryById('RecieverSelected');
            var RuneveshtSelected = App.PnlAsliLetter.queryById('RuneveshtSelected');
            var CboCreator = App.PnlAsliLetter.queryById('CboCreator');

            var Items = new Array();
            var er = false;
            var SelectedRow = App.PnlAsliLetter.queryById('GridRunevesht');
            var ErAssignmentTypeID = 0;
            for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
                row = SelectedRow.selModel.store.data.items[i];
                if (row.data.fldAssignmentTypeId != 0) {
                    Items.push({
                        'fldAshkhasHoghoghiId': row.data.fldAshkhasHoghoghiId,
                        'fldCommisionId': row.data.fldCommisionId,
                        'fldAssignmentTypeId': row.data.fldAssignmentTypeId,
                        'fldText': row.data.fldText
                    });
                }
                else
                    ErAssignmentTypeID = 1;
            }
            if (ErAssignmentTypeID == 1) {
                Ext.MessageBox.show({
                    Name: "خطا",
                    msg: "فیلد نوع ارجاع انتخاب نشده است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
                er = true;
            }

            Ext.net.DirectMethod.request({
                url: '/Automation/SadereLetter/CheckInternalP',
                params: {
                    fldReceiverComisionID: RecieverSelected.getValue(),
                    fldRoneveshId: RuneveshtSelected.getValue()
                },
                success: function (data) {
                    if (data.In == 1) {
                        Ext.net.DirectMethod.request({
                            url: '/Automation/SadereLetter/DistributeWin',
                            params: {
                                LetterID: LetterId,
                                ReceiverComisionID: RecieverSelected.getValue(),
                                ComisionID: CboCreator.getValue(),
                                SourceAssId: '@ViewBag.SourceAssId'
                            },
                            success: function (data) {
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                    else if (data.Msg != "") {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                        });
                        Ext.net.Mask.hide();
                    }
                    else {
                        var data1 = {
                            runevesht: Items,
                            LetterID: LetterId,
                            ReceiverComisionID: RecieverSelected.getValue(),
                            ComisionID: CboCreator.getValue(),
                            SourceAssId: '@ViewBag.SourceAssId',
                            AnswerDate: ""
                        };
                        $.ajax({
                            type: "POST",
                            url: '/Automation/SadereLetter/Distribute',
                            contentType: "application/json; charset=utf-8",
                            data: JSON.stringify(data1),
                            datatype: "json",
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Err == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK,
                                    fn: function (btn) {
                                        if (btn == 'ok') {
                                            SearchSK();
                                        }
                                    }
                                });
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
    });
    $('#CharkheLetterInLett').click(function () {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Automation/LetterCharkhe/Index',
            params: {
                LetterId: LetterId,
                MessageId: null
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    });
    $('#KhatemeInLett').click(function () {
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا برای خاتمه نامه مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                    Ext.net.DirectMethod.request({
                        url: '/Automation/LetterActionType/SaveLetterActions',
                        params: {
                            LetterIds: LetterId + ";",
                            fldLetterActionTypeId: 3
                        },
                        success: function (data) {
                            var ic = Ext.MessageBox.INFO;
                            if (data.Err == 1)
                                ic = Ext.MessageBox.ERROR;
                            Ext.MessageBox.show({
                                title: data.MsgTitle,
                                msg: data.Msg,
                                icon: ic,
                                buttons: Ext.MessageBox.OK
                            });
                            Ext.net.Mask.hide();
                            SearchSK();
                        }
                    });
                }
            }
        });
    });
    function DlLeterWord() {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else{
            var CboLetterTemplate = App.PnlAsliLetter.queryById('CboLetterTemplate');
            $.ajax({
                type: "POST",
                dataType: 'native',
                url: "/Automation/SadereLetter/CreateLetterText",
                xhrFields: {
                    responseType: 'blob'
                },
                data: {
                    LetterId: LetterId/*,
                    TempId: CboLetterTemplate.getValue()*/

                },
                success: function (blob) {
                    x = blob;
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = "DownloadFile";
                    link.click();
                }
            });
        }
    }
    function ShowLetterPdf() {
        if (LetterId == 0) {
            Ext.MessageBox.show({
                Name: "خطا",
                msg: "ابتدا نامه را ذخیره کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            var CboLetterTemplate = App.PnlAsliLetter.queryById('CboLetterTemplate');
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: "/Automation/SadereLetter/PreviewLetter",
                params: {
                    LetterId: LetterId/*,
                    TempId: CboLetterTemplate.getValue()*/
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
           
        }
    }
  
    function LoadContent() {
        
        tinymce.init({
            mode: "exact",
            elements: "txtMatnLetter",
            theme: "advanced",
            skin: "o2k7",
            plugins: "autolink,lists,pagebreak,style,layer,table,save,advhr,advimage,advlink,emotions,iespell,inlinepopups,insertdatetime,preview,media,searchreplace,print,contextmenu,paste,directionality,fullscreen,noneditable,visualchars,nonbreaking,xhtmlxtras,template,wordcount,advlist,autosave,extjsfilemanager",
            convert_urls: false,
            theme_advanced_buttons1: "bold,italic,underline,strikethrough,|,justifyleft,justifycenter,justifyright,justifyfull,fontsizeselect",
            theme_advanced_buttons2: "pasteword,|,search,replace,|,bullist,numlist,|,outdent,indent,|,undo,redo,code,|,link,unlink,anchor,image,|,forecolor,backcolor",
            theme_advanced_buttons3: "tablecontrols,|,hr,removeformat,|,sub,sup",
            /* theme_advanced_buttons4: "insertlayer,moveforward,movebackward,|,styleprops,|,abbr,acronym,del,ins,|,visualchars,nonbreaking,pagebreak,restoredraft,|,extjsfilemanagerselectimage,extjsfilemanagerselectmedia,extjsfilemanagerupload",
           */ theme_advanced_toolbar_location: "top",
            theme_advanced_toolbar_align: "right",
            /* theme_advanced_statusbar_location: "bottom",*/
            theme_advanced_resizing: true,
           /* language : 'fa',*/
            template_external_list_url: "resources/templates/html/list.js",
            external_link_list_url: "resources/templates/links/list.js",
            external_image_list_url: "resources/templates/images/list.js",
            media_external_list_url: "resources/templates/media/list.js",


            extjsfilemanager_handlerurl: '../../BrowserHandler.ashx',

            extjsfilemanager_extraparams: { param1: 'value1', param2: 'value2' },
            style_formats: [
                    { title: 'Bold text', inline: 'b' },
                    { title: 'Red text', inline: 'span', styles: { color: '#ff0000' } },
                    { title: 'Red header', block: 'h1', styles: { color: '#ff0000' } },
                    { title: 'Example 1', inline: 'span', classes: 'example1' },
                    { title: 'Example 2', inline: 'span', classes: 'example2' },
                    { title: 'Table styles' },
                    { title: 'Table row 1', selector: 'tr', classes: 'tablerow1' }
            ]
           
            
        });
        flag = false;
    }

</script>