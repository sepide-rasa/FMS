@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
@model IEnumerable<NewFMS.WCF_Common.OBJ_HistoryTahsilat>
@(Html.X().Window().Modal(true)
.Width(500)//.Height(220)
    .Title("تغییر وضعیت تحصیلات")
    .ID("ChangeTahsilatStatus")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel().Border(false)
        .KeyMap(Html.X().KeyMap()
            .ID("ChangeTahsilatStatusMap")
            .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                .Handler("SaveChangeTahsilatStatus(); ")
                );

            }))

        .TitleAlign(Ext.Net.TitleAlign.Center)
        .Items(
                X.Panel().Border(false)
                    .Layout(Ext.Net.LayoutType.VBox)
                        .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                            .DefaultButton("btn")
            .Buttons(
                    X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8")
                   .Listeners(l =>
                   {
                       l.Click.Handler = "SaveChangeTahsilatStatus();";

                   })
                       .ItemID("btnSave")
                ,
                    X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil).Listeners(l => { l.Click.Handler = "EditTahsilatStatus();"; }),
                    X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete).Listeners(l => { l.Click.Handler = "DeleteChangeTahsilatStatus();"; }),
                X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                    .OnClientClick("App.ChangeTahsilatStatus.destroy()")
            ).Border(false).ButtonAlign(Ext.Net.Alignment.Center)
            .Items(
                    X.FieldSet().Border(true).Title("اطلاعات وضعیت تحصیلات")
                .Center()
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                                .Defaults(new { Margin = 2 })
                    .Items(
                         X.Hidden()
                                    .ItemID("fldId"),
                            X.Label("تاریخ تغییر:"),
                    X.PDateField()
                            .ItemID("txtTahsilatStatusChangeDate")
                                     .MaskRe("/[0-9 /]/")
        // .FieldLabel("تاریخ تغییر")
        //   .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا تاریخ را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .AutoFocus(true),
                               X.Label("مقطع تحصیلی:").ItemID("LblCboMadrak"),
                                X.ComboBox()
                                    .AllowBlank(false)
                                    .ItemID("CboMadrak")
                                    .TypeAhead(true)
                                    .BlankText("لطفا مقطع تحصیلی را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .EmptyText("مقطع تحصیلی ...")
                                    .Editable(false)
        //  .SelectedItems(new { Value = "4" })
                                    .Store(X.Store()
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                            )
                                        .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetMadrakTahsili"))
                                            .Reader(X.JsonReader().Root("data"))
                                            )
                                    ),
                                    X.Label("رشته تحصیلی:").ItemID("LblCboReshteTahsili"),
                                X.ComboBox()
                                    .AllowBlank(false)
                                    .ItemID("CboReshteTahsili")
                                    .TypeAhead(true)
                                    .BlankText("لطفا رشته تحصیلی را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .Editable(true)
                                    .EmptyText("رشته تحصیلی ...")
                                    .Store(X.Store()
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                            )
                                        .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetReshteh"))
                                            .Reader(X.JsonReader().Root("data"))
                                            )
                                    )
                    )

                ), X.GridPanel()
        //.TopBar(
        //                    Html.X().Toolbar()
        //                    .Items(
        //                        X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).Listeners(l => { l.Click.Handler = "SaveChangeStatus();"; }),
        //                        X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil).Listeners(l => { l.Click.Handler = "EditPassAndaz();"; }),
        //                        //X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete).Listeners(l => { l.Click.Handler = "DeleteChangeStatus();"; }),
        //                        X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).Listeners(l => { l.Click.Handler = "App.ChangeStatus.destroy();"; })

                //                    )
        //                        )
                                        .BottomBar(X.PagingToolbar())
                                .Height(290)
                                        .ItemID("GridTahsilatStatus")
                                    .Store(
                                        X.StoreForModel().AutoLoad(true)
                                                        .Listeners(l => l.DataChanged.Handler = "App.ChangeTahsilatStatus.queryById('GridTahsilatStatus').selModel.refresh();")
                                        .Proxy(Html.X().AjaxProxy()
                                            .Url(Url.Action("ReadHistoryTahsilat"))
                                            .Reader(Html.X().JsonReader().Root("data"))
                                                .ExtraParams(ex =>
                                                {
                                                    ex.Add(new { EmployeeId = @ViewBag.EmployeeId });

                                                })
                                                )
                                        .PageSize(20)
                                        .RemotePaging(true)
                                        .RemoteFilter(true)
                                    )
                                .View(
                                    Html.X().GridView().LoadingText("در حال بارگذاری...")
                                    .RTL(true)
                                    )
                                        .Plugins(X.FilterHeader().Remote(true))
                                .ColumnModel(
                                        Html.X().RowNumbererColumn(),
                                        Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                        Html.X().Column().DataIndex(Model, m => m.fldEmployeeId).Text("کد شخص").Flex(1).Hidden(true),
                                        Html.X().Column().DataIndex(Model, m => m.fldMadrakId).Text("کد مدرک").Flex(1).Hidden(true),
                                        Html.X().Column().DataIndex(Model, m => m.fldReshteId).Text("کد رشته").Flex(1).Hidden(true),
                                        Html.X().Column().DataIndex(Model, m => m.fldTarikh).Text("تاریخ").Flex(1),
                                        Html.X().Column().DataIndex(Model, m => m.fldTitleMadrak).Text("مقطع تحصیلی").Flex(1),
                                        Html.X().Column().DataIndex(Model, m => m.fldTitleReshte).Text("رشته تحصیلی").Flex(2)
                        )
                                .SelectionModel(
                                    Html.X().RowSelectionModel()
                                        .Mode(Ext.Net.SelectionMode.Single)
                        )

            )
        )
)

<script type="text/javascript">

    function EditTahsilatStatus() {
        var SelectedRow = App.ChangeTahsilatStatus.queryById('GridTahsilatStatus').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldId != 0) {
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/Personeli/PersonalInfo/TahsilatDetail',
                    params: {
                        Id: SelectedRow.data.fldId
                    },
                    success: function (data) {
                        if (data.Err == 1) {
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "اطلاعات شخص مورد نظر در حکم شخص استفاده شده است لذا شما اجازه ویرایش ندارید.",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                        else {
                            var txtTahsilatStatusChangeDate = App.ChangeTahsilatStatus.queryById('txtTahsilatStatusChangeDate');
                            txtTahsilatStatusChangeDate.setValue(data.fldTarikh);
                            var CboMadrak = App.ChangeTahsilatStatus.queryById('CboMadrak');
                            CboMadrak.setValue(data.fldMadrakId);
                            var CboReshteTahsili = App.ChangeTahsilatStatus.queryById('CboReshteTahsili');
                            CboReshteTahsili.setValue(data.fldReshteId);
                            var fldId = App.ChangeTahsilatStatus.queryById('fldId');
                            fldId.setValue(data.fldId);
                        }
                        Ext.net.Mask.hide();
                    }
                });
            }

        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveChangeTahsilatStatus() {
        if (!App.ChangeTahsilatStatus.active) return false;

            var fldId = App.ChangeTahsilatStatus.queryById('fldId');
            var CboMadrak = App.ChangeTahsilatStatus.queryById('CboMadrak');
            var CboReshteTahsili = App.ChangeTahsilatStatus.queryById('CboReshteTahsili');
            var txtStatusChangeDate = App.ChangeTahsilatStatus.queryById('txtTahsilatStatusChangeDate');

            Ext.net.DirectMethod.request({
                url: '/Personeli/PersonalInfo/SaveTahsilatStatus',
                params: {
                    fldId: fldId.getValue(),
                    fldMadrakId: CboMadrak.getValue(),
                    fldReshteId: CboReshteTahsili.getValue(),
                    fldEmployeeId: '@ViewBag.EmployeeId',
                    fldTarikh: txtStatusChangeDate.rawValue
                },
                success: function (data) {
                    var ic =Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon:ic,
                        buttons: Ext.MessageBox.OK
                    });

                    App.PersonalInfo.queryById('PersonalInfoGrid').store.load();
                    App.ChangeTahsilatStatus.queryById('GridTahsilatStatus').store.load();
                }

            });
    }

    function DeleteChangeTahsilatStatus() {
        var SelectedRow = App.ChangeTahsilatStatus.queryById('GridTahsilatStatus').selModel.getLastSelected();
        if (SelectedRow != null) {
            if (SelectedRow.data.fldId != 0) {
                Ext.MessageBox.show({
                    title: "هشدار",
                    msg: "آیا برای حذف مطمئن هستید؟",
                    icon: Ext.MessageBox.WARNING,
                    buttons: Ext.MessageBox.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                            Ext.net.DirectMethod.request({
                                url: '/Personeli/PersonalInfo/DeleteTahsilatStatus',
                                params: {
                                    id: SelectedRow.data.fldId
                                },
                                success: function (data) {
                                    var ic = Ext.MessageBox.INFO;
                                    if (data.Er == 1)
                                        ic = Ext.MessageBox.ERROR;
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: ic,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    App.ChangeTahsilatStatus.queryById('GridTahsilatStatus').store.load()
                                }
                            });
                            Ext.net.Mask.hide();
                            ClearChangeTahsilatStatus();
                        }
                    }
                });
            }
            
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function EnterNext() {
        var keyfield = App.ChangeTahsilatStatus.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();
    }
</script>