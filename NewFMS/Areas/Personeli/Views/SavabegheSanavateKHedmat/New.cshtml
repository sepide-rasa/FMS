@model IEnumerable<NewFMS.WCF_Personeli.OBJ_SavabegheSanavateKHedmat>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net.Utilities
@using Ext.Net;
@{

    var X = Html.X();
}
<style>
    td {
        text-align: left;
    }
</style>



@(X.Window().Title("ثبت سوابق سنوات خدمت").Modal(true).Border(false).Listeners(li => li.AfterRender.Handler = "LoadSavabegheSanavateKHedmat();")
    .ID("NewSavabegheSanavateKHedmat")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
          .Width(550)
        // .Height(580)
    .Items(
            X.FormPanel()
                .ButtonAlign(Ext.Net.Alignment.Center)
        .Border(false)
        .KeyMap(Html.X().KeyMap()
        .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
        .Binding(b =>
        {
            b.Add(Html.X().KeyBinding()
            .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
            .Handler("SaveSavabegheSanavateKHedmat(); ")
            );

        }))
        .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
        .Layout(Ext.Net.LayoutType.VBox)
        .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
        .Buttons(
            X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8")
            .Listeners(l =>
            {
                l.Click.Handler = "SaveSavabegheSanavateKHedmat();";

            })
        //.ItemID("btnSave"),
        //X.Button().Text("محاسبه مجدد").Icon(Ext.Net.Icon.ArrowRefresh)
        //.Listeners(l =>
        //{
        //    l.Click.Handler = "Calc();";

            //})
            .ItemID("btnRefresh"),
            X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                .OnClientClick("App.NewSavabegheSanavateKHedmat.destroy()")
        )
        .Items(
             X.FieldSet().ItemID("Panel").Title("اطلاعات سوابق سنوات خدمت")
            .Layout(Ext.Net.LayoutType.Table)
            .Border(true)
            .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
            .Defaults(new { Margin = 2 })
            .Items(
                   X.Hidden().ItemID("fldId")
                , X.Label().Text("نام و نام خانوادگی:")
                    , X.TextField()
                        .ItemID("txtName").Width(170)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .AllowBlank(true)
                        , X.Label().Text("کد ملی:")
                        , X.TextField()
                        .ItemID("txtNationalCode").Width(170)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .AllowBlank(true)
                        , X.Label().Text("شماره پرسنلی:")
                        , X.TextField()
                        .ItemID("txtShomarePersoneli").Width(170)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .AllowBlank(true).Width(170)
                ,X.Label().Text("نوع:")
                 , X.ComboBox()
                .ItemID("CboType")
                .LabelAlign(Ext.Net.LabelAlign.Right)
                .Editable(false)
                .TypeAhead(true)
                .AutoFocus(true)
                .BlankText("لطفا نوع را انتخاب کنید.")
                .QueryMode(DataLoadMode.Local)
                .TriggerAction(TriggerAction.All)
                .EmptyText("نوع")
                .Items(
                    new ListItem("خدمت سربازي", "0"),
                    new ListItem("انتقالي از ساير سازمان ها", "1")
                    ).Width(170)
                .SelectedItems(new { Value = "0" })
                  , X.Label().Text("از تاریخ:")
                    , X.PDateField()
                    .ItemID("txtAzTarikh")
                        .AllowBlank(false)
                                     .MaskRe("/[0-9 /]/")
                    .Listeners(l => l.Focus.Handler = "ChangeAzTarikh();")
                    .BlankText("لطفا از تاریخ را وارد کنید.")
                     .LabelAlign(Ext.Net.LabelAlign.Right).Width(170)
                    , X.Label().Text("تا تاریخ:")
                    , X.PDateField()
                     .ItemID("txtTaTarikh").Width(170)
                        .AllowBlank(false)
                                     .MaskRe("/[0-9 /]/")
                    .Listeners(l => l.Focus.Handler = "ChangeTaTarikh ();")
                    .BlankText("لطفا تا تاریخ را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Right)



            )
        )
    )
)

<script type="text/javascript">
    var IsKargar = 0;

    function ChangeTaTarikh() {
        var txtAzTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh');
        txtTaTarikh.setMinValue(txtAzTarikh.rawValue);
        txtTaTarikh.minText = "تا تاریخ باید بعد از تاریخ " + txtAzTarikh.rawValue + "باشد";

    }
    function ChangeAzTarikh() {
        var txtAzTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh');
        /*var fldTarikh = new Date('ViewBag.fldTarikh');*/
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "از تاریخ باید قبل از تا تاریخ " + txtTaTarikh.rawValue + "باشد";

    }

    function LoadSavabegheSanavateKHedmat() {
        var CboType = App.NewSavabegheSanavateKHedmat.queryById('CboType');
        if ('@ViewBag.Gender' == "0") {
            CboType.setReadOnly(true);
            CboType.setValue("1");
        }
        else {
            CboType.setReadOnly(false);
            CboType.setValue("0");
        }

        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Personeli/SavabegheSanavateKHedmat/Details',
                params: {
                    Id: '@ViewBag.Id'
                },
                success: function (data) {
                    var txtName = App.NewSavabegheSanavateKHedmat.queryById('txtName');
                    txtName.setValue(data.fldName);
                    App.NewSavabegheSanavateKHedmat.queryById('txtName').setReadOnly(true);
                    var txtNationalCode = App.NewSavabegheSanavateKHedmat.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    App.NewSavabegheSanavateKHedmat.queryById('txtNationalCode').setReadOnly(true);
                    var txtShomarePersoneli = App.NewSavabegheSanavateKHedmat.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    App.NewSavabegheSanavateKHedmat.queryById('txtShomarePersoneli').setReadOnly(true);
                    
                    CboType.setValue(data.fldNoeSabeghe);
                    var txtAzTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh');
                    txtAzTarikh.setValue(data.fldAzTarikh);
                    var txtTaTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh');
                    txtTaTarikh.setValue(data.fldTaTarikh);
                    var fldId = App.NewSavabegheSanavateKHedmat.queryById('fldId');
                    fldId.setValue(data.fldId);
                    Ext.net.Mask.hide();

                }
            });
        }
        else {
            var txtAzTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh');
            var txtTaTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh');
            var fldId = App.NewSavabegheSanavateKHedmat.queryById('fldId');
            
            CboType.validate();
            txtAzTarikh.validate();
            txtTaTarikh.validate();
           
            Ext.net.DirectMethod.request({
                url: '/Personeli/SavabegheSanavateKHedmat/DetailsHeader',
                params: {
                    Id: '@ViewBag.PersonalId'
                },
                success: function (data) {

                    var txtName = App.NewSavabegheSanavateKHedmat.queryById('txtName');
                    txtName.setValue(data.fldName);
                    App.NewSavabegheSanavateKHedmat.queryById('txtName').setReadOnly(true);
                    var txtNationalCode = App.NewSavabegheSanavateKHedmat.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    App.NewSavabegheSanavateKHedmat.queryById('txtNationalCode').setReadOnly(true);
                    var txtShomarePersoneli = App.NewSavabegheSanavateKHedmat.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    App.NewSavabegheSanavateKHedmat.queryById('txtShomarePersoneli').setReadOnly(true);
                }
            });
        }
    }


    function SaveSavabegheSanavateKHedmat() {
        var CboType = App.NewSavabegheSanavateKHedmat.queryById('CboType');
        var txtAzTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh');
        var fldId = App.NewSavabegheSanavateKHedmat.queryById('fldId');
        var er = false;

        if (CboType.validate() == false) {
            er = true;
        }

        if (er == true)
            return;
        var type = false;
        if (CboType.getValue() == "1")
            type = true;
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Personeli/SavabegheSanavateKHedmat/Save',
            params: {
                fldId: fldId.getValue(),
                fldPersonalId:'@ViewBag.PersonalId',
                fldNoeSabeghe: type,
                fldAzTarikh: txtAzTarikh.rawValue,
                fldTaTarikh: txtTaTarikh.rawValue
            },
            success: function (data) {
                Ext.net.Mask.hide();
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ReloadAshkhasSavabegheSanavate();
                if (data.Er != 1)
                    ClearSavabegheSanavateKHedmat();
            }

        });
    }

    function ClearSavabegheSanavateKHedmat() {
        App.NewSavabegheSanavateKHedmat.queryById('txtAzTarikh').setValue("");
        App.NewSavabegheSanavateKHedmat.queryById('txtTaTarikh').setValue("");
    }

    function EnterNext() {
        var keyfield = App.NewSavabegheSanavateKHedmat.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling().nextSibling();
        nextfld.focus();
        nextfld.selectText();

    }
</script>