@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    td {
        text-align: left;
    }
</style>



@(Html.X().Panel()
    .Closable(true)
    .Listeners(l => l.Render.Fn = "addKeyMapListKhamKarkard")
    .Border(false)
    .CloseAction(CloseAction.Destroy)
    .Listeners(l => l.AfterRender.Handler = "setCboCostCenter()")
    .Title("لیست خام کارکرد")
    .Layout(LayoutType.Fit)
    .ID("RptListKhamKarkard")
    .Items(
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.Panel()
                .Border(false)
                .ButtonAlign(Alignment.Center)
                .Buttons(
                    Html.X().Button().ItemID("BtnPr")
                        .Text("چاپ")
                        .Icon(Ext.Net.Icon.Printer)
                            .Listeners(l => l.Click.Handler = "PrintRptListKhamKarkard(1)"),
                    Html.X().Button()
                        .Text("خروجی اکسل")
                        .Icon(Ext.Net.Icon.PageExcel)
                            .Listeners(l => l.Click.Handler = "PrintRptListKhamKarkard(2)"),
                    Html.X().Button()
                        .Text("خروج")
                        .Icon(Ext.Net.Icon.DoorOut)
                            .Listeners(l => l.Click.Handler = "destroyWinListKhamKarkard()")
                )
                .Items(
                    X.FieldSet()
                        .Border(true)
                        //.PaddingSpec("0 7px 7px 7px")
                        .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 8 })
                        .Defaults(new { Margin = 2 })
                        .Items(
                            X.Label("سال:").ItemID("lblYear"),
                            X.ComboBox()
                                .ItemID("CboYear")
                                .Editable(true)
                                .ForceSelection(true)
                                .TypeAhead(true)
                                .AllowBlank(false)
                                .BlankText("لطفا سال را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .Listeners(l =>
                                {
                                    l.AfterRender.Handler = "setValueYearRptListPar()";
                                    l.Select.Handler = "setYearClassRptListPar()";
                                })
                                .Items(
                                    new ListItem("1387", "1387"),
                                    new ListItem("1388", "1388"),
                                    new ListItem("1389", "1389"),
                                    new ListItem("1390", "1390"),
                                    new ListItem("1391", "1391"),
                                    new ListItem("1392", "1392"),
                                    new ListItem("1393", "1393"),
                                    new ListItem("1394", "1394"),
                                    new ListItem("1395", "1395"),
                                    new ListItem("1396", "1396"),
                                    new ListItem("1397", "1397"),
                                    new ListItem("1398", "1398"),
                                    new ListItem("1399", "1399"),
                                    new ListItem("1400", "1400"),
                                    new ListItem("1401", "1401"),
                                    new ListItem("1402", "1402"),
                                    new ListItem("1403", "1403")
                            ),
                            X.Label("ماه:").ItemID("lblMonth"),
                            X.ComboBox()
                                .ItemID("CboMonth")
                                .Editable(true)
                                .TypeAhead(true)
                                .AllowBlank(false)
                                .ForceSelection(true)
                                .BlankText("لطفا ماه را انتخاب کنید.")
                                .Listeners(l =>
                                {
                                    l.AfterRender.Handler = "setValueMonthRptListPar()";
                                    l.Select.Handler = "setMonthClassRptListPar()";
                                })
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .Items(
                                    new ListItem("فروردین", "01"),
                                    new ListItem("اردیبهشت", "02"),
                                    new ListItem("خرداد", "03"),
                                    new ListItem("تیر", "04"),
                                    new ListItem("مرداد", "05"),
                                    new ListItem("شهریور", "06"),
                                    new ListItem("مهر", "07"),
                                    new ListItem("آبان", "08"),
                                    new ListItem("آذر", "09"),
                                    new ListItem("دی", "10"),
                                    new ListItem("بهمن", "11"),
                                    new ListItem("اسفند", "12")
                                ),
                            X.Label().Text("نوع:").ItemID("lblType"),
                            X.ComboBox()
                                .ItemID("CboType")
                                .Editable(false)
                                .TypeAhead(true)
                                .BlankText("لطفا نوع را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .Items(
                                    new ListItem("گروهی", "0"),
                                        new ListItem("براساس مرکز هزینه", "1"),
                                    new ListItem("براساس محل خدمت", "2")
                                    )
                                .SelectedItems(new { Value = "0" })
                                .Listeners(l => l.Select.Handler = "ChangeTypeListKhamKarkard();"),
                            X.Label("مرکز هزینه:").ItemID("lblCostCenterType"),
                            X.ComboBox()
                                .ItemID("CboCostCenterType")
                                .Editable(true)
                                .TypeAhead(true)
                                .QueryMode(DataLoadMode.Local)
                                .ForceSelection(true)
                                .AllowBlank(false)
                                .BlankText("لطفا مرکز هزینه را انتخاب کنید.")
                                .TriggerAction(TriggerAction.All)
                                .DisplayField("fldName")
                                .ValueField("fldId")
                                .EmptyText("مرکز هزینه")
                                .ValueNotFoundText("Loading...")
                                .Store(X.Store().Listeners(ls => ls.Load.Handler = "setValueCostCenterTypeListP()")
                                    .Model(X.Model()
                                        .IDProperty("fldId")
                                        .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                        )
                                    )
                                    .Proxy(X.AjaxProxy()
                                        .Url(Url.Action("GetCostCenter"))
                                        .Reader(X.JsonReader().Root("data"))
                                    )
                                )
                    ,X.Label()
                        .Text("نوع لیست")
                    , X.ComboBox()
                        .ItemID("CboTypeList")
                        .LabelAlign(Ext.Net.LabelAlign.Right)
                        .Editable(false)
                        .TypeAhead(true)
                        .BlankText("لطفا نوع لیست را انتخاب کنید.")
                        .QueryMode(DataLoadMode.Local)
                        .TriggerAction(TriggerAction.All)
                        //.Listeners(l => l.Select.Handler = "ChangeTypeHokm();")
                        .EmptyText("لیست")
                        .Items(
                            new ListItem("بدون اطلاعات", "1"),
                                new ListItem("با اطلاعات", "2")
                                )
                        .SelectedItems(new { Value = "1" })
                                 ,X.TreePanel()
                            .ID("TreeReports")
                                    .AutoScroll(true)
                                    .Width(300)
                                    .ColSpan(8)
                                    .Height(100)
                                    .UseArrows(true)
                                    .Border(false)
                                        .Store(
                    Html.X().TreeStore()
                        .Proxy(
                                    Html.X().AjaxProxy().Url(Url.Action("Node"))
                        )
                )

                                    .Listeners(a =>
                                    {
                                        a.ItemClick.Handler = "GetIdChartOrgan(record)";
                                        a.AfterRender.Handler = "this.getRootNode().expand();";
                                       a.BeforeLoad.Fn = "nodeLoad";
                                    })
                       .Root(Html.X().Node().NodeID("0").Text("چارت سازمانی"))

                                    .View(
                                    X.TreeView()
                                    .Plugins(
                                    X.TreeViewDragDrop().AppendOnly(true).ContainerScroll(true)

                                )
                        )
                            
                        )),
                Html.X().Panel()
                    .Border(true)
                    .Listeners(L => L.AfterRender.Handler = "setSizeRptPanelListKarkard()")
                    .AutoScroll(true)
                        .ItemID("RptPanelListKarkard")
        //.Html("<center><object style='width: 1200px;height: 550px;border: 1px solid #ccc;' type='application/pdf' data='/RptListKhadamatDarmani/GeneratePDF?Year=" + ViewBag.Year + "&Month=" + ViewBag.Month + "&nobatPardakht=" + ViewBag.nobatPardakht + "'></object></center>")
            )

)
)
<script type="text/javascript">
    function setSizeRptPanelListKarkard() {
        Ext.getCmp('RptListKhamKarkard').queryById('RptPanelListKarkard').setSize(App.PersoneliWin.getWidth() - 20, App.PersoneliWin.getHeight() - 165);
    }
    var NodeId = 0;
    var nodeLoad = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/KarkardMahaneGroup/NodeLoad',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };
    function GetIdChartOrgan(record) {
        NodeId = record.getId();
    };
    function destroyWinListKhamKarkard() {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        Ext.getCmp(tabId).destroy();
    }
    function setMonthClassRptListPar() {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetMonthClass',
            params: {
                Month: Ext.getCmp(tabId).queryById("CboMonth").getValue()
            }
        });
    }
    function setCboCostCenter() {
        App.RptListKhamKarkard.queryById('CboCostCenterType').hide();
        App.RptListKhamKarkard.queryById('lblCostCenterType').hide();
        App.RptListKhamKarkard.queryById('TreeReports').hide();
    }
    function setYearClassRptListPar() {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetYearClass',
            params: {
                Year: Ext.getCmp(tabId).queryById("CboYear").getValue()
            }
        });
    }
    function ChangeTypeListKhamKarkard() {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        var CboType = Ext.getCmp(tabId).queryById('CboType');
        var CboCostCenterType = Ext.getCmp(tabId).queryById('CboCostCenterType');
        var lblCostCenterType = Ext.getCmp(tabId).queryById('lblCostCenterType');
        var TreeReports = Ext.getCmp(tabId).queryById('TreeReports');

        if (CboType.getValue() == "0") {
            CboCostCenterType.hide();
            lblCostCenterType.hide();
            TreeReports.hide();
        }
        else if (CboType.getValue() == "1") {
            CboCostCenterType.show();
            lblCostCenterType.show();
            TreeReports.hide();
        }
        else if (CboType.getValue() == "2") {
            CboCostCenterType.hide();
            lblCostCenterType.hide();
            TreeReports.show();
        }
    }
    function setValueMonthRptListPar() {
        var CboMonth = Ext.getCmp('RptListKhamKarkard').queryById('CboMonth');
        CboMonth.setValue('@ViewBag.Month');
    }
    function setValueYearRptListPar() {
        var CboYear = Ext.getCmp('RptListKhamKarkard').queryById('CboYear');
        CboYear.setValue('@ViewBag.Year');
    }

    function setValueCostCenterTypeListP() {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        if ('@ViewBag.CostCenter' == "") {
            var CboCostCenterType = Ext.getCmp(tabId).queryById('CboCostCenterType');
            CboCostCenterType.setValue(CboCostCenterType.store.getAt(0));
        }
        else {
            var CboCostCenterType = Ext.getCmp(tabId).queryById('CboCostCenterType');
            CboCostCenterType.setValue('@ViewBag.CostCenter');
        }
    }
    function PrintRptListKhamKarkard(state) {
        var tabId = App.FirstTabPersoneli.activeTab.id;
        var CboYear = Ext.getCmp(tabId).queryById('CboYear');
        var CboCostCenterType = Ext.getCmp(tabId).queryById('CboCostCenterType');
        var CboType = Ext.getCmp(tabId).queryById('CboType');
        var CboMonth = Ext.getCmp(tabId).queryById('CboMonth');
        var CboTypeList = Ext.getCmp(tabId).queryById('CboTypeList');
        var height = App.PersoneliWin.getHeight() - 246;
        var height2 = App.PersoneliWin.getHeight() - 273;
        if ((CboType.validate() == true && CboType.getValue() == "0" && CboYear.validate() == true && CboMonth.validate() == true) ||
                (CboType.validate() == true && CboType.getValue() == "1" && CboYear.validate() == true && CboMonth.validate() == true && CboCostCenterType.validate() == true)) {
            var costCenterId = "0";
            var costCenterName = "تمام مراکز";
            if (CboType.getValue() == "1") {
                costCenterId = CboCostCenterType.getValue();
                costCenterName = CboCostCenterType.getDisplayValue();
                if (state == 1) {
                    Ext.getCmp(tabId).queryById('RptPanelListKarkard').update("<center><object class='se-pre-con' style='width: 100%;height:" + height2 + "px;border: 1px solid #ccc;' type='application/pdf' data='/Personeli/Reports/GeneratePDFListKhamKarkard?Year=" + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=1'></object></center>");
                }
                else {
                    window.location.href = '@Url.Content("~/Personeli/Reports/GeneratePDFListKhamKarkard/")' + '?Year=' + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=2";
                }
            }
            else if (CboType.getValue() == "2") {
                if (NodeId == 0) {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "لطفا چارت سازمانی را انتخاب کنید.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                    return;
                }
                costCenterId = NodeId;
                costCenterName = CboCostCenterType.getDisplayValue();
                if (state == 1) {
                    Ext.getCmp(tabId).queryById('RptPanelListKarkard').update("<center><object class='se-pre-con' style='width: 100%;height:" + height2 + "px;border: 1px solid #ccc;' type='application/pdf' data='/Personeli/Reports/GeneratePDFListKhamKarkard?Year=" + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=1'></object></center>");
                }
                else {
                    window.location.href = '@Url.Content("~/Personeli/Reports/GeneratePDFListKhamKarkard/")' + '?Year=' + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=2";
                }
            }
            else {
                if (state == 1) {
                    Ext.getCmp(tabId).queryById('RptPanelListKarkard').update("<center><object class='se-pre-con' style='width: 100%;height:" + height + "px;border: 1px solid #ccc;' type='application/pdf' data='/Personeli/Reports/GeneratePDFListKhamKarkard?Year=" + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=1'></object></center>");
                }
                else {
                    window.location.href = '@Url.Content("~/Personeli/Reports/GeneratePDFListKhamKarkard/")' + '?Year=' + CboYear.getValue() + "&Month=" + CboMonth.getValue() + "&costCenter_ChartId=" + costCenterId + "&costCenterName=" + costCenterName + "&type=" + CboType.getValue() + "&typeList=" + CboTypeList.getValue() + "&state=2";
                }
            }
        }
        else {
            return;
        }
    }
    var addKeyMapListKhamKarkard = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.RptListKhamKarkard.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "CboCostCenterType") {
                        nextfld = App.RptListKhamKarkard.queryById('BtnPr');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>