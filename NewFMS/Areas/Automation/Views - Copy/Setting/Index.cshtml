@model IEnumerable<NewFMS.WCF_Automation.OBJ_Setting>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{ var X = Html.X();}
<style>
    #fieldset1 legend {
        text-align: right;
        font-family: Tahoma !important;
    }
        #fieldset2 legend {
        text-align: right;
        font-family: Tahoma !important;
    }
        #fieldsetax legend {
        text-align: right;
        font-family: Tahoma !important;
    }
</style>
<br />
@(Html.X().Panel()
            .ID("Setting")
            .Title("تنظیمات")
            .AutoScroll(true)
         .Listeners(li => { li.AfterRender.Handler = "Load();"; })
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .Border(false)
       .Items(
    X.Panel().Border(true).Items(X.Label())
   .AutoScroll(true)
,
        X.Panel().Border(false).Buttons(
            X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk)
            .Listeners(l => { l.Click.Handler = "Save();"; })
        //, X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
        //         .Listeners(l => { l.Click.Handler = "Load();"; })
        //, X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
        //        .Listeners(l => { l.Click.Handler = "DeleteSetting();"; })
        //, X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help).Listeners(l => { l.Click.Handler = "HelpSetting();"; })
            , X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)
                        .OnClientClick("App.Setting.destroy()")
        ).ButtonAlign(Ext.Net.Alignment.Center)


        .Items(
            X.FormPanel()
           .Border(false)
                  .AutoScroll(true)

                .Layout(LayoutType.VBox)
                         .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })

                .Items(
                X.FieldSet().Border(true)
                    .Title("تنظیمات")
                         .Defaults(new { Margin = 2 })
                        .Layout(LayoutType.Table)
                      .AutoScroll(true)
                .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                    .Items(
                    X.Hidden().ItemID("fldID"),
                        X.Hidden().ItemID("fldOrganID"),
                            X.Label("نام ارگان:").RTL(true),
                                X.TextField()
                                .ItemID("txtOrgan").Width(300)
                                .ColSpan(3)
                                .ReadOnly(true)
        //.Listeners(l =>
        //{
        //    l.AfterRender.Handler = "App.Setting.queryById('txtOrgan').icon.dom.classList.add('custom-icon');";
        //})
            .MaxLength(100)
            .EnforceMaxLength(true)
            .AllowBlank(false)
            .AutoFocus(true)
                                ,

                                    X.Label("آدرس پست الکترونیک:").RTL(true),
                                    X.TextField().Width(300)
                                    .ItemID("txtEmailAddress")
        //.FieldStyle("direction:ltr;")
                                    .EmptyText("Example@yahoo.com")
                                    .MaxLength(1000)
        //.ColSpan(1)
                                    .EnforceMaxLength(true)
        // .MaskRe("/[A-Z a-z @ . 0-9 . _]/")
                                    .AllowBlank(false)
                                    .BlankText("لطفا آدرس پست الکترونیکی را وارد کنید.")
                                    .AutoFocus(true),


                                X.Label("رمزعبور پست الکترونیک:").RTL(true),
                                    X.TextField().Width(300)
                                    .ItemID("txtEmailPassword")
                                    .InputType(Ext.Net.InputType.Password)
                                    .MaxLength(100)
        //.ColSpan(10)
                                    .EnforceMaxLength(true)
                                    .MaskRe("[a-z,A-Z]")
                                    .AllowBlank(false)
                                        .BlankText("لطفارمزعبور پست الکترونیک را وارد کنید.")
                                           .AutoFocus(true),

        //                              X.FieldSet().Border(false)
        //   .LayoutConfig(new TableLayoutConfig { Columns = 2})
        //      .Defaults(new { Margin = 4})
        //      .Layout(LayoutType.Table)
        //.Items(
        // X.FieldSet().Border(false)
        //.LayoutConfig(new TableLayoutConfig { Columns =2 }),
        //    Html.X().Label("SSL"),
                                                                    Html.X().Checkbox().ItemID("chkSSL").MarginSpec("0 0 0 100px"),//.FieldLabel("SSL").ColSpan(2).RTL(false).LabelSeparator(""),
                                                                    Html.X().Label("SSL").MarginSpec("0 300px 0 0px"),

         //       X.FieldSet().Border(true)
        //.LayoutConfig(new TableLayoutConfig { Columns = 2}),
                                                 X.Label("مسیر دریافت فکس ها:"),
                                                 X.TextField()
                                            .ItemID("txtFaxPath").Width(300)
                                        .MaxLength(100)
                                        .EnforceMaxLength(true)
                                        .MaskRe("[a-z,A-Z,_,-,.,0-9,@,/]")
                                        .AllowBlank(false)
                                        .BlankText("لطفا مسیر دریافت فکس ها  را وارد کنید."),
        //)
        //   .AutoFocus(true)

                                //.Items(
        // X.FieldSet().Border(true)
        //.LayoutConfig(new TableLayoutConfig { Columns = 2 })
        // .Items(
        //
                                                    Html.X().Checkbox().ItemID("chkDelFax").MarginSpec("0 0 0 100px"),//.FieldLabel("پاک شدن فکس ها از پوشه اصلی").ColSpan(2).RTL(false).LabelSeparator(""),
                                                       Html.X().Label("پاک شدن فکس ها از پوشه اصلی").MarginSpec("0 150px 0 0px"),
                                                    X.Label("توضیحات:"),
                        X.TextField().ItemID("txtDesc")
                                            .LabelAlign(Ext.Net.LabelAlign.Top)
                                            .Width(300),
        //
                                                        Html.X().Checkbox().ItemID("chkIsSigner").MarginSpec("0 0 0 100px"),//.ColSpan(4).FieldLabel("کاربران امضا کننده پیش فرض باشند ").RTL(false).LabelSeparator("")
                                                Html.X().Label("کاربران امضا کننده پیش فرض باشند ").ColSpan(4).MarginSpec("0 595px 0 0px")
        //)
                                            )
.Items(
     //    X.FieldSet().Border(false).ColSpan(2).ID("fieldset1")
     //.LayoutConfig(new TableLayoutConfig { Columns = 2 })
     //.Items(
                                        X.FieldSet().Border(true).Title("تنظیمات دریافت ایمیل").ColSpan(2).ID("fieldsetax")
                                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                             .Items(
                                X.Label("سرور دریافت ایمیل:"),
                                X.TextField()
                                .ItemID("txtRecieveServer").ColSpan(2).Width(300)
                                .MaxLength(500)
                                .EnforceMaxLength(true)
                                .MaskRe("[a-z,A-Z,_,-,.,0-9,@,/]")
                                .AllowBlank(false)
                                .BlankText("لطفا سرور دریافت ایمیل را وارد کنید.")
                                .AutoFocus(true),

                            X.Label("پورت دریافت ایمیل:"),
                            X.TextField()
                                .ItemID("txtRecievePort").ColSpan(10)
                                .MaxLength(100)
                                .EnforceMaxLength(true)
                                .MaskRe("[0-9]")
                                .AllowBlank(false)
                                .BlankText("لطفا پورت دریافت ایمیل را وارد کنید.")
                                .AutoFocus(true))//)


                           // .Items(
                                    , X.FieldSet().Border(true).Title("تنظیمات ارسال ایمیل").ColSpan(2)
                                         .ID("fieldset2")
                                    .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                            .Items(
                                X.Label("سرور ارسال ایمیل:"),
                                X.TextField()
                                .ItemID("txtSendServer").Width(300)
                                .MaxLength(300)
                                .EnforceMaxLength(true)
                                .MaskRe("[a-z,A-Z,0-9,_,-,@,.,/]")
                                .AllowBlank(false)
                                .BlankText("لطفا سرور ارسال ایمیل را وارد کنید.")
                                .AutoFocus(true),

                                X.Label("پورت ارسال ایمیل:"),
                                X.TextField()
                                .ItemID("txtSendPort")
                                    .MaxLength(100)
                                    .EnforceMaxLength(true)
                                    .MaskRe("[0-9]")
                                    .AllowBlank(false)
                                    .BlankText("لطفا پورت ارسال ایمیل را وارد کنید.")
                                   .AutoFocus(true))//)

                             @*,

                        X.FieldSet()
                            .Border(true).Title("انتخاب عکس(حداکثر حجم مجاز 1MB)").Height(150).ColSpan(2)
                        .ID("fieldsetax")
                        .Defaults(new { Margin = 2 })
                        .Layout(LayoutType.Table)
                        .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                    .Items(
                     X.FormPanel()
                                    .Border(false)
                                    .Layout(LayoutType.VBox)
                                    .ItemID("fieldsetShowFile")
                                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Right })
                                    .Width(346)
        //.Listeners(l => l.AfterRender.Handler = "App.NewHuman.queryById('fieldsetShowFile').setWidth(App.BasicInfWin.getWidth() - 1050)")
                                    .Items(
                                        X.FileUploadField()
                                            .MarginSpec("0 10px 10px 0")
                                            .Icon(Ext.Net.Icon.DiskUpload)
                                            .ButtonOnly(true)
                                            .ButtonText("انتخاب فایل")
                                            .DirectEvents(l =>
                                            {
                                                l.Change.Action = "Upload";
                                                l.Change.Delay = 1000;
                                                l.Change.Before = "if(GotoServerSe==false){return false;}";
                                                l.Change.Success = "hideprogressSe";
                                            })
                                                    .Listeners(l => l.Change.Fn = "showFileSe"),
                                        X.Container()
                                            .Content(@<div id="fi-button-msg" class="Wrap-label" style="width:336px;height:auto; text-align:right;"><b>فایل انتخاب شده:</b></div>)
                                        ),
                                X.Panel()
                                    .Border(false)
                                    .Layout(LayoutType.VBox)
                                    .LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Center})
                                    .Items(
                                        X.Label("پیش نمایش"),
                                        X.Panel()
                                            .Frame(true)
                                            .MarginSpec("3px 0 0 0")
                                            .Layout(LayoutType.Fit)
                                            .Items(
                                        X.Image()
                                                    .ItemID("ImageSetting")
                                            .Flex(1)
                                            .ImageUrl("/Content/Blank.jpg")
                                            .Width(80)
                                            .Height(80)
                                            .Border(true)
                                            .Frame(true)))
                               
                            
                            
                            )*@

                             )
                             ))
                            ))
<script type="text/javascript">
    var OrganName = '@ViewBag.OrganName';
    var IsDel = 0;
    var ImageId = 0;

    @* var GotoServerSe = false;
    var EndUploadSe = false;

    var CheckSe = setInterval(CheckEndSe, 500);

    function CheckEndSe() {
        if (EndUploadSe == true) {
            Ext.net.DirectMethod.request({
                url: '/Automation/Setting/ShowPicUpload',
                success: function (data) {
                    value = "data:image/gif;base64," + data.image;
                    App.Setting.queryById('ImageSetting').setImageUrl(value);
                }
            });
            GotoServerSe = false;
            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndSe);
            EndUploadSe = false;
        }
    }
    var showFileSe = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarSe();
            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png" || v.split('.').pop().toLowerCase() == "jpeg"
                || v.split('.').pop().toLowerCase() == "tif" || v.split('.').pop().toLowerCase() == "tiff" || v.split('.').pop().toLowerCase() == "gif"
                || v.split('.').pop().toLowerCase() == "bmp") {
                if (document.getElementById(id).files[0].size <= 1024000) {
                    GotoServerSe = true;
                    el.update('<b>فایل انتخاب شده: ' + v + '</b>' + "&nbsp;&nbsp;" + '<img id="DeleteActionFileimg6" title="حذف فایل" src="/Content/cancel.png" style="width:15px;height:15px;margin-bottom: -4px;" onclick="javascript:DeleteFileHuman()" />');
                }
                else {
                    clearInterval(CheckEndSe);
                    el.update('<b>فایل انتخاب شده:</b> ');
                    App.Setting.queryById('ImageSetting').setImageUrl("/Content/Blank.jpg");
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "حجم فایل انتخاب شده غیرمجاز است.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                clearInterval(CheckEndSe);
                el.update('<b>فایل انتخاب شده:</b> ');
                App.Setting.queryById('ImageSetting').setImageUrl("/Content/Blank.jpg");
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "فایل انتخاب شده غیرمجاز است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
    };

    var DeleteFileHu = false;
    function DeleteFileHuman() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Automation/Setting/DeleteSessionFile',
            success: function (data) {
                DeleteFileHu = true;
                App.Setting.queryById('ImageSetting').setImageUrl("/Content/Blank.jpg");
                Ext.get('fi-button-msg').update('<b>فایل انتخاب شده:</b>');
                Ext.net.Mask.hide();
            }
        });
    }

    var hideprogressSe = function (Responsdtxt, ResponseObj) {
        if (ResponseObj.IsValid == true) {
            EndUploadSe = true;
        }
        else {
            var el = Ext.get('fi-button-msg');
            GotoServerSe = false;
            clearInterval(CheckEndSe);
            EndUploadSe = false;
            el.update('<b>فایل انتخاب شده:</b> ');
            App.Setting.queryById('ImageSetting').setImageUrl("/Content/Blank.jpg");
            Ext.MessageBox.show({
                title: "خطا",
                msg: ResponseObj.Message,
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    };

    function showProgressBarSe() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
    function HelpSetting() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Automation/Setting/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }*@



    function Load() {

        /*//var SelectedRow = App.Setting.queryById('SettingGrid').selModel.getLastSelected();
           //if (SelectedRow != null) {*/
        Ext.net.DirectMethod.request({
            url: '/Automation/Setting/Details',
            params: {
                OrganId: '@ViewBag.OrganId'
            },
            success: function (data) {
                /*
                App.Setting.queryById('OrganId').setValue(data.fldOrganID);
                App.Setting.queryById('fldID').setValue(data.fldID);
                App.Setting.queryById('txtEmailAddress').setValue(data.fldEmailAddress);
                App.Setting.queryById('txtEmailPassword').setValue(data.fldEmailPassword);
                App.Setting.queryById('txtFaxPath').setValue(data.fldFaxPath);
                App.Setting.queryById('txtRecieveServer').setValue(data.fldRecieveServer);
                App.Setting.queryById('txtSendServer').setValue(data.fldSendServer);
                App.Setting.queryById('txtSendPort').setValue(data.fldSendPort);
                App.Setting.queryById('txtRecievePort').setValue(data.fldRecievePort);
                App.Setting.queryById('txtDesc').setValue(data.fldDesc);
                App.Setting.queryById('chkSSL').setValue(data.fldSSL);
                App.Setting.queryById('chkDelFax').setValue(data.fldDelFax);
                App.Setting.queryById('chkIsSigner').setValue(data.fldIsSigner);*/

                var OrganId = App.Setting.queryById('fldOrganID');
                OrganId.setValue('@ViewBag.OrganId');
                var txtOrgan = App.Setting.queryById('txtOrgan');
                txtOrgan.setValue('@ViewBag.OrganName');
                var txtEmailAddress = App.Setting.queryById('txtEmailAddress');
                txtEmailAddress.setValue(data.fldEmailAddress);
                var txtEmailPassword = App.Setting.queryById('txtEmailPassword');
                txtEmailPassword.setValue(data.fldEmailPassword);
                var txtFaxPath = App.Setting.queryById('txtFaxPath');
                txtFaxPath.setValue(data.fldFaxPath);
                var txtRecieveServer = App.Setting.queryById('txtRecieveServer');
                txtRecieveServer.setValue(data.fldRecieveServer);
                var txtSendServer = App.Setting.queryById('txtSendServer');
                txtSendServer.setValue(data.fldSendServer);
                var txtSendPort = App.Setting.queryById('txtSendPort');
                txtSendPort.setValue(data.fldSendPort);
                var txtRecievePort = App.Setting.queryById('txtRecievePort');
                txtRecievePort.setValue(data.fldRecievePort);
                var txtDesc = App.Setting.queryById('txtDesc');
                txtDesc.setValue(data.fldDesc);
                App.Setting.queryById('chkSSL').setValue(data.fldSSL);
                App.Setting.queryById('chkDelFax').setValue(data.fldDelFax);
                App.Setting.queryById('chkIsSigner').setValue(data.fldIsSigner);
                var fldID = App.Setting.queryById('fldID');
                fldID.setValue(data.fldID);
               /* if (data.FileName != "") {
                    var fldfile = "data:image/gif;base64," + data.Image;
                    App.Setting.queryById('ImageSetting').setImageUrl(fldfile);
                    Ext.get('fi-button-msg').update('<b>فایل انتخاب شده: ' + data.FileName + '</b>' + "&nbsp;&nbsp;" + '<img id="DeleteActionFileimg6" title="حذف فایل" src="/Content/cancel.png" style="width:15px;height:15px;margin-bottom: -4px;" onclick="javascript:DeleteFileHuman()" />');
                }
                else {
                    App.Setting.queryById('ImageSetting').setImageUrl("/Content/Blank.jpg");
                    Ext.get('fi-button-msg').update('<b>فایل انتخاب شده:</b>');
                }


                ImageId = data.fldFileId;*/

                Ext.net.Mask.hide();
            }
        });
    }
    /*
     //else {
     //    Ext.MessageBox.show({
     //        title: "خطا",
     //        msg: "لطفا یک سطر را انتخاب کنید",
     //        icon: Ext.MessageBox.ERROR,
     //        buttons: Ext.MessageBox.OK
     //    });
     //}
     //}*/

    function Save() {
        var OrganId = App.Setting.queryById("fldOrganID");
        var txtEmailAddress = App.Setting.queryById('txtEmailAddress');
        var txtEmailPassword = App.Setting.queryById('txtEmailPassword');
        var txtFaxPath = App.Setting.queryById('txtFaxPath');
        var txtRecieveServer = App.Setting.queryById('txtRecieveServer');
        var txtSendServer = App.Setting.queryById('txtSendServer');
        var txtSendPort = App.Setting.queryById('txtSendPort');
        var txtRecievePort = App.Setting.queryById('txtRecievePort');
        var chkSSL = App.Setting.queryById('chkSSL');
        var chkDelFax = App.Setting.queryById('chkDelFax');
        var chkIsSigner = App.Setting.queryById('chkIsSigner');
        var txtDesc = App.Setting.queryById('txtDesc');
        var fldID = App.Setting.queryById('fldID');
        var er = false;

        if (txtEmailAddress.validate() == false)
            er = true;

        if (txtEmailPassword.validate() == false)
            er = true;

        if (txtRecieveServer.validate() == false)
            er = true;

        if (txtSendServer.validate() == false)
            er = true;

        if (txtSendPort.validate() == false)
            er = true;

        if (txtRecievePort.validate() == false)
            er = true;

        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });

        if (txtEmailAddress.getValue() != "") {
            Ext.net.DirectMethod.request({
                url: '/Automation/Setting/checkEmail',
                params: {
                    Email: txtEmailAddress.getValue()
                },
                success: function (data) {
                    if (data.valid == false) {
                        Ext.net.Mask.hide();
                        Ext.MessageBox.show({
                            title: 'خطا',
                            msg: 'آدرس ایمیل نامعتبر است.',
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    else {
                        Ext.net.DirectMethod.request({
                            url: '/Automation/Setting/Save',
                            params: {
                                fldOrganID: OrganId.getValue(),
                                fldID: fldID.getValue(),
                                fldEmailAddress: txtEmailAddress.getValue(),
                                fldEmailPassword: txtEmailPassword.getValue(),
                                fldRecieveServer: txtRecieveServer.getValue(),
                                fldSendServer: txtSendServer.getValue(),
                                fldSendPort: txtSendPort.getValue(),
                                fldFaxPath: txtFaxPath.getValue(),
                                fldSSL: chkSSL.getValue(),
                                fldDelFax: chkDelFax.getValue(),
                                fldIsSigner: chkIsSigner.getValue(),
                                fldRecievePort: txtRecievePort.getValue(),
                                /*fldFileId: ImageId,*/
                                fldDesc: txtDesc.getValue(),
                                /*IsDel: DeleteFileHu*/
                            },
                            success: function (data) {
                                Ext.net.Mask.hide();
                                var ic = Ext.MessageBox.INFO;
                                if (data.Err == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    Name: data.MsgName,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                            }
                        });
                    }
                }
            })
        }
    }

</script>