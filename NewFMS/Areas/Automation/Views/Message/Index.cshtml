@model IEnumerable<NewFMS.WCF_Automation.OBJ_MessageAttachment>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };

    var ShowIconFile2 = function (value, record) {
        var template = "<img src={0} alt='' title={1} style='width:17px;height:17px;' />";
        return Ext.String.format(template, "data:image/gif;base64," + value, "فایل" + '&nbsp;' + record.record.data.fldPasvand);
    }
</script>
<style>
    .x-grid-group-title {
        text-align: right !important;
    }

    #fieldsetsearchK legend {
        text-align: right;
        font-family: Tahoma !important;
    }
</style>
@(Html.X().Window()
    .Closable(true)
    .CloseAction(CloseAction.Destroy)
    .Layout(LayoutType.Fit)
    .Modal(true)
    .ID("UploadFileMessage")
    .Listeners(l => l.AfterRender.Handler = "setSizeUploadFileMessage();LoadUploadFileMessage()")
    .Width(740)
    .Title("نوشتن متن پیام")
    .ButtonAlign(Alignment.Center)
    .Buttons(
        Html.X().Button()
            .Text("ذخیره و ادامه")
            .Icon(Ext.Net.Icon.Disk)
            .ItemID("btnNext_Save")
            .Listeners(l => l.Click.Handler = "Next_Save()"),
        Html.X().Button()
            .Text("بازگشت")
            .Icon(Ext.Net.Icon.BulletRight)
            .ItemID("btnBack")
            .Hidden(true)
            .Listeners(l => l.Click.Handler = "Back()"),
        Html.X().Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .Listeners(l => l.Click.Handler = "App.UploadFileMessage.destroy()")
    )
    .Items(
        X.Hidden().ItemID("fldHeaderId"),
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .ItemID("pnlOne")
            .Padding(0)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                 Html.X().FieldSet().Border(false)
                        .Center()
                        .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                        .Defaults(new { Margin = 10 })
                        .Items(
                            Html.X().Hidden().ItemID("fldId"),
                              X.Label("عنـــــوان پیـــام:")
                                , Html.X().TextField().ItemID("txtTitle").Width(500).AutoFocus(true)
                                    , Html.X().HtmlEditor().ItemID("txtMatn")
                                    .Width(680).Height(300).ColSpan(2)
                                        .RTL(true)

                                )
            ),
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .ItemID("pnlTwo")
            .Hidden(true)
            .PaddingSpec("0 0 10px 0")
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.FieldSet()
                    .Title("آپلود فایل")
                    .Defaults(new { Margin = 2 })
                    .Border(true)
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                    .Items(
                        X.Label("عنـــــوان فــــایـل:"),
                        X.TextField()
                            .AllowBlank(false)
                            .ItemID("txtTitleFile")
                            .BlankText("لطفا عنوان فایل را وارد کنید")
                            .Listeners(l => l.Change.Handler = "DisableEnableUpload()")
                            .Width(550)
                            .AutoFocus(true)
                            .MaxLength(150)
                            .MinLength(3)
                            .EnforceMaxLength(true),
                        X.FormPanel()
                            .Border(false)
                            .ColSpan(2)
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                            .PaddingSpec("5px 0 0 0")
                            .Items(
                                X.FileUploadField()
                                    .MarginSpec("0 10px 0 0")
                                    .Icon(Ext.Net.Icon.DiskUpload)
                                    .ID("FileDetailUploadField")
                                    .ButtonOnly(true)
                                    .Disabled(true)
                                    .ButtonText("انتخاب فایل")
                                    .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                        l.Change.Delay = 2000;
                                        l.Change.Before = "if(GotoServer==false){return false;}";
                                        l.Change.Success = "hideprogressFileMessage();";
                                    })
                                    .Listeners(l => l.Change.Fn = "showFileMessage"),
                                X.Container()
                                    .Content(@<div id="fi-button-msgMessage" style="width:316px;text-align:right;"><b>فایل انتخاب شده:</b></div>)
                                )
                            ),
                    X.GridPanel().Width(680).Height(300)
                    .AutoScroll(true)
                    .Title("لیست فایل های آپلود شده")
                    .TitleAlign(TitleAlign.Right)
                    .ItemID("GridFile_Detail")
                    .Store(
                             X.StoreForModel()
                            .AutoLoad(false)
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("ReadFile_Detail"))
                                .Reader(Html.X().JsonReader().Root("data"))
                                //.ExtraParams(ex => ex.Add(new { HeaderID = @ViewBag.HeaderId }))
                            )
                            .PageSize(25)
                            .RemoteFilter(false)
                            .RemotePaging(false)
                            //.Listeners(l => l.DataChanged.Handler = "App.TeacherKartabl.queryById('GridFile_Detail').selModel.refresh();")
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(false))
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                            Html.X().Column().DataIndex(Model, m => m.fldMessageId).Text("کد").Hidden(true).Flex(1),
                    //    Html.X().Column().DataIndex(Model, m => m.fldIcon).Filterable(false).Flex(1).Renderer("ShowIconFile2"),
                        Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("عنوان فایل").Wrap(true).Flex(5),
                        Html.X().Column().DataIndex(Model, m => m.fldPasvand).Text("پسوند فایل").Flex(1),
                        Html.X().Column().DataIndex(Model, m => m.fldSize).Text("حجم فایل(MB)").Flex(2),
                  //      Html.X().Column().DataIndex(Model, m => m.fldTarikh).Text("تاریخ آپلود فایل").Wrap(true).Flex(2),
                        Html.X().ComponentColumn().ID("ColDelFileDetail2").Flex(1).Component(Html.X().Button().Icon(Icon.Delete).Text("حذف")
                            .Listeners(l => l.Click.Handler = "DeleteFileDetail();")).Filterable(false),
                        Html.X().ComponentColumn().ID("ColDownFile2").Flex(1).Component(Html.X().Button().Icon(Icon.DiskDownload).Text("دانلود")
                            .Listeners(l => l.Click.Handler = "DownloadFileDetail();")).Filterable(false)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )
            )
    )
)

<script type="text/javascript">
    var EndUploadFileMessage = false;
    var GotoServer = false;
    var CheckFileMessage = setInterval(CheckEndFileMessage, 500);

    function CheckEndFileMessage() {
        if (EndUploadFileMessage == true) {
            Ext.MessageBox.hide();
            clearInterval(CheckEndFileMessage);
            EndUploadFileMessage = false;
            App.UploadFileMessage.body.mask("آپلود فایل با موفقیت انجام شد. در حال ذخیره سازی...");
            Ext.net.DirectMethod.request({
                url: '/Automation/Message/SaveFiles',
                params: {
                    HeaderId: App.UploadFileMessage.queryById('fldHeaderId').getValue(),
                    title: App.UploadFileMessage.queryById('txtTitleFile').getValue()
                },
                success: function (data) {
                    GotoServer = false;
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1) {
                        ic = Ext.MessageBox.ERROR;
                    }
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    if (data.Er != 1) {
                        App.UploadFileMessage.queryById('GridFile_Detail').getStore().getProxy().setExtraParam("HeaderID", App.UploadFileMessage.queryById('fldHeaderId').getValue());
                        App.UploadFileMessage.queryById('GridFile_Detail').getStore().load();
                        App.UploadFileMessage.queryById('txtTitleFile').setValue("");
                        SearchSK();

                        IsChange = 1;
                    }
                    App.UploadFileMessage.body.mask().hide();
                    Ext.get('fi-button-msgMessage').update('<b>فایل انتخاب شده:</b>');
                }
            });
        }
    }

    var showFileMessage = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msgMessage');
        var sizeofFile = document.getElementById(id).files[0].size;
        if (v) {
            showProgressBarFileMessage();
            Ext.net.DirectMethod.request({
                url: '/Automation/Message/CheckFormatSize',
                params: {
                    Passvand: v.split('.').pop().toLowerCase()
                },
                success: function (data) {
                    if (data.Valid) {
                        if (sizeofFile <= data.FileSize) {
                            GotoServer = true;
                            el.update('<b>فایل انتخاب شده:</b> ' + v);
                        }
                        else {
                            Ext.MessageBox.hide();
                            clearInterval(CheckEndFileMessage);
                            el.update('<b>فایل انتخاب شده:</b> ');
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "حجم فایل انتخابی غیرمجاز است.",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }

                        if (!el.isVisible()) {
                            el.slideIn('t', {
                                duration: .2,
                                easing: 'easeIn',
                                callback: function () {
                                    el.highlight();
                                }
                            });
                        } else {
                            el.highlight();
                        }
                    }
                    else {
                        Ext.MessageBox.hide();
                        clearInterval(CheckEndFileMessage);
                        el.update('<b>فایل انتخاب شده:</b> ');
                        Ext.MessageBox.show({
                            title: "خطا",
                            msg: "فایل انتخاب شده غیرمجاز است.",
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                }
            });
        }
    };

    function hideprogressFileMessage() {
        EndUploadFileMessage = true;
    }

    function showProgressBarFileMessage() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }

    function DisableEnableUpload() {
        if (App.UploadFileMessage.queryById('txtTitleFile').validate() == false) {
            App.FileDetailUploadField.disable();
        }
        else {
            App.FileDetailUploadField.enable();
        }
    }

    function DownloadFileDetail() {
        var Id = App.ColDownFile2.activeRecord.record.data.fldId;
        openWindowWithPost("/Automation/Message/DownloadFile", {
            FileDetailId: Id
        });
        @*window.location.href = '@Url.Content("~/Automation/Message/DownloadFile/")' + '?FileDetailId=' + Id;*@
    }

    function openWindowWithPost(url, data) {
        var form = document.createElement("form");
        form.target = "_blank";
        form.method = "POST";
        form.action = url;
        form.style.display = "none";

        for (var key in data) {
            var input = document.createElement("input");
            input.type = "hidden";
            input.name = key;
            input.value = data[key];
            form.appendChild(input);
        }

        document.body.appendChild(form);
        form.submit();
        document.body.removeChild(form);
    }

    function DeleteFileDetail() {
        var rec = App.ColDelFileDetail2.activeRecord.record;
        var Id = rec.data.fldId;
        var HeaderId = rec.data.fldMessageId;
        Ext.MessageBox.show({
            title: "هشدار",
            msg: "آیا برای حذف مطمئن هستید؟",
            icon: Ext.MessageBox.WARNING,
            buttons: Ext.MessageBox.YESNO,
            fn: function (btn) {
                if (btn == 'yes') {
                    Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                    Ext.net.DirectMethod.request({
                        url: '/Automation/Message/CheckDeleteFile',
                        params: {
                            FileDetailId: Id,
                            HeaderId: HeaderId
                        },
                        success: function (data) {
                            if (data.Er == 1) {
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: Ext.MessageBox.ERROR,
                                    buttons: Ext.MessageBox.OK
                                });
                                Ext.net.Mask.hide();
                            }
                            else {
                                if (data.ExistFile == true) {
                                    Ext.net.Mask.hide();
                                    Ext.MessageBox.show({
                                        title: "هشدار",
                                        msg: "فایل انتخاب شده توسط دانشجو دانلود شده است. آیا مایل به حذف آن می باشید؟",
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.YESNO,
                                        fn: function (btn) {
                                            if (btn == 'yes') {
                                                Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                                                Ext.net.DirectMethod.request({
                                                    url: '/Automation/Message/DeleteFile',
                                                    params: {
                                                        FileDetailId: Id,
                                                        HeaderId: HeaderId
                                                    },
                                                    success: function (data) {
                                                        var ic = Ext.MessageBox.INFO;
                                                        if (data.Er == 1) {
                                                            ic = Ext.MessageBox.ERROR;
                                                        }
                                                        Ext.MessageBox.show({
                                                            title: data.MsgTitle,
                                                            msg: data.Msg,
                                                            icon: ic,
                                                            buttons: Ext.MessageBox.OK
                                                        });
                                                        if (data.Er != 1) {
                                                            App.UploadFileMessage.queryById('GridFile_Detail').getStore().getProxy().setExtraParam("HeaderID", App.UploadFileMessage.queryById('fldHeaderId').getValue());
                                                            App.UploadFileMessage.queryById('GridFile_Detail').getStore().load();

                                                            IsChange = 1;
                                                        }
                                                        Ext.net.Mask.hide();
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    App.UploadFileMessage.queryById('GridFile_Detail').getStore().getProxy().setExtraParam("HeaderID", App.UploadFileMessage.queryById('fldHeaderId').getValue());
                                    App.UploadFileMessage.queryById('GridFile_Detail').getStore().load();

                                    IsChange = 1;
                                    Ext.net.Mask.hide();
                                }
                            }
                        }
                    });
                }
            }
        });
    }

    function setSizeUploadFileMessage() {
        /*var splitWidth = (Ext.getBody().getViewSize().width - 200) / 2;
        var Height = (Ext.getBody().getViewSize().height - 200);
        App.UploadFileMessage.setWidth(Ext.getBody().getViewSize().width - 160);
        App.UploadFileMessage.queryById('GridFile_Detail').setSize(Ext.getBody().getViewSize().width - 200, Height - 45);
        App.UploadFileMessage.queryById('CboField').setWidth(splitWidth-220);*/
    }

    function Next_Save() {
        /*if (App.UploadFileMessage.queryById("pnlOne").isVisible()) {*/
        var txtTitle = App.UploadFileMessage.queryById('txtTitle');
        var txtMatn = App.UploadFileMessage.queryById('txtMatn');
        var fldHeaderId = App.UploadFileMessage.queryById('fldHeaderId');
        var er = false;
        if (txtTitle.validate() == false) {
            er = true;
        }
        if (Ext.util.Format.trim(txtMatn.getEditorBody().textContent) == "") {
            alert("لطفا متن پیام را وارد کنید.");
            return;
        }

        if (er == true) {
            return;
        }
        else {
           
            var data = {
                fldId: fldHeaderId.getValue(),
                fldTitle: txtTitle.getValue(),
                fldMatn: txtMatn.getValue(),
                fldCommisionId: '@ViewBag.CommisionId'
            };
            App.UploadFileMessage.body.mask("در حال ذخیره سازی");
            $.ajax({
                type: "POST",
                url: '/Automation/Message/SaveHeaders',
                datatype: "json",
                data: JSON.stringify(data),
                contentType: 'application/json',
                success: function (result) {
                    fldHeaderId.setValue(result.IdHeader);
                    if (result.Er == 1) {
                        Ext.MessageBox.show({
                            title: result.MsgTitle,
                            msg: result.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    else {
                        App.UploadFileMessage.setTitle("آپلود فایل های ضمیمه");
                        App.UploadFileMessage.queryById("pnlOne").hide();
                        App.UploadFileMessage.queryById("pnlTwo").show();
                        /*App.UploadFileMessage.queryById("btnNext_Save").setText("ذخیره");*/
                        App.UploadFileMessage.queryById("btnNext_Save").hide();
                        App.UploadFileMessage.queryById("btnBack").show();
                        App.UploadFileMessage.queryById('txtTitleFile').focus();

                        SearchSK();
                        IsChange = 1;
                    }
                    App.UploadFileMessage.body.mask().hide();
                },
                failure: function (data) {
                    alert(data.data);
                }
            });
        }
        /*}
        else {
            var txtTitleFile = App.UploadFileMessage.queryById('txtTitleFile');
            var fldHeaderId = App.UploadFileMessage.queryById('fldHeaderId');
            if (txtTitleFile.validate() == false) {
                return;
            }
            else {
                App.UploadFileMessage.body.mask("در حال ذخیره سازی");
                Ext.net.DirectMethod.request({
                    url: '/MessageKartabl/SaveFiles',
                    params: {
                        HeaderId: fldHeaderId.getValue(),
                        title: txtTitleFile.getValue()
                    },
                    success: function (data) {
                        var ic = Ext.MessageBox.INFO;
                        if (data.Er == 1) {
                            ic = Ext.MessageBox.ERROR;
                        }
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: ic,
                            buttons: Ext.MessageBox.OK
                        });
                        if (data.Er != 1) {
                            App.UploadFileMessage.queryById('GridFile_Detail').getStore().getProxy().setExtraParam("HeaderID", fldHeaderId.getValue());
                            App.UploadFileMessage.queryById('GridFile_Detail').getStore().load();
                            App.UploadFileMessage.queryById('txtTitleFile').setValue("");
                        }
                        App.UploadFileMessage.body.mask().hide();
                        Ext.get('fi-button-msgMessage').update('<b>فایل انتخاب شده:</b>');
                    }
                });
            }
        }*/
    }

    function Back() {
        App.UploadFileMessage.queryById("pnlOne").show();
        App.UploadFileMessage.queryById("pnlTwo").hide();
        App.UploadFileMessage.queryById('txtTitle').focus();
        App.UploadFileMessage.queryById("btnNext_Save").show();
        /*App.UploadFileMessage.queryById("btnNext_Save").setText("ذخیره و ادامه");*/
        App.UploadFileMessage.queryById("btnBack").hide();
    }

    function LoadUploadFileMessage() {
        if ('@ViewBag.HeaderId' != "0") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Automation/Message/Details',
                params: {
                    HeaderId: '@ViewBag.HeaderId'
                },
                success: function (data) {
                    var txtTitle = App.UploadFileMessage.queryById('txtTitle');
                    txtTitle.setValue(data.fldTitle);
                    var txtMatn = App.UploadFileMessage.queryById('txtMatn');
                    txtMatn.setValue(data.fldMatn);

                    var fldHeaderId = App.UploadFileMessage.queryById('fldHeaderId');
                    fldHeaderId.setValue(data.fldId);

                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            App.UploadFileMessage.queryById('txtTitle').validate();
            App.UploadFileMessage.queryById('txtMatn').validate();
            App.UploadFileMessage.queryById('txtTitleFile').validate();
        }
        App.UploadFileMessage.queryById('GridFile_Detail').getStore().getProxy().setExtraParam("HeaderID", '@ViewBag.HeaderId');
        App.UploadFileMessage.queryById('GridFile_Detail').getStore().load();
    }



    var SearchMatch = function (record) {
        return record.query = new RegExp(record.query.replace("(", "[(]").replace(")", "[)]"), 'i');
    };




</script>




