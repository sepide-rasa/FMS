@model IEnumerable<NewFMS.WCF_Daramad.OBJ_PardakhtFiles_Detail>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
@{
    var X = Html.X();
}

@(X.Panel()
    .ID("PardakhtFiles")
    .Listeners(li =>
    {
        li.AfterRender.Handler = "PardakhtFilessetSize();";
        li.Render.Fn = "addKeyMapPardakhtFiles";
    })
    .Title("ورود فایل پرداخت الکترونیک")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Border(false)
    .Items(
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.FieldSet()
                    .Border(true)
                    .Title("فیلترهای جستجو")
                    .Height(50)                    
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 5 })
                    .Defaults(new { Margin = 3 })
                    .Items(
                        X.Label("از تاریخ:"),
                        X.PDateField()
                            .Listeners(l =>
                            {
                                l.AfterRender.Handler = "loadPardakhtFiles();";
                                l.Change.Handler = "setDateAzP();";
                            })
                            .Editable(true)
                            .ItemID("txtAzTarikh")
                            //.AllowBlank(false)
                            .MaskRe("/[0-9,/]/")
                            //.BlankText("لطفا تاریخ را وارد کنید.")
                            .AutoFocus(true),
                        X.Label("تا تاریخ:"),
                        X.PDateField()
                            .Editable(true)
                            .ItemID("txtTaTarikh")
                            .Listeners(l =>
                            {
                                l.Change.Handler = "setDateTaP();";
                            })
                            .MaskRe("/[0-9,/]/"),
                            //.AllowBlank(false)
                            //.BlankText("لطفا تاریخ را وارد کنید."),
                        X.Button()
                            .Text("جستجو")
                            .Icon(Ext.Net.Icon.Find)
                            .Listeners(li => li.Click.Handler = "loadPardakhtFiles();")),
        X.GridPanel()
            .AutoScroll(true)
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        X.Button()
                        .Text("جدید")
                        .Icon(Ext.Net.Icon.Add)
                        .Listeners(li => li.Click.Handler = "NewPardakhtFiles();")
                        , X.Button()
                        .Text("راهنما")
                        .Icon(Ext.Net.Icon.Help)
                        .Listeners(li => li.Click.Handler = "HelpPardakhtFiles();"))
                            )

                    
            .ItemID("GridPardakhtFiles")
            .BottomBar(X.PagingToolbar())
            .Store(
                Html.X().StoreForModel()
                    .AutoLoad(false)
                    .Proxy(Html.X().AjaxProxy()
                        .Url(Url.Action("Read"))
                        .Reader(Html.X().JsonReader().Root("data"))
                        )
                    .PageSize(20)
                    .RemoteFilter(true)
                    .RemotePaging(true)
                )
            .View(
                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
            )
            .Plugins(X.FilterHeader().Remote(true))
            .ColumnModel(
                Html.X().RowNumbererColumn(),
                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                Html.X().Column().DataIndex(Model, m => m.fldFishId).Text("شماره قبض").Wrap(true).Flex(4),
                Html.X().Column().DataIndex(Model, m => m.fldShenaseGhabz).Text("شناسه قبض").Wrap(true).Flex(4),
                Html.X().Column().DataIndex(Model, m => m.fldShenasePardakht).Text("شناسه پرداخت").Wrap(true).Flex(4),
                Html.X().Column().DataIndex(Model, m => m.fldTitleNahvePardakht).Text("نحوه پرداخت").Wrap(true).Flex(3),
                Html.X().Column().DataIndex(Model, m => m.fldCodeRahgiry).Text("کد رهگیری").Wrap(true).Flex(4),
                Html.X().Column().DataIndex(Model, m => m.fldBankName).Text("نام بانک").Wrap(true).Flex(3),
                Html.X().Column().DataIndex(Model, m => m.fldTarikhPardakht).Text("تاریخ پرداخت").Filterable(false).Wrap(true).Flex(3)
            )
            .SelectionModel(
                Html.X().RowSelectionModel()
                    .Mode(Ext.Net.SelectionMode.Single)
    )
    )
)
)

<script type="text/javascript">

    function PardakhtFilessetSize() {
        App.PardakhtFiles.queryById('GridPardakhtFiles').setSize(App.DaramadWin.getWidth() - 20, App.DaramadWin.getHeight()-230);
    }

    function loadPardakhtFiles() {
        var DateStart = new Date('@ViewBag.currentDate');
        var txtAzTarikh = App.PardakhtFiles.queryById('txtAzTarikh');
        var txtTaTarikh = App.PardakhtFiles.queryById('txtTaTarikh');
        txtAzTarikh.maxValue = DateStart;
        txtTaTarikh.maxValue = DateStart;
        txtAzTarikh.maxText = "تاریخ باید قبل از" + '@ViewBag.fldTarikh_Sh' + "باشد";
        txtTaTarikh.maxText = "تاریخ باید قبل از" + '@ViewBag.fldTarikh_Sh' + "باشد";

        App.PardakhtFiles.queryById('GridPardakhtFiles').getStore().getProxy().setExtraParam("AzTarikh", App.PardakhtFiles.queryById("txtAzTarikh").rawValue);
        App.PardakhtFiles.queryById('GridPardakhtFiles').getStore().getProxy().setExtraParam("TaTarikh", App.PardakhtFiles.queryById("txtTaTarikh").rawValue);
        App.PardakhtFiles.queryById('GridPardakhtFiles').getStore().load();
    }

    function NewPardakhtFiles() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Daramad/PardakhtFiles/New',
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function setDateAzP() {
        var txtAzTarikh = App.PardakhtFiles.queryById('txtAzTarikh');
        var txtTaTarikh = App.PardakhtFiles.queryById('txtTaTarikh');
        txtTaTarikh.setMinValue(txtAzTarikh.getValue());
        txtTaTarikh.minText = "تاریخ شروع باید قبل از تاریخ پایان باشد.";
    }
    function HelpPardakhtFiles() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Daramad/PardakhtFiles/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function setDateTaP() {
        var txtAzTarikh = App.PardakhtFiles.queryById('txtAzTarikh');
        var txtTaTarikh = App.PardakhtFiles.queryById('txtTaTarikh');
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "تاریخ شروع باید قبل از تاریخ پایان باشد.";
    }

    var addKeyMapPardakhtFiles = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.PardakhtFiles.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtTaTarikh") {
                        loadPardakhtFiles();
                        return;
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    };
</script>