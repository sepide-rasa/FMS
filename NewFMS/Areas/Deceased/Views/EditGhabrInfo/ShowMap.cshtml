@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">

    <meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no">
    <title>Edit rivers and waterbodies</title>

    <link rel="stylesheet" href="http://192.168.1.32/arcgis_js_v335_api/arcgis_js_api/library/3.35/3.35/dijit/themes/claro/claro.css">
    <link rel="stylesheet" href="http://192.168.1.32/arcgis_js_v335_api/arcgis_js_api/library/3.35/3.35/esri/css/esri.css">
    <style>
        html, body {
            height: 100%;
            width: 100%;
            margin: 0;
            overflow: hidden;
        }

        #map {
            padding: 0;
        }

        #header {
            font-size: 1.1em;
            font-family: sans-serif;
            padding-left: 1em;
            padding-top: 4px;
            color: #660000;
        }

        .templatePicker {
            border: none;
        }

        .dj_ie .infowindow .window .top .right .user .content {
            position: relative;
        }

        .dj_ie .simpleInfoWindow .content {
            position: relative;
        }

        .zoominIcon {
            background-image: url(/Content/arcgis/nav_zoomin.png);
            width: 16px;
            height: 16px;
        }

        .zoomoutIcon {
            background-image: url(/Content/arcgis/nav_zoomout.png);
            width: 16px;
            height: 16px;
        }

        .zoomfullextIcon {
            background-image: url(/Content/arcgis/nav_fullextent.png);
            width: 16px;
            height: 16px;
        }

        .zoomprevIcon {
            background-image: url(/Content/arcgis/nav_previous.png);
            width: 16px;
            height: 16px;
        }

        .zoomnextIcon {
            background-image: url(/Content/arcgis/nav_next.png);
            width: 16px;
            height: 16px;
        }

        .panIcon {
            background-image: url(/Content/arcgis/nav_pan.png);
            width: 16px;
            height: 16px;
        }

        .deactivateIcon {
            background-image: url(/Content/arcgis/nav_decline.png);
            width: 16px;
            height: 16px;
        }

        .identifyIcon {
            background-image: url(/Content/arcgis/nav_decline.png);
            width: 16px;
            height: 16px;
        }
    </style>

    <script src="http://192.168.1.32/arcgis_js_v335_api/arcgis_js_api/library/3.35/3.35"></script>
    <script>
        var map;

        require([
            "esri/map",
            "esri/dijit/Basemap",
            "esri/layers/ArcGISDynamicMapServiceLayer",
            "esri/tasks/GeometryService",

            "esri/layers/ArcGISTiledMapServiceLayer",
            "esri/layers/FeatureLayer",

            "esri/Color",
            "esri/symbols/SimpleMarkerSymbol",
            "esri/symbols/SimpleLineSymbol",

            "esri/dijit/editing/Editor",
            "esri/dijit/editing/TemplatePicker",

            "esri/config",
            "dojo/i18n!esri/nls/jsapi",

            "dojo/_base/array", "dojo/parser", "dojo/keys",

            "esri/lang", "esri/graphic",
            "esri/symbols/SimpleFillSymbol", "esri/symbols/SimpleLineSymbol",
            "esri/renderers/SimpleRenderer",
            "dojo/number", "dojo/dom-style",
            "dijit/TooltipDialog", "dijit/popup",

            "dijit/layout/BorderContainer", "dijit/layout/ContentPane",
            "dojo/domReady!"
        ], function (
            Map, Basemap, ArcGISDynamicMapServiceLayer, GeometryService,
            ArcGISTiledMapServiceLayer, FeatureLayer,
            Color, SimpleMarkerSymbol, SimpleLineSymbol,
            Editor, TemplatePicker,
            esriConfig, jsapiBundle,
            arrayUtils, parser, keys,
            esriLang, Graphic,
            SimpleFillSymbol, SimpleLineSymbol, SimpleRenderer,
             number, domStyle,
            TooltipDialog, dijitPopup
        ) {
            parser.parse();

            // snapping is enabled for this sample - change the tooltip to reflect this
            jsapiBundle.toolbars.draw.start = jsapiBundle.toolbars.draw.start + "<br>Press <b>ALT</b> to enable snapping";

            //This service is for development and testing purposes only. We recommend that you create your own geometry service for use within your applications.
          //  esriConfig.defaults.geometryService = new GeometryService("https://utility.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer");

            map = new Map("map", {
                //basemap: "satellite",
                //center: [-96.541, 38.351],
                //zoom: 14,
                slider: false
            });

            //var waterBasemap = new Basemap({
            //    layers: [waterTemplateLayer],
            //    title: "Water Template",
            //    thumbnailUrl: "images/waterThumb.png"
            //});

            //var view = new MapView({
            //    container: "templateDiv",
            //    map: map,
            //    //center: [-117.08, 34.10],
            //    //zoom: 12
            //});

            //view.popup.viewModel.highlightEnabled = false;

            //view.ui.add("menu", "top-right");


            map.on("layers-add-result", initEditor);

            var featureLayerOstan = new ArcGISDynamicMapServiceLayer("https://192.168.1.32:6443/arcgis/rest/services/aram/OnlyBaseMap/MapServer", {
                "opacity": 0.98
            });
            //var featureLayerOstan = new FeatureLayer("https://localhost:6443/arcgis/rest/services/aram/t1/MapServer", {
            //    "opacity": 0.98
            //});
            map.addLayer(featureLayerOstan);
            //add boundaries and place names



            var responsePolys = new FeatureLayer("https://192.168.1.32:6443/arcgis/rest/services/aram/TestAram/FeatureServer/0", {
                mode: FeatureLayer.MODE_ONDEMAND,
                outFields: ['*']

            });
            var responsePolys2 = new FeatureLayer("https://192.168.1.32:6443/arcgis/rest/services/aram/TestAram/FeatureServer/1", {
                mode: FeatureLayer.MODE_ONDEMAND,
                outFields: ['*']

            });

          //  map.addLayers([responsePolys]);

            function initEditor(evt) {
                var templateLayers = arrayUtils.map(evt.layers, function (result) {
                    return result.layer;
                });
                var templatePicker = new TemplatePicker({
                    featureLayers: templateLayers,
                    grouping: true,
                    rows: "auto",
                    columns: 3
                }/*, "templateDiv"*/);
                templatePicker.startup();

                var layers = arrayUtils.map(evt.layers, function (result) {
                    return { featureLayer: result.layer };
                });
                var settings = {
                    map: map,
                    templatePicker: templatePicker,
                    layerInfos: layers,
                    toolbarVisible: true,
                    createOptions: {
                        polylineDrawTools: [Editor.CREATE_TOOL_FREEHAND_POLYLINE],
                        polygonDrawTools: [Editor.CREATE_TOOL_FREEHAND_POLYGON,
                        Editor.CREATE_TOOL_CIRCLE,
                        Editor.CREATE_TOOL_TRIANGLE,
                        Editor.CREATE_TOOL_RECTANGLE
                        ]
                    },
                    toolbarOptions: {
                        reshapeVisible: true
                    }
                };

                var params = { settings: settings };
                var myEditor = new Editor(params/*, 'editorDiv'*/);
                //define snapping options
                var symbol = new SimpleMarkerSymbol(
                    SimpleMarkerSymbol.STYLE_CROSS,
                    15,
                    new SimpleLineSymbol(
                        SimpleLineSymbol.STYLE_SOLID,
                        new Color([255, 0, 0, 0.5]),
                        5
                    ),
                    null
                );
                map.enableSnapping({
                    snapPointSymbol: symbol,
                    tolerance: 20,
                    snapKey: keys.ALT
                });

                myEditor.startup();
            }
            /***** */
            var symbol = new SimpleFillSymbol(
                SimpleFillSymbol.STYLE_SOLID,
                new SimpleLineSymbol(
                    SimpleLineSymbol.STYLE_SOLID,
                    new Color([0, 255, 0, 0.35]),
                    1
                ),
                new Color([0, 125, 0, 0.35])
            );
            var symbol2 = new SimpleFillSymbol(
                SimpleFillSymbol.STYLE_SOLID,
                new SimpleLineSymbol(
                    SimpleLineSymbol.STYLE_SOLID,
                    new Color([255, 255, 255, 0.35]),
                    1
                ),
                new Color([125, 125, 255, 0.35])
            );

            responsePolys.setRenderer(new SimpleRenderer(symbol2));
            //responsePolys.setDefinitionExpression("Name <> 'shomare1'");
            map.addLayer(responsePolys);
            responsePolys2.setRenderer(new SimpleRenderer(symbol));
            responsePolys2.setDefinitionExpression("Id = 0");
            map.addLayer(responsePolys2);

            map.infoWindow.resize(245, 125);

            dialog = new TooltipDialog({
                id: "tooltipDialog",
                style: "position: absolute; width: 250px; font: normal normal normal 10pt Helvetica;z-index:100"
            });
            dialog.startup();
            var highlightSymbol = new SimpleFillSymbol(
                SimpleFillSymbol.STYLE_SOLID,
                new SimpleLineSymbol(
                    SimpleLineSymbol.STYLE_SOLID,
                    new Color([255, 0, 0]), 3
                ),
                new Color([125, 125, 125, 0.35])
            );

            map.on("load", function () {
                map.graphics.enableMouseEvents();
                map.graphics.on("mouse-out", closeDialog);

            });

            responsePolys.on("mouse-over", function (evt) {
                var t = "<b>${Id}</b><hr><b>Name: </b>${Name}<br>"
                    + "<b>BDate: </b>${BDate}<br>";

                var content = esriLang.substitute(evt.graphic.attributes, t);
                var highlightGraphic = new Graphic(evt.graphic.geometry, highlightSymbol);
                map.graphics.add(highlightGraphic);

                dialog.setContent(content);

                domStyle.set(dialog.domNode, "opacity", 0.85);
                dijitPopup.open({
                    popup: dialog,
                    x: evt.pageX,
                    y: evt.pageY
                });
            });
            responsePolys2.on("mouse-over", function (evt) {
                var t = "<b>${Id}</b><hr><b>Name: </b>${Name}<br>"
                    + "<b>BDate: </b>${BDate}<br>";

                var content = esriLang.substitute(evt.graphic.attributes, t);
                var highlightGraphic = new Graphic(evt.graphic.geometry, highlightSymbol);
                map.graphics.add(highlightGraphic);

                dialog.setContent(content);

                domStyle.set(dialog.domNode, "opacity", 0.85);
                dijitPopup.open({
                    popup: dialog,
                    x: evt.pageX,
                    y: evt.pageY
                });
            });
            function closeDialog() {
                map.graphics.clear();
                dijitPopup.close(dialog);
            }
            function setTrailColor(color) {
                view.graphics.removeAll();
                var query = featureLayer.createQuery();
                query.where = "BDate = '1320'"
                featureLayer.queryFeatures(query).then(function (response) {
                    response.features.map(function (graphic) {
                        var gra = graphic.clone();
                        graphic.layer.renderer.getUniqueValueInfo(graphic).then(function (uniqueValueInfo) {
                            var sym = uniqueValueInfo.symbol.clone();
                            sym.color = color;
                            gra.symbol = sym;
                            view.graphics.add(gra);
                        });
                    });
                }).catch(function (err) {
                    console.error(err);
                });
            }

            //********************** */

            navToolbar = new Navigation(map);
            on(navToolbar, "onExtentHistoryChange", extentHistoryChangeHandler);

            registry.byId("zoomin").on("click", function () {
                navToolbar.activate(Navigation.ZOOM_IN);
            });

            registry.byId("zoomout").on("click", function () {
                navToolbar.activate(Navigation.ZOOM_OUT);
            });

            registry.byId("zoomfullext").on("click", function () {
                map.setExtent(featureLayer5.fullExtent, true);
                //  navToolbar.zoomToFullExtent();
                //var featureLayerOstan = graphicsUtils.graphicsExtent(featureLayerOstan.graphics);
                //map.setExtent(featureLayerOstan, true);
            });

            registry.byId("zoomprev").on("click", function () {
                navToolbar.zoomToPrevExtent();
            });

            registry.byId("zoomnext").on("click", function () {
                navToolbar.zoomToNextExtent();
            });

            registry.byId("pan").on("click", function () {
                navToolbar.activate(Navigation.PAN);
            });

            registry.byId("deactivate").on("click", function () {
                navToolbar.deactivate();
            });

            function extentHistoryChangeHandler() {
                registry.byId("zoomprev").disabled = navToolbar.isFirstExtent();
                registry.byId("zoomnext").disabled = navToolbar.isLastExtent();
            }
        });

    </script>
</head>
<body class="claro">
    <div id="main" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="design:'headline'" style="height:width:100%;height:100%;">
        <div data-dojo-type="dijit/layout/ContentPane" id="header" data-dojo-props="region:'top'">
            <div id="navToolbar" data-dojo-type="dijit/Toolbar">
                <div data-dojo-type="dijit/form/Button" id="zoomin" data-dojo-props="iconClass:'zoominIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="zoomout" data-dojo-props="iconClass:'zoomoutIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="zoomfullext" data-dojo-props="iconClass:'zoomfullextIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="zoomprev" data-dojo-props="iconClass:'zoomprevIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="zoomnext" data-dojo-props="iconClass:'zoomnextIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="pan" data-dojo-props="iconClass:'panIcon'"></div>
                <div data-dojo-type="dijit/form/Button" id="deactivate" data-dojo-props="iconClass:'deactivateIcon'"></div>
            </div>
        </div>
        @*<div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'left'" style="width: 300px;overflow:auto;">
            <div id="templateDiv"></div>
            <div id="editorDiv"></div>
        </div>*@
        <div data-dojo-type="dijit/layout/ContentPane" id="map" data-dojo-props="region:'center'"></div>
    </div>
</body>
</html>

