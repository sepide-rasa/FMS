@model IEnumerable<NewFMS.WCF_Common.OBJ_User>
@using Ext.Net.MVC;
@{
    var X = Html.X();
}

<script>
    /*var PersistantSelectionGridPanel= Ext.define('PersistantSelectionGridPanel', {
        extend: 'Ext.grid.Panel',
        selectedRecords: [],
        initComponent: function () {
            this.callParent(arguments);

            this.getStore().on('beforeload', this.rememberSelection, this);
            this.getStore().on('afterload', this.refreshSelection, this);
        },
        rememberSelection: function (selModel, selectedRecords) {
            if (!this.rendered || Ext.isEmpty(this.el)) {
                return;
            }

            this.selectedRecords = this.getSelectionModel().getSelection();
            this.getView().saveScrollState();
        },
        refreshSelection: function () {
            if (0 >= this.selectedRecords.length) {
                return;
            }

            var newRecordsToSelect = [];
            for (var i = 0; i < this.selectedRecords.length; i++) {
                record = this.getStore().getById(this.selectedRecords[i].getId());
                if (!Ext.isEmpty(record)) {
                    newRecordsToSelect.push(record);
                }
            }

            this.getSelectionModel().select(newRecordsToSelect);
            Ext.defer(this.setScrollTop, 30, this, [this.getView().scrollState.top]);
        }
    });*/
   /* Ext.override(Ext.PagingToolbar, {
        onClick: function (which) {
            var g = this.grid;
            var sm = g.getSelectionModel();
            var ds = this.store;
            var reselect = null;

            /*      Create a reselect function by collecting currently selected row indexes,
                  and reselecting those same indexes in the callback.
            if (this.keepSelections && sm && sm.hasSelection()) {
                var selection = sm.getSelections();
                for (var i = 0; i < selection.length; i++) {
                    selection[i] = ds.indexOf(selection[i]);
                }
                reselect = function () {
                    for (var i = 0; i < selection.length; i++) {
                        sm.selectRow(selection[i]);
                    }
                }
            };
            var params;
            switch (which) {
                case "first":
                    params = { start: 0, limit: this.pageSize };
                    break;
                case "prev":
                    params = { start: Math.max(0, this.cursor - this.pageSize), limit: this.pageSize };
                    break;
                case "next":
                    params = { start: this.cursor + this.pageSize, limit: this.pageSize };
                    break;
                case "last":
                    var total = ds.getTotalCount();
                    var extra = total % this.pageSize;
                    var lastStart = extra ? (total - extra) : total - this.pageSize;
                    params = { start: lastStart, limit: this.pageSize };
                    break;
                case "refresh":
                    params = { start: this.cursor, limit: this.pageSize };
                    break;
            }
            ds.load({ params: params, callback: reselect });
        }
    });*/
    /*Ext.override(Ext.selection.Model, {
        refresh: function () {
            alert();
            var me = this,
                toBeSelected = [],
                oldSelections = me.getSelection(),
                len = oldSelections.length,
                selection,
                change,
                i = 0,
                lastFocused = this.getLastFocused();
            for (; i < len; i++) {
                selection = oldSelections[i];

                if (!this.pruneRemoved || me.store.indexOf(selection) !== -1) {
                    toBeSelected.push(selection);
                }
                else {                                                
                    var record = me.store.getById(selection.getId()); 
                    if (record != null) {                             
                        toBeSelected.push(record);                    
                    }                                                
                }                                                     
            }


            if (me.selected.getCount() != toBeSelected.length) {
                change = true;
            }


            me.clearSelections();


            if (me.store.indexOf(lastFocused) !== -1) {
                this.setLastFocused(lastFocused, true);
            }
            if (toBeSelected.length) {
                me.doSelect(toBeSelected, false, true);
            }
            me.maybeFireSelectionChange(change);
        }
    });*/
</script>

@(Html.X().Window()
    .Width(600)
    .Height(500)
    .Title("کاربران")
    .ID("SearchUser")
    .Closable(true)
    .Modal(true)
    .Layout(Ext.Net.LayoutType.Fit)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Layout(Ext.Net.LayoutType.Fit)
            .Items(
                X.GridPanel()
                    .AutoScroll(true)
                    .Border(false)
                    .TopBar(
                        Html.X().Toolbar()
                            .Items(
                                X.Button()
                                    .Text("انتخاب")
                                    .Icon(Ext.Net.Icon.ArrowRedo)
                                    .Listeners(li => li.Click.Handler = "NextSearchUser();")
                                )
                        )
                    .ItemID("GridSearchUser")                
                    .Store(
                        X.StoreForModel()

                    .Listeners(l => l.Load.Handler = "LoadSavedData();")
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                                .ExtraParams(x => x.Add(new { OrganId = @ViewBag.Organ }))
                        )
                        .PageSize(20000)
                        .RemoteFilter(true)
                        .RemotePaging(true)
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    //.Plugins(X.FilterHeader().Remote(false))
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                        Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                        Html.X().Column().DataIndex(Model, m => m.fldNameEmployee).Text("نام").Flex(5),
                        Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کد ملی").Flex(2),
                        Html.X().Column().DataIndex(Model, m => m.fldActive_DeactiveName).Text("وضعیت").Flex(1)
                    )
                    .Listeners(a => a.CellDblClick.Handler = "NextSearchUser();")
                    .SelectionModel(
                        Html.X().CheckboxSelectionModel().CheckOnly(true)
                            .Mode(Ext.Net.SelectionMode.Multi)
                    )

            )
        )
)

<script type="text/javascript">

    function LoadSavedData() {
        var UserSelected = "";
        if ('@ViewBag.State' == "1")
            UserSelected = App.PcPosIP.queryById('fldPcPosUserIds').getValue();
        else
            if ('@ViewBag.State' == "2")
                UserSelected = App.NewMahdoodiyatM.queryById('IdUser').getValue();

        if (UserSelected != "") {
            var u = UserSelected.split(";");
            for (var j = 0; j < u.length-1; j++) {
                var index = App.SearchUser.queryById('GridSearchUser').getStore().findExact("fldId", parseInt(u[j]));
                App.SearchUser.queryById('GridSearchUser').getSelectionModel().select(index, true);
            }
        }
    }
    function NextSearchUser() {
        var SelectedRow = App.SearchUser.queryById('GridSearchUser').getSelectionModel().getSelection();
        
        if (SelectedRow != null) {
            if ('@ViewBag.State' == "1") {                
                App.PcPosIP.queryById('fldPcPosUserIds').setValue("");
                App.PcPosIP.queryById('fldIdUsers').setValue("");
                App.PcPosIP.queryById('txtUsers').setValue("");
                for (var i = 0; i < SelectedRow.length; i++) {
                    App.PcPosIP.queryById('fldIdUsers').setValue(App.PcPosIP.queryById('fldIdUsers').getValue() + SelectedRow[i].data.fldId + ";");
                    App.PcPosIP.queryById('txtUsers').setValue(App.PcPosIP.queryById('txtUsers').getValue() + SelectedRow[i].data.fldNameEmployee + "،");
                    App.PcPosIP.queryById('fldPcPosUserIds').setValue(App.PcPosIP.queryById('fldPcPosUserIds').getValue() + SelectedRow[i].data.fldId + ";");                    
                }
            }
            else if ('@ViewBag.State' == "2") {
                App.NewMahdoodiyatM.queryById('IdUser').setValue("");
                App.NewMahdoodiyatM.queryById('txtUser').setValue("");
                for (var i = 0; i < SelectedRow.length; i++) {
                    App.NewMahdoodiyatM.queryById('IdUser').setValue(App.NewMahdoodiyatM.queryById('IdUser').getValue() + SelectedRow[i].data.fldId + ";");
                    App.NewMahdoodiyatM.queryById('txtUser').setValue(App.NewMahdoodiyatM.queryById('txtUser').getValue() + SelectedRow[i].data.fldNameEmployee + "،");
                }
            }
            App.SearchUser.destroy();
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا کاربر/کاربران مورد نظر را انتخاب نمایید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
</script>