@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Window().Modal(true).Listeners(li => li.AfterRender.Handler = "LoadEmployee();")
    .Width(560)
    .Title("ثبت کارمندان")
                .ID("NewEmployee")
                    .Resizable(false)
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel().Border(false)
        .Border(false).ButtonAlign(Ext.Net.Alignment.Center)

        .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
               .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8")
                           .Listeners(l =>
                           {
                               l.Click.Handler = "SaveEmployee();";

                           })
                           .ItemID("btnSave")
                            ,
                            X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                                            .OnClientClick("App.NewEmployee.destroy();"))


                .Items(
                X.Panel().Border(false)

            .Items(
                X.FieldSet().Border(false)
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                    .Defaults(new { Margin = 10 })
                .Items(
                    X.Hidden().ItemID("fldId"),
                    X.Label("تابعیت:"),
                     X.ComboBox()
                    .ItemID("CboType")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Editable(false)
                    .TypeAhead(true)
                    .BlankText("لطفا نوع تابعیت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .EmptyText("تابعیت")
                    //.FieldLabel("تابعیت")
                    .Items(
                        new ListItem("داخلی", "1"),
                        new ListItem("خارجی", "0")
                        )
                    .Listeners(l=>l.Select.Handler="ChangeType();")
                     ,X.TextField()
                    .ItemID("txtName")
                    .FieldLabel("نام")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا نام را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                    .AutoFocus(true)
                    , X.TextField()
                    .ItemID("txtFamily")
                    .FieldLabel("نام خانوادگی")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا نام خانوادگی را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                    , X.TextField()
                    .ItemID("txtFather")
                    .FieldLabel("نام پدر")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا نام پدر را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                    , X.TextField()
                    .ItemID("txtCodeMeli")
                    .FieldLabel("کد ملی")
                    .ItemID("lblCodeMeli")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                        .Plugins(X.InputMask()
                                .Mask("AAAAAAAAAA")
                                .UnmaskOnBlur(true)
                                .MaskSymbols(ls =>
                                {
                                    ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                })
                            )
                    .AllowBlank(false)
                    .Width(140)
                    .BlankText("لطفا کد ملی را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    , X.ComboBox()
                    .ItemID("CboJensiat")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Editable(false)
                    .TypeAhead(true)
                    .BlankText("لطفا جنسیت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .EmptyText("جنسیت")
                    .FieldLabel("جنسیت")
                    .Items(
                        new ListItem("مرد", "1"),
                        new ListItem("زن", "0")
                        )
                    , X.TextArea()
                    .ItemID("txtDesc")
                    .FieldLabel("توضیحات")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Width(160).ColSpan(3)

                    //, X.Image().ItemID("Image").ImageUrl("~/Content/Blank.jpg").Width(90).Height(110).Border(true)
        //.Align(System.Web.UI.WebControls.ImageAlign.Middle)


                    //, X.Image().ItemID("ImageSign").ImageUrl("~/Content/Blank.jpg").Width(90).Height(110).Border(true)
        //.Align(System.Web.UI.WebControls.ImageAlign.Middle)


                        )
                        , X.FieldSet().Border(false)
                                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                                .Defaults(new { Margin = 3 })
                            .Items(
                             X.FileUploadField()
                            .ID("FileUploadField1")
                            .ButtonOnly(true).ButtonText("انتخاب عکس")
                            .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                    }
                                )
                            .Listeners(l => l.Change.Fn = "showFile")
                                    .Icon(Ext.Net.Icon.DiskUpload)
                                    , X.Container().Content(@<div id="fi-button-msg" style="display:none;"></div>).ColSpan(3)     
                            //, X.Button()
                            //.ID("ShowButton")
                            //.Text("دانلود عکس")
                            //.Listeners
                            //(l =>
                            //    {
        //        l.Click.Handler = "Download();";
                            //    }
                            //)
                            ,X.Image().ItemID("Image").ImageUrl("~/Content/Blank.jpg").Width(110).Height(130).Border(true)
                            , X.Label()
                                .Text("حداکثر حجم مجاز برای بارگذاری 100 کیلوبایت می باشد.")
                            )    
                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
)
        )
)
@(Html.X().KeyMap()
              .ID("NewEmployeeMap")
                         .Target("={App.NewEmployee.getTargetEl()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                .Handler("if(App.BasicInfTab.activeTab.id=='Employee')SaveEmployee();")
                );

            }))



<script type="text/javascript">
    var UserImageId = 0;
    var UsersId = 0;
    var showFile = function (fb, v) {
        if (v) {
            var el = Ext.get('fi-button-msg');
            el.update('<b>فایل انتخاب شده:</b> ' + v);

            if (!el.isVisible()) {
                el.slideIn('t', {
                    duration: .2,
                    easing: 'easeIn',
                    callback: function () {
                        el.highlight();
                    }
                });
            } else {
                el.highlight();
            }
        }
    };
    function ChangeType() {
        var CboType = App.NewEmployee.queryById('CboType');
        var lblCodeMeli = App.NewEmployee.queryById('lblCodeMeli');
        if (CboType.getValue() == "1")
            lblCodeMeli.setText("کد فراگیر");
        else
            lblCodeMeli.setText("کد ملی");
    }
   /* function Download() {
        Ext.net.DirectMethod.request({
            url: '/Comon/Employee/HaveFile',
            params: {
                UsersId: UsersId
            },
            success: function (data) {
                if (data.HaveFile)*/
                   @* window.location.href = '@Url.Content("/Comon/Employee/Download?UserId=")' + UsersId;*@
               /* else {
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "عکس مورد نظر انتخاب نشده است.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
        });
    }*/
    function LoadEmployee() {
        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.DirectMethod.request({
                url: '/Comon/Employee/Details',
                params: {
                    id: '@ViewBag.Id'
                },
                success: function (data) {
                    var CboType = App.NewEmployee.queryById('CboType');
                    CboType.setValue(data.fldTypeShakhs);
                    var txtName = App.NewEmployee.queryById('txtName');
                    txtName.setValue(data.fldName);
                    var txtFamily = App.NewEmployee.queryById('txtFamily');
                    txtFamily.setValue(data.fldFamily);
                    var txtCodeMeli = App.NewEmployee.queryById('txtCodeMeli');
                    txtCodeMeli.setValue(data.fldCodemeli);
                    var CboJensiat = App.NewEmployee.queryById('CboJensiat');
                    CboJensiat.setValue(data.fldJensiyat);
                    var txtFather = App.NewEmployee.queryById('txtFather');
                    txtFather.setValue(data.fldFatherName);
                    var txtDesc = App.NewEmployee.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    var fldId = App.NewEmployee.queryById('fldId');
                    fldId.setValue(data.fldId);
                    UserImageId = data.fldFileId;
                    UsersId = data.fldId;
                    var url = '/Comon/Employee/ShowPic';
                    var g = url + '?FileId=' + data.fldFileId;
                    var k = App.NewEmployee.queryById('Image');
                    k.setImageUrl(g);
                }
            });
        }
    }

        function SaveEmployee() {
            var CboType = App.NewEmployee.queryById('CboType');
        var txtName = App.NewEmployee.queryById('txtName');
        var txtFamily = App.NewEmployee.queryById('txtFamily');
        var txtCodeMeli = App.NewEmployee.queryById('txtCodeMeli');
        var CboJensiat = App.NewEmployee.queryById('CboJensiat');
        var txtFather = App.NewEmployee.queryById('txtFather');
        var txtDesc = App.NewEmployee.queryById('txtDesc');
        var fldId = App.NewEmployee.queryById('fldId');
        var er = false;

        if (txtCodeMeli.getValue() == "") {
            if (CboType.getValue() == "0")
                alert("لطفا کد ملی را وارد نمایید.");
            else
                alert("لطفا کد فراگیر را وارد نمایید.");
            return;
        }
        if (CboType.validate() == false) {
            er = true;
        }
        if (txtName.validate() == false) {
            er = true;
        }
        if (txtFamily.validate() == false) {
            er = true;
        }
        if (txtCodeMeli.validate() == false) {
            er = true;
        }
        if (CboJensiat.validate() == false) {
            er = true;
        }
        if (txtFather.validate() == false) {
            er = true;
        }


        if (er == true)
            return;

        var Jensiat = false;
        if (CboJensiat.getValue() == "1")
            Jensiat = true;

        Ext.net.DirectMethod.request({
            url: '/Comon/Employee/Save',
            params: {
                fldId: fldId.getValue(),
                fldName: txtName.getValue(),
                fldFamily: txtFamily.getValue(),
                fldCodemeli: txtCodeMeli.getValue(),
                fldFatherName: txtFather.getValue(),
                fldFileId: UserImageId,
                fldJensiyat: Jensiat,
                fldDesc: txtDesc.getValue(),
                fldTypeShakhs:CboType.getValue()
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Err == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                App.Employee.queryById('GridEmployee').store.load();
                if (data.Err == 0)
                    ClearEmployee();
            }

        });
    }
        function ClearEmployee() {
        App.NewEmployee.queryById('fldId').setValue(0);
        App.NewEmployee.queryById('txtName').setValue("");
        App.NewEmployee.queryById('txtFamily').setValue("");
        App.NewEmployee.queryById('txtCodeMeli').setValue("");
        App.NewEmployee.queryById('CboJensiat').setValue("");
        App.NewEmployee.queryById('txtFather').setValue("");
        App.NewEmployee.queryById('txtDesc').setValue("");
    }
    function EnterNext() {
        var keyfield = App.NewEmployee.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();

    }
</script>