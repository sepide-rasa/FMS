@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    td {
        text-align: left;
    }

    /*.x-rtl .x-textfield-icon {
        margin-right: 120px;
    }

    .x-rtl .x-textfield-icon-input {
        padding-right: 3px;
    }*/

    #fieldsetfile legend {
        text-align: right;
        font-family: Tahoma !important;
    }
    .lblDaraei
    {
        color:red;
    }
</style>

@(Html.X().Window()
    .Closable(true)
    .Listeners(l => l.BeforeRender.Handler = "hidelbl();")
    .CloseAction(CloseAction.Destroy)
    .Layout(LayoutType.Fit)
    .Modal(true)
    .Width(830)
    .ID("NewEmployeeDetails")
    .Title("ثبت اطلاعات تکمیلی")
    .ButtonAlign(Alignment.Center)
    .Buttons(
        Html.X().Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)
            .Listeners(l => l.Click.Handler = "SaveEmployeeDetails()"),
        Html.X().Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .Listeners(l => l.Click.Handler = "App.NewEmployeeDetails.destroy()")
    )
    .Items(
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
           
        //.PaddingSpec("4px 0 4px 0")
            .Items(
                Html.X().FieldSet()
                    .Border(true)
                    .Defaults(new { Margin = 2 })
                    .Title("مشخصات پرسنل")
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                    .Items(
                        X.Hidden()
                            .ItemID("fldId"),
                        X.Hidden()
                            .ItemID("EmployeeId"),
                        X.Hidden()
                            .ItemID("UserImageId"),
                        X.FieldSet()
                        .Layout(LayoutType.VBox)
                        .Border(false)
                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                        .ItemID("lblDaraei")
                        .Items(
                        X.Label("کاربر گرامی؛ برای چاپ گزارش فرم دارایی، میبایست اطلاعات تکمیلی مربوطه را وارد نمائید. ")
                        .Cls("lblDaraei")
                        )
                         .ColSpan(6)
                        ,X.Label("کد ملی:"),
                        X.TextField()
                            .ItemID("txtNationalCode")
                            .AllowBlank(false)
                            .BlankText("لطفا کدملی را وارد کنید."),
                        X.Label("نام:"),
                        X.TextField()
                            .ItemID("txtname")
                            .AllowBlank(false)
                            .BlankText("لطفا نام را وارد کنید."),
                        X.Label("نام خانوادگی:"),
                        X.TextField()
                            .ItemID("txtFamilyName")
                            .AllowBlank(false)
                            .BlankText("لطفا نام خانوادگی را وارد کنید."),
                        X.Label("نام پدر:"),
                        X.TextField()
                            .ItemID("txtFatherName")
                                //.AllowBlank(true)
                            .AutoFocus(true)
                            .MaxLength(60)
                            .EnforceMaxLength(true)
                                .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                            //.BlankText("لطفا نام پدر را وارد کنید.")
                            ,
           X.Label("جنسیت:"),
           X.ComboBox()
               .ItemID("CboGender")
               .Editable(false)
               .TypeAhead(true)
               //.BlankText("لطفا جنسیت را انتخاب کنید.")
               .Listeners(l => l.Select.Handler = "if(App.NewEmployeeDetails.queryById('CboGender').getValue()=='0'){App.NewEmployeeDetails.queryById('CboNezamVazife').clearValue();App.NewEmployeeDetails.queryById('CboNezamVazife').disable();}else{App.NewEmployeeDetails.queryById('CboNezamVazife').setValue('1');App.NewEmployeeDetails.queryById('CboNezamVazife').enable();}")
               .QueryMode(DataLoadMode.Local)
               .TriggerAction(TriggerAction.All)
               //.AllowBlank(false)
               .EmptyText("جنسیت...")
               .Items(
                   new ListItem("مرد", "1"),
                   new ListItem("زن", "0")
                   )
               .SelectedItems(new { Value = "1" }),
                        X.Label("شماره شناسنامه:"),
                        X.TextField()
                            .ItemID("txtSh_Shenasname")
                            //.AllowBlank(false)
                            .MaxLength(10)
                            .MaskRe("[0-9]")
                            .EnforceMaxLength(true)
                            //.BlankText("لطفا شماره شناسنامه را وارد کنید.")
                            ,
                        X.Label("تاریخ تولد:"),
                        X.PDateField()
                            .ItemID("txtTarikhTavalod")
                            //.AllowBlank(false)
                                .MaskRe("[0-9-/]")
                            //.BlankText("لطفا تاریخ تولد را وارد کنید.")
                            .Editable(true),
                        X.Label("تاریخ صدور:"),
                        X.PDateField()
                                .ItemID("txtTarikhSodoor")
                            //.AllowBlank(false)
                                .MaskRe("[0-9-/]")
                            //.BlankText("لطفا تاریخ صدور را وارد کنید.")
                            .Editable(true),
                        X.Label("محل تولد:"),
                        X.ComboBox()
                            .ItemID("CboMahalTavalod")
                            .TypeAhead(true)
                            .Editable(true)
                            .ForceSelection(true)
                            .QueryMode(DataLoadMode.Local)
                            //.BlankText("لطفا محل تولد را انتخاب کنید.")
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                            .EmptyText("محل تولد ...")
                            .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetMahalTavalod"))
                                    .Reader(X.JsonReader().Root("data"))
                                    )
                                        )
                            //.AllowBlank(false)
                            ,
                        X.Label("محل صدور:"),
                        X.ComboBox()
                            .ItemID("CboMahlSodoor")
                                .TypeAhead(true)
                                .Editable(true)
                                .ForceSelection(true)
                            .QueryMode(DataLoadMode.Local)
                            //.BlankText("لطفا محل صدور را انتخاب کنید.")
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                            .EmptyText("محل صدور ...")
                            .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                    )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetMahlSodoor"))
                                    .Reader(X.JsonReader().Root("data"))
                                )
                                )
                            //.AllowBlank(false)
                            ,
                               X.Label().Text("نوع تاهل:")
        , X.ComboBox()
                .LabelAlign(Ext.Net.LabelAlign.Right)
                .ItemID("CboStatusTaahol")
                .TypeAhead(true)
                //.BlankText("لطفا نوع تاهل را انتخاب کنید.")
                .QueryMode(DataLoadMode.Local)
                .ForceSelection(true)
                .TriggerAction(TriggerAction.All)
                .DisplayField("Name")
                .ValueField("ID")
                //.AllowBlank(false)
                .EmptyText("نوع تاهل")
                        .Store(X.Store()//.Listeners(l => l.Load.Handler = "ReloadItem();LoadHokm();")
                    .Model(X.Model()
                        .IDProperty("ID")
                        .Fields(
                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                        )
                    )
                    .Proxy(X.AjaxProxy()
                    .Url(Url.Action("GetStatusTaahol"))
                    .Reader(X.JsonReader().Root("data"))
                    )
                ),
                        X.Label("کد پستی:"),
                        X.TextField()
                            .ItemID("txtCodePosti")
                            //.AllowBlank(false)
                            .MinLength(10)
                            .MaxLength(10)
                            .EnforceMaxLength(true)
                                .MaskRe("[0-9]")
                            //.BlankText("لطفا کد پستی را وارد کنید.")
                            ,
                     
                        X.Label("مدرک تحصیلی:"),
                        X.ComboBox()
                            .ItemID("CboMadrak")
                            .TypeAhead(true)
                            //.BlankText("لطفا مدرک تحصیلی را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                            .EmptyText("مدرک تحصیلی ...")
                            .Editable(false)
                            //.SelectedItems(new { Value = "4" })
                            .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                    )
                                    )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetMadrakTahsili"))
                                    .Reader(X.JsonReader().Root("data"))
                                    )
                            ),
                        X.Label("رشته تحصیلی:"),
                        X.ComboBox()
                            .ItemID("CboReshteTahsili")
                            .TypeAhead(true)
                            //.BlankText("لطفا رشته تحصیلی را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                            .Editable(false)
                            .EmptyText("رشته تحصیلی ...")
                            .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                    )
                                    )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetReshteh"))
                                    .Reader(X.JsonReader().Root("data"))
                                    )
                            ),
         X.Label("نظام وظیفه:").ItemID("lblNezamVazife"),
         X.ComboBox()
             .ItemID("CboNezamVazife")
             .TypeAhead(true)
             .BlankText("لطفا نظام وظیفه را انتخاب کنید.")
             .QueryMode(DataLoadMode.Local)
             .ForceSelection(true)
             .TriggerAction(TriggerAction.All)
             .DisplayField("fldName")
             .ValueField("fldId")
             .Editable(false)
             .EmptyText("نظام وظیفه ...")
             .SelectedItems(new { Value = "1" })
             .Store(X.Store()
                 .Listeners(l => l.Load.Handler = "LoadEmployeeDetails();")
                 .Model(X.Model()
                     .IDProperty("fldId")
                     .Fields(
                         new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                         new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                     )
                     )
                 .Proxy(X.AjaxProxy()
                         .Url(Url.Action("GetNezamVazife"))
                     .Reader(X.JsonReader().Root("data"))
                     )
             ),
                        X.Label("ملیت:"),
                        X.ComboBox()
                            .ItemID("CboMeliyat")
                            .Editable(false)
                            .TypeAhead(true)
                            //.BlankText("لطفا ملیت را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .EmptyText("ملیت")
                            .SelectedItems(new { Value = "1" })
                            .Items(
                                new ListItem("ایرانی", "1"),
                                new ListItem("غیرایرانی", "0")
                                ),
                          X.Label("موبایل:"),
                            X.TextField()
                                .ItemID("txtMobile")
                                .AllowBlank(true)
                                .EnableKeyEvents(true)
                                .Listeners(l => l.KeyUp.Fn = "onInitializeToEnMobile")
                                .EnforceMaxLength(true)
                                .MaxLength(11)
                                .MinLength(11)
                                .MaskRe("/[0-9]/")
                                .Regex(@"^[0][9]")
                                .BlankText("لطفا شماره موبایل را وارد کنید."),
                        X.Label("آدرس:"),
                        X.TextArea()
                            .ItemID("txtAddress")
                            //.AllowBlank(true)
                            //.BlankText("لطفا آدرس را وارد کنید.")
                            ,
                        X.Label("توضیحات:"),
                                X.TextField().ColSpan(5)
                            .ItemID("txtDesc")
                            .Width(655)
                         //   .ColSpan(3)
                            ,
                        X.FormPanel()
                            .Border(false)
                            .ColSpan(6)
                            .Width(750)
                            .Layout(LayoutType.VBox)
                            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                            .Items(
                                X.FieldSet()
                                    .Border(true)
                                    .Defaults(new { Margin = 3 })
                                    .ID("fieldsetfile")
                                    .ColSpan(4)
                                    .Layout(LayoutType.HBox)
        //.MarginSpec("0 0 0 80px")
                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle })
                                    .Title("آپلود فایل(حداکثر حجم مجاز 100KB)")
                                    .Items(
                                        X.FileUploadField()
                                            .ID("FileUploadFieldPI")
                                            .ButtonOnly(true)
                                            .ButtonText("انتخاب فایل")
                                            .DirectEvents(l =>
                                            {
                                                l.Change.Action = "Upload";
                                                l.Change.Success = "hideprogressUserImage();";
                                            })
                                            .Listeners(l => l.Change.Fn = "showFilePI")
                                            .Icon(Ext.Net.Icon.DiskUpload),
                                        X.Container()
                                            .Content(@<div id="fi-button-msgPI" style="display:none;text-align:center;margin-top:-6px"></div>)
                                            .Width(250),
                                        X.FieldSet()
                                            .Border(false)
                                            .Items(
                                                X.Image().ItemID("Image").ImageUrl("~/Content/Blank.jpg").Width(65).Height(80).Border(true)
                                                .PaddingSpec("0 -50px 0 0")
                                                )))
            )
            )
    )
)

<script type="text/javascript">
    var MojazUserImage = 0;
    var sizeeUserImage = 0;
    var EndUploadUserImage = false;
    var onInitializeToEnMobile = function () {
        var tt = App.NewEmployeeDetails.queryById('txtMobile');
        changeFarsiToEn(tt);
    };
    function changeFarsiToEn(tt) {
        tt.setValue(tt.getValue().replace('ش', 'a'));
        tt.setValue(tt.getValue().replace('ذ', 'b'));
        tt.setValue(tt.getValue().replace('ز', 'c'));
        tt.setValue(tt.getValue().replace('ی', 'd'));
        tt.setValue(tt.getValue().replace('ث', 'e'));
        tt.setValue(tt.getValue().replace('ب', 'f'));
        tt.setValue(tt.getValue().replace('ل', 'g'));
        tt.setValue(tt.getValue().replace('ا', 'h'));
        tt.setValue(tt.getValue().replace('ه', 'i'));
        tt.setValue(tt.getValue().replace('ت', 'j'));
        tt.setValue(tt.getValue().replace('ن', 'k'));
        tt.setValue(tt.getValue().replace('م', 'l'));
        tt.setValue(tt.getValue().replace('ئ', 'm'));
        tt.setValue(tt.getValue().replace('د', 'n'));
        tt.setValue(tt.getValue().replace('خ', 'o'));
        tt.setValue(tt.getValue().replace('ح', 'p'));
        tt.setValue(tt.getValue().replace('ض', 'q'));
        tt.setValue(tt.getValue().replace('ف', 't'));
        tt.setValue(tt.getValue().replace('ق', 'r'));
        tt.setValue(tt.getValue().replace('س', 's'));
        tt.setValue(tt.getValue().replace('ع', 'u'));
        tt.setValue(tt.getValue().replace('ر', 'v'));
        tt.setValue(tt.getValue().replace('ص', 'w'));
        tt.setValue(tt.getValue().replace('ط', 'x'));
        tt.setValue(tt.getValue().replace('غ', 'y'));
        tt.setValue(tt.getValue().replace('ظ', 'z'));
        tt.setValue(tt.getValue().replace('ک', ';'));
        tt.setValue(tt.getValue().replace('ج', '['));
        tt.setValue(tt.getValue().replace('چ', ']'));
        tt.setValue(tt.getValue().replace('ژ', 'C'));
        tt.setValue(tt.getValue().replace('و', ','));
        tt.setValue(tt.getValue().replace('پ', '\\'));
        return tt;
    }
    function hidelbl() {
        if ('@ViewBag.flag' == "1") {
            App.NewEmployeeDetails.queryById('lblDaraei').show();
        }
        else {
            App.NewEmployeeDetails.queryById('lblDaraei').hide();
        }
    }
    var CheckUserImage = setInterval(CheckEndUserImage, 500);

    function CheckEndUserImage() {
        if (EndUploadUserImage == true) {
            Ext.net.DirectMethod.request({
                url: '/Comon/Employee/ShowPicUpload',
                success: function (data) {
                    value = "data:image/gif;base64," + data.image;
                    App.NewEmployeeDetails.queryById('Image').setImageUrl(value);
                }
            });
            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndUserImage);
            EndUploadUserImage = false;
        }
    }

    var showFilePI = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get("fi-button-msgPI");
        if (v) {
            showProgressBarUserImage();
            if (document.getElementById(id).files[0].type.substring(0, 5) == "image") {
                MojazUserImage = 1;
                if (document.getElementById(id).files[0].size <= 102400) {
                    sizeeUserImage = 1;
                }
                if (sizeeUserImage == 1) {
                    el.update(v);
                }
                else {
                    el.update("");
                    App.NewEmployeeDetails.queryById('Image').setImageUrl("/Content/Blank.jpg");
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update("");
                App.NewEmployeeDetails.queryById('Image').setImageUrl("/Content/Blank.jpg");
            }
        }
    };

    function showProgressBarUserImage() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }

    function hideprogressUserImage() {
        if (MojazUserImage == 1 && sizeeUserImage == 1) {
            EndUploadUserImage = true;
        }
        sizeeUserImage = 0;
        MojazUserImage = 0;
    }

    function setMaxMinDate() {
        var nowdate = '@ViewBag.Date';
        var txtTarikhTavalod = App.NewEmployeeDetails.queryById('txtTarikhTavalod');
        var date = new Date(nowdate);
        txtTarikhTavalod.setMaxValue(date);
        txtTarikhTavalod.maxText = "تاریخ تولد نمی تواند بعد از امروز باشد.";
        var txtTarikhSodoor = App.NewEmployeeDetails.queryById('txtTarikhSodoor');
        var date = new Date(nowdate);
        txtTarikhSodoor.setMaxValue(date);
        txtTarikhSodoor.maxText = "تاریخ صدور نمی تواند بعد از امروز باشد.";
    }


    function LoadEmployeeDetails() {
      
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Comon/Employee/DetailsEmployeeDetail',
            params: {
                EmployeeId: '@ViewBag.Id'
            },
            success: function (data) {
                var EmployeeId = App.NewEmployeeDetails.queryById('EmployeeId');
                EmployeeId.setValue(data.fldEmployeeId);

                var txtname = App.NewEmployeeDetails.queryById('txtname');
                txtname.setValue(data.fldName).setReadOnly(true);
                txtname.setFieldStyle("background-image:none;background-color:#dfe8f6");

                var txtFamilyName = App.NewEmployeeDetails.queryById('txtFamilyName');
                txtFamilyName.setValue(data.fldFamily).setReadOnly(true);
                txtFamilyName.setFieldStyle("background-image:none;background-color:#dfe8f6");


                var txtNationalCode = App.NewEmployeeDetails.queryById('txtNationalCode');
                txtNationalCode.setValue(data.fldCodemeli).setReadOnly(true);
                txtNationalCode.setFieldStyle("background-image:none;background-color:#dfe8f6");

                if (data.haveDetail == "1") {
                    var txtFatherName = App.NewEmployeeDetails.queryById('txtFatherName');
                    txtFatherName.setValue(data.fldFatherName);

                    var txtTarikhTavalod = App.NewEmployeeDetails.queryById('txtTarikhTavalod');
                    txtTarikhTavalod.setValue(data.fldTarikhTavalod);
                    var txtTarikhSodoor = App.NewEmployeeDetails.queryById('txtTarikhSodoor');
                    txtTarikhSodoor.setValue(data.fldTarikhSodoor);


                    var CboGender = App.NewEmployeeDetails.queryById('CboGender');
                    CboGender.setValue(data.fldJensiyat);/*.setReadOnly(true);
                    CboGender.setFieldStyle("background-image:none;background-color:#dfe8f6");*/

                    var txtSh_Shenasname = App.NewEmployeeDetails.queryById('txtSh_Shenasname');
                    txtSh_Shenasname.setValue(data.fldSh_Shenasname);

                    var CboCity = App.NewEmployeeDetails.queryById('CboMahalTavalod');
                    CboCity.setValue(data.fldMahalTavalodId);

                    var txtAddress = App.NewEmployeeDetails.queryById('txtAddress');
                    txtAddress.setValue(data.fldAddress);

                    var txtCodePosti = App.NewEmployeeDetails.queryById('txtCodePosti');
                    txtCodePosti.setValue(data.fldCodePosti);

                    var CboStatusTaahol = App.NewEmployeeDetails.queryById('CboStatusTaahol');
                    CboStatusTaahol.setValue(data.fldTaaholId);

                    var CboMadrak = App.NewEmployeeDetails.queryById('CboMadrak');
                    CboMadrak.setValue(data.fldMadrakId);

                    var CboReshteTahsili = App.NewEmployeeDetails.queryById('CboReshteTahsili');
                    CboReshteTahsili.setValue(data.fldReshteId);

                    var CboNezamVazife = App.NewEmployeeDetails.queryById('CboNezamVazife');
                    if (data.fldJensiyat == "1") {
                        CboNezamVazife.setValue(data.fldNezamVazifeId);
                        CboNezamVazife.enable();
                    }
                    else {
                        CboNezamVazife.clearValue();
                        CboNezamVazife.disable();
                    }

                    var CboMahlSodoor = App.NewEmployeeDetails.queryById('CboMahlSodoor');
                    CboMahlSodoor.setValue(data.fldMahalSodoorId);

                    var CboMeliyat = App.NewEmployeeDetails.queryById('CboMeliyat');
                    CboMeliyat.setValue(data.fldMeliyat);

                    var txtDesc = App.NewEmployeeDetails.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);

                    var Id = App.NewEmployeeDetails.queryById('fldId');
                    Id.setValue(data.fldId);

                    var txtMobile = App.NewEmployeeDetails.queryById('txtMobile');
                    txtMobile.setValue(data.fldMobile);

                    value = "data:image/gif;base64," + data.ImageString;
                    App.NewEmployeeDetails.queryById('Image').setImageUrl(value);

                    App.NewEmployeeDetails.queryById('UserImageId').setValue(data.fldFileId);
                }
                Ext.net.Mask.hide();
            }
        });
    }
    function SaveEmployeeDetails() {
        var txtname = App.NewEmployeeDetails.queryById('txtname');
        var txtFamilyName = App.NewEmployeeDetails.queryById('txtFamilyName');
        var txtFatherName = App.NewEmployeeDetails.queryById('txtFatherName');
        var txtNationalCode = App.NewEmployeeDetails.queryById('txtNationalCode');
        var CboGender = App.NewEmployeeDetails.queryById('CboGender');
        var txtSh_Shenasname = App.NewEmployeeDetails.queryById("txtSh_Shenasname");
        var txtTarikhTavalod = App.NewEmployeeDetails.queryById('txtTarikhTavalod');
        var txtTarikhSodoor = App.NewEmployeeDetails.queryById('txtTarikhSodoor');
        var CboMahalTavalod = App.NewEmployeeDetails.queryById('CboMahalTavalod');
        var CboMahlSodoor = App.NewEmployeeDetails.queryById('CboMahlSodoor');
        var txtCodePosti = App.NewEmployeeDetails.queryById('txtCodePosti');
        var CboStatusTaahol = App.NewEmployeeDetails.queryById('CboStatusTaahol');
        var CboMadrak = App.NewEmployeeDetails.queryById('CboMadrak');
        var CboReshteTahsili = App.NewEmployeeDetails.queryById('CboReshteTahsili');
        var CboNezamVazife = App.NewEmployeeDetails.queryById('CboNezamVazife');
        var CboMeliyat = App.NewEmployeeDetails.queryById('CboMeliyat');
        var txtAddress = App.NewEmployeeDetails.queryById('txtAddress');
        var txtDesc = App.NewEmployeeDetails.queryById('txtDesc');
        var Id = App.NewEmployeeDetails.queryById('fldId');
        var EmployeeId = App.NewEmployeeDetails.queryById('EmployeeId');
        var UserImageId = App.NewEmployeeDetails.queryById('UserImageId');
        var txtMobile = App.NewEmployeeDetails.queryById('txtMobile');

        var er = false;

        /*if (txtname.validate() == false) {
            er = true;
        }
        if (txtFamilyName.validate() == false) {
            er = true;
        }*/
        /*  if (txtFatherName.validate() == false) {
              er = true;
          }*/
        if (txtNationalCode.validate() == false) {
            er = true;
        }
        if (CboGender.validate() == false) {
            er = true;
        }
        if (txtSh_Shenasname.validate() == false) {
            er = true;
        }
        if (txtTarikhTavalod.validate() == false) {
            er = true;
        }
        if (txtTarikhSodoor.validate() == false) {
            er = true;
        }
        if (CboMahalTavalod.validate() == false) {
            er = true;
        }
        if (CboMahlSodoor.validate() == false) {
            er = true;
        }
        if (txtCodePosti.validate() == false) {
            er = true;
        }
        if (CboStatusTaahol.validate() == false) {
            er = true;
        }
        if (CboMadrak.validate() == false) {
            er = true;
        }
        if (CboReshteTahsili.validate() == false) {
            er = true;
        }
        if (CboNezamVazife.validate() == false) {
            er = true;
        }
        if (CboMeliyat.validate() == false) {
            er = true;
        }
        if (txtAddress.validate() == false) {
            er = true;
        }


        if (er == true)
            return;

        var Gender = false;
        if (CboGender.getValue() == "1")
            Gender = true;
        var Meliyat = false;
        if (CboMeliyat.getValue() == "1")
            Meliyat = true;
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });

        Ext.net.DirectMethod.request({
            url: '/Comon/Employee/SaveEmployeeDetail',
            params: {
                fldId: Id.getValue(),
                fldName: txtname.getValue(),
                fldFamily: txtFamilyName.getValue(),
                fldFatherName: txtFatherName.getValue(),
                fldCodemeli: txtNationalCode.getValue(),
                fldJensiyat: Gender,
                fldEmployeeId: EmployeeId.getValue(),
                fldSh_Shenasname: txtSh_Shenasname.getValue(),
                fldTarikhTavalod: txtTarikhTavalod.rawValue,
                fldTarikhSodoor: txtTarikhSodoor.rawValue,
                fldMeliyat: Meliyat,
                fldMahalTavalodId: CboMahalTavalod.getValue(),
                fldMahalSodoorId: CboMahlSodoor.getValue(),
                fldCodePosti: txtCodePosti.getValue(),
                fldTaaholId: CboStatusTaahol.getValue(),
                fldMadrakId: CboMadrak.getValue(),
                fldReshteId: CboReshteTahsili.getValue(),
                fldNezamVazifeId: CboNezamVazife.getValue(),
                fldAddress: txtAddress.getValue(),
                fldFileId: UserImageId.getValue(),
                fldDesc: txtDesc.getValue(),
                fldMobile: txtMobile.getValue()
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1) {
                    ic = Ext.MessageBox.ERROR;
                }
         
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK,
                    fn: function (btn) {
                        if (btn == 'ok') {
                            if (data.Er != 1) {
                                if ('@ViewBag.flag' == "1") {
                                    Ext.net.DirectMethod.request({
                                        url: '/Daramad/AnnouncementComplications_Fish/PrintDaraei',
                                        params: {
                                            FishId: '@ViewBag.FishId',
                                            ElamAvarezId: '@ViewBag.ElamAvarezId'
                                        },
                                        success: function () {
                                            Ext.net.Mask.hide();
                                        }
                                    });
                                }
                                App.NewEmployeeDetails.destroy();
                            }
                        }
                    }
                });
                Ext.net.Mask.hide();
               
            }

        });
    }

    function EnterNext() {
        var keyfield = App.NewEmployeeDetails.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        if (keyfield.itemId == "txtNationalCode") {
            if (App.NewEmployeeDetails.queryById('txtname').readOnly == true) {
                nextfld = App.NewEmployeeDetails.queryById('txtSh_Shenasname');
            }
            else {
                nextfld = App.NewEmployeeDetails.queryById('txtname');
            }
        }
        else if (keyfield.itemId == "CboReshteTahsili") {
            if (App.NewEmployeeDetails.queryById('CboGender').getValue() == "1") {
                nextfld = App.NewEmployeeDetails.queryById('CboNezamVazife');
            }
            else {
                SearchOrganizationPostPI(45);
                nextfld = App.NewEmployeeDetails.queryById('CboMeliyat');
            }
        }
        else {
            nextfld = keyfield.nextSibling().nextSibling();
        }
        nextfld.focus();
        nextfld.selectText();
    }
</script>
