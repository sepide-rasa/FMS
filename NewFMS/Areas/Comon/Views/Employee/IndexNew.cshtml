  @model IEnumerable<NewFMS.WCF_Common.OBJ_Employee>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{ var X = Html.X();}
<br />
@(Html.X().Panel()
        .ID("SabtEmployee")
            .Title("ثبت اشخاص حقیقی")
                                         .Listeners(li => { li.AfterRender.Handler = "EmployeeSetSize();SelectType();"; li.Render.Fn = "addKeyMapSabtEmployee"; })
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .Border(false)
       .Items(
    X.Panel().Border(false).Items(X.Label()),
        X.Panel().Border(false).Buttons(
                X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ItemID("btnSaveEmployee")
                .Listeners(l => { l.Click.Handler = "SaveEmployee();"; })
            , X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                .Listeners(l => { l.Click.Handler = "LoadEmployee();"; })
            , X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                    .Listeners(l => { l.Click.Handler = "DeleteEmployee();"; })
                , X.Button().Text("اطلاعات تکمیلی").Icon(Ext.Net.Icon.ApplicationViewDetail)
                    .Listeners(l => { l.Click.Handler = "EmployeeDetail();"; })
                   , X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help).Listeners(l => { l.Click.Handler = "HelpEmployee();"; })
            , X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)
                    .OnClientClick("App.SabtEmployee.destroy()")
        ).ButtonAlign(Ext.Net.Alignment.Center)
        .Items(
                X.FormPanel().Border(false)
             .Layout(LayoutType.VBox)
                         .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
            X.FieldSet().Border(false).Items(
                    X.FieldSet().Border(true).Title("اطلاعات شخص حقیقی").Height(80)
                     .Defaults(new { Margin = 2 })
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                .Items(
                    X.Hidden().ItemID("fldId"),
                        X.Label("تابعیت:"),
                    X.ComboBox()
                    .ItemID("CboType")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Editable(false)
                    .TypeAhead(true)
                    .BlankText("لطفا نوع تابعیت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .EmptyText("تابعیت")
                    //.FieldLabel("تابعیت")
                    .Items(
                        new ListItem("داخلی", "0"),
                        new ListItem("خارجی", "1")
                        )
                        .SelectedItems(new { Value = "0" })
                        .Listeners(l => { l.Select.Handler = "SelectType();";
                        /*l.Change.Handler="SelectType();";*/}),
                        X.Label("نام:"),
                        X.TextField()
                        .ItemID("txtName")
        // .FieldLabel("نام")
                       // .MsgTarget(Ext.Net.MessageTarget.Side)
                        .AllowBlank(false)
                        .BlankText("لطفا نام را وارد کنید.")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                                .MaxLength(100)
                                .EnforceMaxLength(true)
                        .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                        .AutoFocus(true)
                                , X.Label("نام خانوادگی:")
                        , X.TextField()
                        .ItemID("txtFamily")
                        .AllowBlank(false)
                        .BlankText("لطفا نام خانوادگی را وارد کنید.")
                        .MaxLength(100)
                        .EnforceMaxLength(true)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
        //                        , X.Label("نام پدر:")
        //                , X.TextField()
        //                .ItemID("txtFather")
        //// .FieldLabel("نام پدر")
        //            //    .MsgTarget(Ext.Net.MessageTarget.Side)
        //                .AllowBlank(false)
        //                .BlankText("لطفا نام پدر را وارد کنید.")
        //                .MaxLength(60)
        //                .EnforceMaxLength(true)
        //                .LabelAlign(Ext.Net.LabelAlign.Top)
        //                .MaskRe("[a-z,A-Z,آ-ی, ,_,-]")
                                , X.Label("کد ملی:")
                                .ItemID("lblCodeMeli")
                        , X.TextField()
                        .ItemID("txtCodeMeli")
                            .Plugins(X.InputMask()
                                    .Mask("AAAAAAAAAA")
                                    .UnmaskOnBlur(true)
                                    .MaskSymbols(ls =>
                                    {
                                        ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                    })
                                )
                        .AllowBlank(false)
                      //  .Width(140)
                        .BlankText("لطفا کد ملی را وارد کنید.")
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                     , X.TextField()
                            .ItemID("txtCodeFaragir")
                            .MaskRe("[0-9]")
                            .AllowBlank(false)
                            .MaxLength(50)
                            .EnforceMaxLength(true)
                            .BlankText("لطفا کد فراگیر را وارد کنید.")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
        //                        , X.Label("جنسیت:")
        //                , X.ComboBox()
        //                .ItemID("CboJensiat")
        //                .LabelAlign(Ext.Net.LabelAlign.Top)
        //                .Editable(false)
        //                .TypeAhead(true)
        //                .BlankText("لطفا جنسیت را انتخاب کنید.")
        //                .QueryMode(DataLoadMode.Local)
        //                .TriggerAction(TriggerAction.All)
        //                .EmptyText("جنسیت")
        ////  .FieldLabel("جنسیت")
        //                .Items(
        //                    new ListItem("مرد", "1"),
        //                    new ListItem("زن", "0")
        //                    )
        //                        .SelectedItems(new { Value = "1" })
                                    , X.Label("نوع شخص:")
                            , X.ComboBox()
                                .ItemID("CboStatus")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .Editable(false)
                            .TypeAhead(true)
                            .BlankText("لطفا نوع را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .EmptyText("...")
        //  .FieldLabel("جنسیت")
                            .Items(
                                new ListItem("عمومی", "0"),
                                new ListItem("خصوصی", "1")
                                )
                                   // .SelectedItems(new { Value = "1" })
                    , X.Label("توضیحات:"),
                        X.TextField()
                    .ItemID("txtDesc")
                    //.Width(4)
                    .ColSpan(3)
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    )
                  @*, X.FieldSet().Border(true).Title("عکس کارمند").Height(115)
                     .Defaults(new { Margin = 2 })
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                .Items(
                    X.FieldSet().Border(false).ColSpan(5).Height(50).Width(400)
                               // .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                                            .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Right })
                                .Defaults(new { Margin = 3 })
                            .Items(
                             X.FileUploadField()
                            .ItemID("FileUploadField1")
                                .ButtonOnly(true).ButtonText("انتخاب عکس(حداکثر 100 کیلوبایت)")
                            .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                        l.Change.Success = "hideprogressEmp();";
                                    }
                                )
                            .Listeners(l => l.Change.Fn = "showFileEmp")
                                    .Icon(Ext.Net.Icon.DiskUpload)
                                  , X.Container().Content(@<div id="fi-button-msg" style="display:none;"></div>)//.ColSpan(3)  
                            //, X.Button()
                            //.ID("ShowButton")
                            //.Text("دانلود عکس")
                            //.Listeners
                            //(l =>
                            //    {
        //        l.Click.Handler = "Download();";
                            //    }
                            //)
                         
                            //, X.Label()
                            //    .Text("حداکثر حجم مجاز برای بارگذاری 100 کیلوبایت می باشد.")
                            )
                                 , 
                                  X.FieldSet().Border(false)
                               // .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                                            .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                                .Defaults(new { Margin = 3 })
                            .Items(X.Image().ItemID("Image").ImageUrl("~/Content/BlankB.jpg").Width(80).Height(90).Border(true))//.ColSpan(2)
                )*@
            )
            )
        ),
        X.GridPanel()
        .ItemID("EmployeeGrid")
            .BottomBar(X.PagingToolbar())
            .Store(
                                X.StoreForModel()
                                            .Listeners(l => l.DataChanged.Handler = "App.SabtEmployee.queryById('EmployeeGrid').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                            )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                        )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                )
                    .Plugins(X.FilterHeader().Remote(true))
                     .Listeners(l =>
                     {
                         l.AfterRender.Handler = "var grid = App.SabtEmployee.queryById('EmployeeGrid');grid.setHeight(App.Win.getHeight() - 305); ";

                     })
        .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                            Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام").Flex(2),
                            Html.X().Column().DataIndex(Model, m => m.fldFamily).Text("نام خانوادگی").Flex(2),
                            Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کد ملی").Flex(3),
                            Html.X().Column().DataIndex(Model, m => m.fldStatusName).Text("نوع شخص").Flex(2),
                            Html.X().Column().DataIndex(Model, m => m.fldTypeShakhsName).Text("تابعیت").Flex(2),
                            Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
    )
                .SelectionModel(
                    Html.X().RowSelectionModel()
                        .Mode(Ext.Net.SelectionMode.Single)
    )
    )
    
)
<script type="text/javascript">

    /*App.Win.addListener('resize', function () {
        App.Employee.setWidth(App.Win.getWidth());
    });
    App.Win.addListener('resize', function () {
        var grid = App.Employee.queryById('EmployeeGrid');
        grid.setHeight(App.Win.getHeight()-240);
    });*/
    function HelpEmployee() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Comon/Employee/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function SelectType() {
        var CboType = App.SabtEmployee.queryById('CboType');
        var lblCodeMeli = App.SabtEmployee.queryById('lblCodeMeli');
        var txtCodeMeli = App.SabtEmployee.queryById('txtCodeMeli');
        var txtCodeFaragir = App.SabtEmployee.queryById('txtCodeFaragir');
        if (CboType.getValue() == "1") {
            lblCodeMeli.setText("کد فراگیر:");
            txtCodeMeli.hide();
            txtCodeFaragir.show();
        }
        else {
            lblCodeMeli.setText("کد ملی:");
            txtCodeMeli.show();
            txtCodeFaragir.hide();
        }
    }
    function EmployeeSetSize() {
        App.SabtEmployee.setWidth(App.Win.getWidth());
        var grid = App.SabtEmployee.queryById('EmployeeGrid');
        grid.setHeight(App.Win.getHeight() - 305);
         if ('@ViewBag.Permission_TypeSh' == "2") {
             App.SabtEmployee.queryById('CboStatus').store.removeAt(0);
             App.SabtEmployee.queryById('CboStatus').setValue("1");
        }
        else if ('@ViewBag.Permission_TypeSh' == "3") {
            App.SabtEmployee.queryById('CboStatus').store.removeAt(1);
            App.SabtEmployee.queryById('CboStatus').setValue("0");
        }
    }

    var UserImageId = 0;
    var UsersId = 0;


    var MojazEmp = 0;
    var sizeeEmp = 0;
    var EndUploadEmp = false;

    var CheckEmp = setInterval(CheckEndEmp, 500);

    function CheckEndEmp() {
        if (EndUploadEmp == true) {
            Ext.net.DirectMethod.request({
                url: '/Employee/ShowPicUpload',
                success: function (data) {
                    value = "data:image/gif;base64," + data.image;
                    App.SabtEmployee.queryById('Image').setImageUrl(value);
                }
            });

            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndEmp);
            EndUploadEmp = false;
        }
    }
    var showFileEmp = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarEmp();
            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png") {
                MojazEmp = 1;
                if (document.getElementById(id).files[0].size <= 102400) {
                    sizeeEmp = 1;
                }
                if (sizeeEmp == 1) {
                    el.update('<b>فایل انتخاب شده:</b> ' + v);
                }
                else {
                    el.update('<b>فایل انتخاب شده:</b> ');
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update('<b>فایل انتخاب شده:</b> ');
            }
        }
    };

    function hideprogressEmp() {
        if (MojazEmp == 1 && sizeeEmp == 1) {
            EndUploadEmp = true;
        }
        MojazEmp = 0;
        sizeeEmp = 0;
    }

    function showProgressBarEmp() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }

    function LoadEmployee() {
        var SelectedRow = App.SabtEmployee.queryById('EmployeeGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Comon/Employee/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    var CboType = App.SabtEmployee.queryById('CboType');
                    CboType.setValue(data.fldTypeShakhs);
                    var txtName = App.SabtEmployee.queryById('txtName');
                    txtName.setValue(data.fldName);
                    var txtFamily = App.SabtEmployee.queryById('txtFamily');
                    txtFamily.setValue(data.fldFamily);
                    if (data.fldTypeShakhs == "0") {
                        var txtCodeMeli = App.SabtEmployee.queryById('txtCodeMeli');
                        txtCodeMeli.setValue(data.fldCodemeli);
                    }
                    else {
                        var txtCodeFaragir = App.SabtEmployee.queryById('txtCodeFaragir');
                        txtCodeFaragir.setValue(data.fldCodemeli);
                    }
                    var CboStatus = App.SabtEmployee.queryById('CboStatus');
                    CboStatus.setValue(data.fldStatus);
                    /*var CboJensiat = App.Employee.queryById('CboJensiat');
                    CboJensiat.setValue(data.fldJensiyat);
                    var txtFather = App.Employee.queryById('txtFather');
                    txtFather.setValue(data.fldFatherName);
                    UserImageId = data.fldFileId;*/
                    UsersId = data.fldId; 

                    SelectType();

                 /*   var fldfile = "data:image/gif;base64," + data.fldImage;
                    App.Employee.queryById('Image').setImageUrl(fldfile);*/

                    var txtDesc = App.SabtEmployee.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    var fldId = App.SabtEmployee.queryById('fldId');
                    fldId.setValue(data.fldId);
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveEmployee() {
        var CboType = App.SabtEmployee.queryById('CboType');
        var txtName = App.SabtEmployee.queryById('txtName');
        var txtFamily = App.SabtEmployee.queryById('txtFamily');
        var txtCodeMeli = App.SabtEmployee.queryById('txtCodeMeli');
        var txtCodeFaragir = App.SabtEmployee.queryById('txtCodeFaragir');
        var CboStatus = App.SabtEmployee.queryById('CboStatus');
        /*var CboJensiat = App.Employee.queryById('CboJensiat');
        var txtFather = App.Employee.queryById('txtFather');*/
        var txtDesc = App.SabtEmployee.queryById('txtDesc');
        var fldId = App.SabtEmployee.queryById('fldId');
        var code = "";
            var er = false;

            if (txtCodeMeli.getValue() == "" && CboType.getValue() == "0") {
                alert("لطفا کد ملی را وارد نمایید.");
                return;
            }
            else if (txtCodeFaragir.validate() == false && CboType.getValue() == "1") {
                alert("لطفا کد فراگیر را وارد نمایید.");
                return;
            }
            if (txtName.validate() == false) {
                er = true;
            }
            if (txtFamily.validate() == false) {
                er = true;
            }

            if (CboStatus.validate() == false) {
                er = true;
            }
            /*if (CboJensiat.validate() == false) {
                er = true;
            }
            if (txtFather.validate() == false) {
                er = true;
            }*/

            if (er == true)
                return;

          /*  var Jensiat = false;
            if (CboJensiat.getValue() == "1")
                Jensiat = true;*/
            if (CboType.getValue() == "0")
            {
                code = txtCodeMeli.getValue();
            }
            else{
                code = txtCodeFaragir.getValue();
            }
            var Status = false;
            if (CboStatus.getValue() == "1")
                Status = true;
            
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Comon/Employee/Save',
                params: {
                    fldId: fldId.getValue(),
                    fldName: txtName.getValue(),
                    fldFamily: txtFamily.getValue(),
                    fldCodemeli: code,
                    fldStatus: Status,
                   /* fldFatherName: txtFather.getValue(),
                    fldFileId: UserImageId,
                    fldJensiyat: Jensiat,*/
                    fldDesc: txtDesc.getValue(),
                    fldTypeShakhs: CboType.getValue()
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.SabtEmployee.queryById('EmployeeGrid').store.load();
                    if (data.Er != 1)
                        ClearEmployee();
                }

            });
    }
    function DeleteEmployee() {
        var SelectedRow = App.SabtEmployee.queryById('EmployeeGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Comon/Employee/Delete',
                            params: {
                                id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.SabtEmployee.queryById('EmployeeGrid').store.load();
                            }
                        });
                        Ext.net.Mask.hide();
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function ClearEmployee() {
        App.SabtEmployee.queryById('fldId').setValue(0);
        App.SabtEmployee.queryById('txtName').setValue("");
        App.SabtEmployee.queryById('txtFamily').setValue("");
        App.SabtEmployee.queryById('txtCodeMeli').setValue("");
        App.SabtEmployee.queryById('txtCodeFaragir').setValue("");
        App.SabtEmployee.queryById('CboStatus').setValue("1");
        /*App.Employee.queryById('CboJensiat').setValue("");
        App.Employee.queryById('txtFather').setValue("");*/
        App.SabtEmployee.queryById('txtDesc').setValue("");
        /*App.Employee.queryById('Image').setImageUrl("/Content/BlankB.jpg");
        Ext.get('fi-button-msg').update('<b>فایل انتخاب شده:</b> ');*/
    }
    function EmployeeDetail() {
        var SelectedRow = App.SabtEmployee.queryById('EmployeeGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Comon/Employee/EmployeeDetails',
                params: {
                    Id: SelectedRow.data.fldId,
                    flag: 0,
                    FishId: 0,
                    ElamAvarezId:0
                },
                success: function (data) {
                }
            })
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    var addKeyMapSabtEmployee = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.SabtEmployee.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtDesc") {
                        nextfld = App.SabtEmployee.queryById('btnSaveEmployee');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>