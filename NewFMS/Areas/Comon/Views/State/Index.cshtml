@model IEnumerable<NewFMS.WCF_Common.OBJ_State>
@using Ext.Net.MVC;
@{

    var X = Html.X();
}



@(X.Window().Maximized(true).Listeners(li => li.AfterRender.Handler = "StateMap() ;")
                                .ID("State")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.Panel().Border(false)
                .Border(false)
                .AutoScroll(true)

                .Items(
                                         X.TabPanel().ID("StateTab")
                    .AutoScroll(true).Height(630).Items(
                        X.Panel().ItemID("GridPanel")
                                .Title("استان")
                        .Items(
                    X.GridPanel().AutoScroll(true)
                        .TopBar(
                        Html.X().Toolbar()
                        .Items(
                            X.Button().Text("جدید").Icon(Ext.Net.Icon.Add).ToolTip("کلید میانبر F8")
                                                        .Listeners(li => li.Click.Handler = "NewState();"),
                            X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil).ToolTip("کلید میانبر F2")
                                                        .Listeners(Li => Li.Click.Handler = "EditState();"),
                            X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete).ToolTip("کلید میانبر F9")
                                .Listeners(de =>
                                {
                                    de.Click.Handler = "if (App.State.queryById('GridState').selModel.getLastSelected() == null) {Ext.MessageBox.show({ title: 'خطا', msg: 'لطفا یک سطر را انتخاب کنید',icon: Ext.MessageBox.ERROR,buttons: Ext.MessageBox.OK});return false;}else DeleteState();";
                                })
                        )
                    )
                            .ItemID("GridState").Flex(2)
                    .BottomBar(X.PagingToolbar())
                    .Height(600)
                    .ColumnWidth(0.6)
                    .Layout(Ext.Net.LayoutType.Column)
                    .Store(
                        X.StoreForModel()
                        .Proxy(Html.X().AjaxProxy()
                            .Url(Url.Action("Read"))
                            .Reader(Html.X().JsonReader().Root("data"))

                        )
                        .PageSize(20)
                        .RemoteFilter(true)
                        .RemotePaging(true)
                                                        .Listeners(l => l.DataChanged.Handler = "App.State.queryById('GridState').selModel.refresh();")
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(true))
                    .ColumnModel(
                           Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1),
                            Html.X().Column().DataIndex(Model, m => m.fldName).Text("استان").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )

                ))
            )
        )
)

<script type="text/javascript">

    function StateMap() {
        var k = new Ext.KeyMap(
            document,
            [{
                target: Ext.get('State'),
                scope: this,
                key: [119],
                fn: function (key, event) {
                    if (App.State && App.NewState) {
                        if (App.NewState.active == false)
                            NewState();
                    }
                    else if (App.State && !App.NewState)
                        NewState();
                }
            },
            {
                target: App.State.getTargetEl(),
                scope: this,
                key: [113],
                fn: function (key, event) {
                    if (App.State && App.NewState) {
                        if (App.State.active == false)
                            EditState();
                    }
                    else if (App.State && !App.NewState)
                        EditState();
                }
            },
            {
                target: App.State.getTargetEl(),
                scope: this,
                key: [120],
                fn: function (key, event) {
                    if (App.State && App.NewState) {
                        if (App.NewState.active == false)
                            DeleteState();
                    }
                    else if (App.State && !App.NewState)
                        DeleteState();
                }
            }]
            )
    }
    function NewState() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Comon/State/new',
            params: {
                id: 0
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }
    function EditState() {
        var SelectedRow = App.State.queryById('GridState').selModel.getLastSelected();

        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Comon/State/new',
                params: {
                    id: SelectedRow.data.fldId,
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DeleteState() {
        var SelectedHeaderRow = App.State.queryById('GridState').selModel.getLastSelected();
        if (SelectedHeaderRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.DirectMethod.request({
                            url: '/Comon/State/Delete',
                            params: {
                                id: SelectedHeaderRow.data.fldId
                            },
                            success: function (data) {
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: Ext.MessageBox.INFO,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.State.queryById('GridState').store.load()
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

</script>
