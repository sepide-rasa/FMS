@model IEnumerable<NewFMS.WCF_Common.OBJ_Bank>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{ var X = Html.X();}
@*<style>
    #test legend{
        text-align:right!important;
    }
</style>*@
<br />
@(Html.X().Panel()
        .ID("SabtBank")
            .Title("ثبت بانک")
             .Listeners(li => { li.AfterRender.Handler = "SabtBankSetSize();"; li.Render.Fn = "addKeyMapSabtBank"; })
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .Border(false)
       .Items(
    X.Panel().Border(false).Items(X.Label()),
            X.Panel().Border(false).Buttons(
            X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk)
                    .Listeners(l => { l.Click.Handler = "SaveBank();"; })
            , X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                    .Listeners(l => { l.Click.Handler = "LoadBank();"; })
            , X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                    .Listeners(l => { l.Click.Handler = "DeleteBank();"; })
               , X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
               .Listeners(l => { l.Click.Handler = "HelpBank();"; })
            , X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)
                    .OnClientClick("App.SabtBank.destroy()")
        ).ButtonAlign(Ext.Net.Alignment.Center)
        .Items(
            X.FormPanel().Border(false)
                 .Layout(LayoutType.VBox)
                 .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                        X.FieldSet().Border(false)
                    
                    .Items(
                        X.FieldSet().Border(true).Title("نام بانک")
                         .Layout(LayoutType.VBox)
                         .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                .Items(
                                    X.FieldSet().Border(false)
                     .Defaults(new { Margin = 2 })
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                .Items(
                    X.Hidden().ItemID("fldId"),
                        X.Label("نام بانک:"),
                       X.TextField()
                        .ItemID("txtBankName")
                            .MaxLength(100)
                        .EnforceMaxLength(true)
                      //  .Width(100)
                    .AllowBlank(false)
                    .BlankText("لطفا نام بانک را وارد کنید.")
                    .AutoFocus(true)
                    ,X.Label("کد بانک مرکزی:"),
                        X.TextField()
                           // .Width(100)
                    .ItemID("txtCentralBankCode")
                        .MaxLength(3)
                            .EnforceMaxLength(true)
                    .MaskRe("/[0-9]/")
                        .Listeners(l => { l.Change.Handler = "CheckByte(App.SabtBank.queryById('txtCentralBankCode'))"; })
                    .AllowBlank(false)
                    .BlankText("لطفا کد بانک مرکزی را وارد کنید.")
                       , X.Label("شناسه بانک:"),
                           X.TextField()
                            //.Width(100)
                            .ItemID("txtInfinitiveBank")
                            .MaxLength(20)
                        .EnforceMaxLength(true)
                    .AllowBlank(false)
                    .BlankText("لطفا شناسه بانک را وارد کنید.")
                     , X.Label("نوع بانک:")
                            , X.ComboBox()
                                .ItemID("CboFix")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .Editable(false)
                            .TypeAhead(true)
                            .BlankText("لطفا نوع را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .EmptyText("...")
        //  .FieldLabel("جنسیت")
                            .Items(
                                new ListItem("ثابت", "1"),
                                new ListItem("عمومی", "0")
                                )
                                    .SelectedItems(new { Value = "1" })
                    , X.Label("توضیحات:"),
                        X.TextField()
                    .ItemID("txtDesc")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Width(378)
                    .ColSpan(4)
                    )
                    )
                            , X.FieldSet().Border(true).Title("لوگو بانک").Height(115)
                        .Defaults(new { Margin = 2 })
                        .Layout(LayoutType.Table)
                        .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                    .Items(
                                 X.FieldSet().Border(false).ColSpan(2).Height(80).Width(300)
        // .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                                            .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Right })
                                .Defaults(new { Margin = 3 })
                            .Items(
                             X.FileUploadField()
                            .ItemID("FileUploadField1")
                                .ButtonOnly(true).ButtonText("انتخاب عکس(حداکثر 100 کیلوبایت)")
                            .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                        l.Change.Success = "hideprogressB();";
                                    }
                                )
                            .Listeners(l => l.Change.Fn = "showFileB")
                                    .Icon(Ext.Net.Icon.DiskUpload)
                                          , X.Button().Text("حذف عکس").Listeners(l => l.Click.Handler = "DeleteFileB()").Icon(Ext.Net.Icon.Delete)
                                  , X.Container().Content(@<div id="fi-button-msg" style="display:none;width:195px;"></div>)//.ColSpan(3)
      
                            //, X.Button()
                            //.ID("ShowButton")
                            //.Text("دانلود عکس")
                            //.Listeners
                            //(l =>
                            //    {
        //        l.Click.Handler = "Download();";
                            //    }
                            //)

                            //, X.Label()
                            //    .Text("حداکثر حجم مجاز برای بارگذاری 100 کیلوبایت می باشد.")
                            )
                                 ,
                                      X.FieldSet().Border(false).ColSpan(2)
                               // .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 3 })
                                            .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                                .Defaults(new { Margin = 3 })
                            .Items(X.Image().ItemID("Image").ImageUrl("~/Content/BlankB.jpg").Width(80).Height(90).Border(true))
                            )
                )
            )
        ),
        X.GridPanel()
        .ItemID("BankGrid")
            .BottomBar(X.PagingToolbar())
            .Store(
                            X.StoreForModel()
                                            .Listeners(l => l.DataChanged.Handler = "App.SabtBank.queryById('BankGrid').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                            )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                        )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                )
                    .Plugins(X.FilterHeader().Remote(true))
                     .Listeners(l =>
                     {
                         l.AfterRender.Handler = "var grid = App.SabtBank.queryById('BankGrid');grid.setHeight(App.Win.getHeight() - 450); ";

                     })
        .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                Html.X().Column().DataIndex(Model, m => m.fldBankName).Text("نام بانک").Flex(4),
                                    Html.X().Column().DataIndex(Model, m => m.fldFixTitle).Text("نوع بانک").Flex(4),
                                    Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
    )
                .SelectionModel(
                    Html.X().RowSelectionModel()
                        .Mode(Ext.Net.SelectionMode.Single)
    )
    )
)
<script type="text/javascript">
    var IsDel = 0;
    var ImageId = 0;

   /* App.Win.addListener('resize', function () {
        App.Bank.setWidth(App.Win.getWidth());
    });
    App.Win.addListener('resize', function () {
        var grid = App.Bank.queryById('BankGrid');
        grid.setHeight(App.Win.getHeight()-405);
    });*/

    function SabtBankSetSize() {
        App.SabtBank.setWidth(App.Win.getWidth());
        var grid = App.SabtBank.queryById('BankGrid');
        grid.setHeight(App.Win.getHeight() - 450);

        if ('@ViewBag.Permission_TypeB' == "2") {
            App.SabtBank.queryById('CboFix').store.removeAt(0);
        }
        else if ('@ViewBag.Permission_TypeB' == "3") {
            App.SabtBank.queryById('CboFix').store.removeAt(1);
        }
    }


    var MojazB = 0;
    var sizeeB = 0;
    var EndUploadB = false;
    var sss;

    var CheckB = setInterval(CheckEndB, 500);

    function CheckEndB() {
        if (EndUploadB == true) {
            Ext.net.DirectMethod.request({
                url: '/Bank/ShowPicUpload',
                success: function (data) {
                    value = "data:image/gif;base64," + data.image;
                    sss = data.image;
                    App.SabtBank.queryById('Image').setImageUrl(value);
                    Ext.MessageBox.hide();
                    Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
                    clearInterval(CheckEndB);
                    EndUploadB = false;
                }
            });

            
        }
    }
    var showFileB = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarB();
            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png") {
                MojazB = 1;
                if (document.getElementById(id).files[0].size <= 102400) {
                    sizeeB = 1;
                }
                if (sizeeB == 1) {
                    el.update('<b>فایل انتخاب شده:</b> ' + v);
                    IsDel = 0;
                }
                else {
                    el.update('<b>فایل انتخاب شده:</b> ');
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update('<b>فایل انتخاب شده:</b> ');
            }
        }
    };

    function hideprogressB() {
        if (MojazB == 1 && sizeeB == 1) {
            EndUploadB = true;
        }
        MojazB = 0;
        sizeeB = 0;
    }

    function showProgressBarB() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
    function DeleteFileB() {
        App.SabtBank.queryById('Image').setImageUrl("/Content/Blank.jpg");
        Ext.get('fi-button-msg').update('');
        IsDel = 1;
       /* Ext.net.DirectMethod.request({
            url: '/Bank/DeleteFile',
            success: function (data) {
            }
        });*/
        
    }
    function LoadBank() {
        var SelectedRow = App.SabtBank.queryById('BankGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Bank/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    var txtBankName = App.SabtBank.queryById('txtBankName');
                    txtBankName.setValue(data.fldBankName);
                    var txtCentralBankCode = App.SabtBank.queryById('txtCentralBankCode');
                    txtCentralBankCode.setValue(data.fldCentralBankCode);
                    var txtInfinitiveBank = App.SabtBank.queryById('txtInfinitiveBank');
                    txtInfinitiveBank.setValue(data.fldInfinitiveBank);
                    var txtDesc = App.SabtBank.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    var CboFix = App.SabtBank.queryById('CboFix');
                    CboFix.setValue(data.fldFix);
                    var fldId = App.SabtBank.queryById('fldId');
                    fldId.setValue(data.fldId);
                    ImageId = data.fldFileId;

                    var fldfile = "data:image/gif;base64," + data.fldImage;
                    App.SabtBank.queryById('Image').setImageUrl(fldfile);

                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function HelpBank() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Comon/Bank/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }

    function SaveBank() {
        var CboFix = App.SabtBank.queryById('CboFix');
        var txtBankName = App.SabtBank.queryById('txtBankName');
        var txtCentralBankCode = App.SabtBank.queryById('txtCentralBankCode');
        var txtInfinitiveBank = App.SabtBank.queryById('txtInfinitiveBank');
        var txtDesc = App.SabtBank.queryById('txtDesc');
        var fldId = App.SabtBank.queryById('fldId');
        var er = false; 

            if (txtBankName.validate() == false) {
                er = true;
            }
            if (txtCentralBankCode.validate() == false) {
                er = true;
            }
            if (txtInfinitiveBank.validate() == false) {
                er = true;
            }
            if (txtCentralBankCode.getValue() > 255) {
                Ext.MessageBox.show({
                    Name: "خطا",
                    msg: "شناسه بانک وارد شده بیش از حد مجاز است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                er = true;
            }
            if (er == true)
                return;

            var Fix = true;
            if (CboFix.getValue() == "0")
                Fix = false;

            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Bank/Save',
                params: {
                    fldId: fldId.getValue(),
                    fldBankName: txtBankName.getValue(),
                    fldCentralBankCode: txtCentralBankCode.getValue(),
                    fldInfinitiveBank: txtInfinitiveBank.getValue(),
                    fldFileId: ImageId,
                    fldDesc: txtDesc.getValue(),
                    fldFix: Fix,
                    IsDel: IsDel
                },
                success: function (data) {
                    Ext.net.Mask.hide();
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.SabtBank.queryById('BankGrid').store.load();
                    if (data.Err != 1)
                        ClearBank();
                }

            });
    }
    function DeleteBank() {
        var SelectedRow = App.SabtBank.queryById('BankGrid').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                        Ext.net.DirectMethod.request({
                            url: '/Bank/Delete',
                            params: {
                                id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.SabtBank.queryById('BankGrid').store.load()
                            }
                        });
                        Ext.net.Mask.hide();
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function ClearBank() {   
        App.SabtBank.queryById('fldId').setValue(0);
        App.SabtBank.queryById('txtBankName').setValue("");
        App.SabtBank.queryById('txtCentralBankCode').setValue("");
        App.SabtBank.queryById('txtInfinitiveBank').setValue("");
        App.SabtBank.queryById('txtDesc').setValue("");
        App.SabtBank.queryById('Image').setImageUrl("/Content/BlankB.jpg");
        Ext.get('fi-button-msg').update('<b>فایل انتخاب شده:</b> ');
    }
    var addKeyMapSabtBank = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.SabtBank.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtDesc") {
                        nextfld = App.SabtBank.queryById('FileUploadField1');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>