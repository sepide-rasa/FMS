@model IEnumerable<NewFMS.WCF_Common.OBJ_Permission>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}

@(X.Panel().Border(false)
                    .ID("UserforPermission")
                                .Listeners(li => li.AfterRender.Handler = "PermissionforUserSetSize();")
    .Title("تعیین دسترسی")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.Panel()
                .Border(false)
                .AutoScroll(true)
    //.KeyMap(
    //    Html.X().KeyMap()
    //        .ID("PermissionMap")
    //        .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
    //        .Binding(b =>
    //        {
    //            b.Add(Html.X().KeyBinding()
    //                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
    //                .Handler("SavePermission(); ")
    //            );

    //        }))
    .Items(
        X.Panel()
            .Border(false)
            .TopBar(
                Html.X().Toolbar()
                    .Items(


                            //X.Button()
                            //    .Text("ذخیره")
                            //    .Icon(Ext.Net.Icon.Add)
                            //    .Listeners(li => li.Click.Handler = "SavePermission();"),
                              X.Button().Text("راهنما")
                              .Icon(Ext.Net.Icon.Help)
                                  .Listeners(l => { l.Click.Handler = "HelpPermission();"; })

                                //, X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
        //.Listeners(de =>
        //    {
        //        de.Click.Handler = "HelpPermission();";
        //    })
                            )
                        )
            .Items(
                X.Panel()
                        .ItemID("Panel")
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                    .Defaults(new { Margin = 5 })
                    .Height(50)
                    .Items(
                        //    X.Label("گروه کاربری:"),
                        //X.ComboBox()
                        //    .LabelAlign(Ext.Net.LabelAlign.Top)
                        //    .ItemID("CboGrohKarbari")
                        //    .Width(200)
                        //    .TypeAhead(true)
                        //    .Editable(false)
                        //    .QueryMode(DataLoadMode.Local)
                        //    .TriggerAction(TriggerAction.All)
                        //    .DisplayField("Name")
                        //    .ValueField("ID")
                        //    .Listeners(a =>
                        //    {
                        //        // a.Select.Handler = "Change()";
                        //        a.Select.Handler = "App.UserforPermission.queryById('CboModule').clearValue(); App.UserforPermission.queryById('CboModule').getStore().load()";
                        //    }
                        //    )
                        //    .Store(
                        //        X.Store()
                        //            .Model(
                        //                X.Model()
                        //                    .IDProperty("fldId")
                        //                    .Fields(
                        //                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                        //                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                        //                            )
                        //                )
                        //            .Proxy(X.AjaxProxy()
                        //            .Url(Url.Action("GetUserGroup"))
                        //            .Reader(X.JsonReader().Root("data"))
                        //             )
                        //                 .Listeners(li => li.BeforeLoad.Handler = "LoadUserGroupforUser();")
                        //     )
                        //     ,
                                 X.Label("سازمان_ماژول:"),
                            X.ComboBox()
                                .LabelAlign(Ext.Net.LabelAlign.Top)
                                .ItemID("CboModule")
                                .Width(500)
                                .TypeAhead(true)
                                .AllowBlank(false)
                                .BlankText("لطفا سازمان_ماژول را انتخاب کنید")
                                .Editable(false)
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .DisplayField("Name")
                                .ValueField("ID")
                                    .Listeners(l => l.AfterRender.Handler = "App.UserforPermission.queryById('CboModule').validate();")
                                .Listeners(a =>
                                {
                                    a.Select.Handler = "ChangeforUser()";
                                }
                                )
                                .Store(
                                    X.Store()
                                   // .AutoLoad(false)
                                    .Model(
                                        X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                                    )
                                        )
                                    .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetModuleForUser"))
                                    .Reader(X.JsonReader().Root("data"))
                                        )
                                        //.Parameters(ps => ps.Add(new StoreParameter("userGroup", "App.UserforPermission.queryById('CboGrohKarbari').getValue()", ParameterMode.Raw)))
                                 )
                    )
            ,
                    X.Panel()
                            .Border(false).AutoScroll(true).ItemID("PnlForTree")
                        .Items(
                            X.TreePanel()
                                        .ID("TreeUserforPermission")
                                .AutoScroll(true)
                                .Width(600)
                                .ColSpan(2)
        //.Expand(true)
                                    .Listeners(l => l.AfterItemCollapse.Fn = "reloadTreePermissionforUser")
                                .UseArrows(true)
                                .Border(false)
                                .Store(
                                    X.TreeStore()
                                        .AutoLoad(false)
                                        .Proxy(
                                            Html.X().AjaxProxy()
                                                    .Url(Url.Action("NodeLoadGroupTreePermissionforUser"))
                                            )
                                                     .Listeners(l =>
                                {
                                    l.BeforeLoad.Fn = "GetParamTreePermissionforUser";
                                })
                                    )
                                       .Listeners(a =>
                        {
                            a.ItemClick.Fn = "ShowUserPer";
                            // a.AfterRender.Handler = " App.TreeUserforPermission.expandAll();";
                        })
                                .Root(
                                    Html.X().Node()
                                        .NodeID("0")
        //.Expanded(true)
                                        .Text("تعیین دسترسی")
                                        .Checked(null))
                                )
            )
                        )
)
)
<script type="text/javascript">
    var GetParamTreePermissionforUser = function (store, operation, eOpts) {
        var nodeId = operation.node.getId();
        operation.params.nod = nodeId;
    };
    var reloadTreePermissionforUser = function (record, value, htmlrec) {
        if (value == 0) {
            App.TreePermission.expandAll();
        }
    };
    function PermissionforUserSetSize() {
        App.UserforPermission.setWidth(App.Win.getWidth());
        var pnl = App.UserforPermission.queryById('PnlForTree');
        pnl.setHeight(App.Win.getHeight() - 251);
    }
    function LoadUserGroupforUser() {
        Ext.net.DirectMethod.request({
            url: '/Comon/Permission/ReloadDrp',
            success: function (data) {
                /*var CboType = App.UserforPermission.queryById('CboGrohKarbari');
                CboType.setValue(data.fldUserGroupId);
                App.UserforPermission.queryById('CboModule').clearValue(); App.UserforPermission.queryById('CboModule').getStore().load();
                /*var CboModule = App.Permission.queryById('CboModule');
                CboModule.setValue(CboModule.store.getAt(0));
                Change();*/
            }
        });
    }

    var ShowUserPer = function (treeModel, record, item, index, e, eOpts) {
        var iconElClicked = e.getTarget('.x-tree-icon');
        if (iconElClicked) {
            App.UserforPermission.body.mask("در حال بارگذاری");
            Ext.net.DirectMethod.request({
                url: '/Comon/Permission/ShowUsers',
                params: {
                    ApplicationPartId: record.data.id,
                    ModuleOrg: App.UserforPermission.queryById('CboModule').getValue()
                },
                success: function () {
                    App.UserforPermission.body.mask().hide();
                }
            });
        }
    };

    function ChangeforUser() {
        App.TreeUserforPermission.store.getProxy().extraParams = {
            "UserGroup_ModuleOrganID": App.UserforPermission.queryById('CboModule').getValue()
        };
        if (App.TreeUserforPermission.getRootNode().isExpanded() == true) {
            App.TreeUserforPermission.store.load();
            App.TreeUserforPermission.collapseAll();
        }
        else {
            App.TreeUserforPermission.expandAll();
        }
    }
</script>