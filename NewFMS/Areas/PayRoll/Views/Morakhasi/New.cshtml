@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Window()
        .Modal(true)
        .Listeners(li => { li.AfterRender.Handler = "LoadMorakhasi();"; li.Render.Fn = "addKeyMapNewMorakhasi"; })
    .Width(530)
        //   .Height(300)
    .Resizable(false)
    .Title("اطلاعات مرخصی جدید")
    .ID("NewMorakhasi")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel()
            .ButtonAlign(Ext.Net.Alignment.Center)
            .Border(false)
            .KeyMap(Html.X().KeyMap()
                .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
                .Binding(b =>
                {
                    b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("checkSaveMorakhasi(); ")
                    );

                }))
            .DefaultButton("btn")
            .Layout(Ext.Net.LayoutType.VBox)
            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Buttons(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
                        .Listeners(l => l.Click.Handler = "checkSaveMorakhasi();")
                    .ItemID("btnSave"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .ToolTip("کلید میانبر Esc")
                    .OnClientClick("App.NewMorakhasi.destroy();")
                    )
            .Items(
                X.FieldSet()
                        .ItemID("Panel").Title("اطلاعات مرخصی")
                    .Layout(Ext.Net.LayoutType.Table)
                    .Border(true)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 2 })
                        .Items(
                            X.Hidden().ItemID("fldId"),
                                X.Hidden().ItemID("fldPersonalId"),
        /*   X.Label("سال:"),
       X.ComboBox()
       .LabelAlign(Ext.Net.LabelAlign.Top)
       .ItemID("CboYear")
       //.FieldLabel("سال")
           .Editable(false)
               .AutoFocus(true)
       .TypeAhead(true)
       .BlankText("لطفا سال را انتخاب کنید.")
       .QueryMode(DataLoadMode.Local)
       .TriggerAction(TriggerAction.All)
       .Items(
                   new ListItem("1387", "1387"),
                   new ListItem("1389", "1389"),
                   new ListItem("1390", "1390"),
                   new ListItem("1391", "1391"),
                   new ListItem("1392", "1392"),
                   new ListItem("1393", "1393"),
                   new ListItem("1394", "1394"),
                   new ListItem("1395", "1395"),
                   new ListItem("1396", "1396"),
                   new ListItem("1397", "1397"),
                   new ListItem("1398", "1398"),
                   new ListItem("1399", "1399")
           ),*/
             X.Label("نام و نام خانوادگی:"),
                    X.TextField()
                        .ItemID("txtName")
                            .FieldStyle("background-image:none;background-color:#dfe8f6")
                        .ReadOnly(true)
                        .AllowBlank(false),
                    X.Label("کد ملی:"),
                    X.TextField()
                            .ItemID("txtNationalCode")
                                .FieldStyle("background-image:none;background-color:#dfe8f6")
                            .ReadOnly(true)
                        .AllowBlank(false),
                    X.Label("شماره پرسنلی:"),
                    X.TextField()
                            .ItemID("txtShomarePersoneli")
                                .FieldStyle("background-image:none;background-color:#dfe8f6")
                            .ReadOnly(true)
                        .AllowBlank(false),
                            X.Label("نوبت پرداخت:"),
                    X.ComboBox()
                         .AutoFocus(true)
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .ItemID("CboNobatePardakht")
                    .Editable(false)
                    .TypeAhead(true)
                        .BlankText("لطفا نوبت پرداخت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .Items(
                        new ListItem("یک", "1"),
                        new ListItem("دو", "2"),
                        new ListItem("سه", "3"),
                        new ListItem("چهار", "4"),
                        new ListItem("پنج", "5")
                    )
                    .SelectedItems(new { Value = "1" })
                        ,
                     X.Label("سال آخرین حکم:")
        , X.TextField()
                                .ItemID("txtSalAkharinHokm")
        //.FieldLabel(":سال")
                                .RTL(false).LabelCls("text-align: right;").LabelSeparator("")
                            .Plugins(X.InputMask()
                                .Mask("1CCC")
                                .MaskSymbols(ls =>
                                {
                                    ls.Add(new MaskSymbol { Name = "C", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                })
                            )
                            .AllowBlank(false)
                           // .Width(150)
                                .BlankText("لطفا سال آخرین حکم را وارد کنید.")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
        //   .MsgTarget(Ext.Net.MessageTarget.Side)

                                , X.Label("تعداد مرخصی:")
                        , X.TextField()
                        .ItemID("txtTedad")
                        .Text("0")
                        .MaskRe("/[0-9]/")
                        .MaxLength(10)
                        .EnforceMaxLength(true)
                        .Listeners(l => l.Change.Handler = "CheckInt(App.NewMorakhasi.queryById('txtTedad'))")
                        .AllowBlank(false)
                        .AutoFocus(false)
                            .BlankText("لطفا تعداد مرخصی را وارد کنید.")
        // .MsgTarget(Ext.Net.MessageTarget.Side)
        )
    ))
)

<script type="text/javascript">
    var Year = '@ViewBag.Year';
    var Month = '@ViewBag.Month';

    function LoadMorakhasi() {
        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Morakhasi/Details',
                params: {
                    id: '@ViewBag.Id',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    var txtName = App.NewMorakhasi.queryById('txtName');
                    txtName.setValue(data.fldName_Father);
                    var txtNationalCode = App.NewMorakhasi.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldCodemeli);
                    var txtShomarePersoneli = App.NewMorakhasi.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldSh_Personali);

                    /*var CboYear = App.NewMorakhasi.queryById('CboYear');
                    CboYear.setValue(data.fldYear);*/
                    var CboNobatePardakht = App.NewMorakhasi.queryById('CboNobatePardakht');
                    CboNobatePardakht.setValue(data.fldNobatePardakht);
                    var txtSalAkharinHokm = App.NewMorakhasi.queryById('txtSalAkharinHokm');
                    txtSalAkharinHokm.setValue(data.fldSalAkharinHokm);
                    var txtTedad = App.NewMorakhasi.queryById('txtTedad');
                    txtTedad.setValue(data.fldTedad);
                    var fldPersonalId = App.NewMorakhasi.queryById('fldPersonalId');
                    fldPersonalId.setValue(data.fldPersonalId);
                    var Id = App.NewMorakhasi.queryById('fldId');
                    Id.setValue(data.fldId);
                    Month = data.fldMonth;
                    Year = data.fldYear;
                }
            });
        }
        else {
            var fldPersonalId = App.NewMorakhasi.queryById('fldPersonalId');
            fldPersonalId.setValue('@ViewBag.PersonalId');
            Ext.net.DirectMethod.request({
                url: '/PayRoll/EzafeKari_TatilKari/DetailsHeader',
                params: {
                    Id: '@ViewBag.PersonalId',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    var txtName = App.NewMorakhasi.queryById('txtName');
                    txtName.setValue(data.fldName);
                    var txtNationalCode = App.NewMorakhasi.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    var txtShomarePersoneli = App.NewMorakhasi.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    Ext.net.Mask.hide();
                }
            });
        }
    }
    function checkSaveMorakhasi() {
        var SelectedRow = App.Morakhasi.queryById('GridHeader').selModel.getLastSelected();
        if (SelectedRow.data.fldStatusId == 1) {
            SaveMorakhasi();
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "وضعیت فرد مورد نظر " + SelectedRow.data.fldStatusTitle + " است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SaveMorakhasi() {
        var CboNobatePardakht = App.NewMorakhasi.queryById('CboNobatePardakht');
        var txtSalAkharinHokm = App.NewMorakhasi.queryById('txtSalAkharinHokm');
        var txtTedad = App.NewMorakhasi.queryById('txtTedad');;
        var Id = App.NewMorakhasi.queryById('fldId');
        var PersonalId = App.NewMorakhasi.queryById('fldPersonalId');

        var er = false;

        /* if (CboYear.validate() == false) {
             er = true;
         }*/
        if (CboNobatePardakht.validate() == false) {
            er = true;
        }
        if (txtSalAkharinHokm.validate() == false) {
            er = true;
        }

        if (txtTedad.validate() == false) {
            er = true;
        }


        if (er == true)
            return;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Morakhasi/Save',
            params: {
                fldId: Id.getValue(),
                /*fldYear: CboYear.getValue(),*/
                fldNobatePardakht: CboNobatePardakht.getValue(),
                fldSalAkharinHokm: txtSalAkharinHokm.getValue(),
                fldTedad: txtTedad.getValue(),
                fldPersonalId: PersonalId.getValue(),
                fldMonth: Month,
                fldYear: Year,
                OrganId: '@ViewBag.OrganId'
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ClearMorakhasi();
                ReloadGridDetailMorakhasi();
                /*App.Morakhasi.queryById('GridHeader').store.load();
                App.Morakhasi.queryById('GridDetail').getStore().loadData("");*/

            }

        });
    }
    function ClearMorakhasi() {
        /*  App.NewMorakhasi.queryById('CboYear').setValue("");*/
        App.NewMorakhasi.queryById('CboNobatePardakht').setValue("");
        App.NewMorakhasi.queryById('txtSalAkharinHokm').setValue("");
        App.NewMorakhasi.queryById('txtTedad').setValue("");
       /* App.NewMorakhasi.queryById('fldPersonalId').setValue(0);*/
        App.NewMorakhasi.queryById('fldId').setValue(0);
        Year = '@ViewBag.Year';
        Month = '@ViewBag.Month';
    }

    var addKeyMapNewMorakhasi = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.NewMorakhasi.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtTedad") {
                        nextfld = App.NewMorakhasi.queryById('btnSave');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                }
            }]
        });
    }


</script>
