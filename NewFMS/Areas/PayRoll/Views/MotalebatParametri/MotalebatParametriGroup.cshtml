@model IEnumerable<NewFMS.WCF_PayRoll.OBJ_MotalebatParametriGroup>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}
<script src="~/Scripts/accounting.js"></script>
<style>
    .x-form-cb-wrap {
        text-align: center;
    }

    .x-column-header-text {
        white-space: pre-wrap;
    }
</style>

@(X.Panel()
    .Title("ثبت گروهی مطالبات پارامتری")
    .Border(false)
    .ID("MotalebateparametriGroup")
    .Closable(true)
    .AutoScroll(true)
    .Listeners(l => l.AfterRender.Fn = "addKeyMapMotalebateparametriGroup")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    //.Height(670)
    .Layout(LayoutType.Fit)
    .TopBar(
        Html.X().Toolbar()
            .Items(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
                    .Listeners(l =>
                    {
                        l.Click.Handler = "SaveMotalebateparametriGroup();";
                    })
                )
        )
    .Items(
        X.Panel()
            .Border(false)
            .Items(
                X.Panel()
                    .Border(false)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Items(
                        X.FieldSet()
                            .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 6 })
                            .Defaults(new { Margin = 2 })
                            .Title("مشخصات مطالبات")
                            .Border(true)
                            .Items(
                                X.Label("نوع پارامترها:"),
                                X.ComboBox()
                                    .ItemID("CboParametrha")
                                    .TypeAhead(true)
                                    .Editable(true)
                                    .AllowBlank(false)
                                    .AutoFocus(true)
                                    .BlankText("لطفا نوع پارامتر را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldParametrName")
                                    .ValueField("fldId")
                                    //.SelectedItems(new { Value = "1" })
                                    .Store(X.Store()
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldParametrName", ModelFieldType.String) { Mapping = "fldParametrName" }
                                                    )
                                                )
                                        .Proxy(X.AjaxProxy()
                                                .Url(Url.Action("GetMotalebatParametri"))
                                            .Reader(X.JsonReader().Root("data"))
                                                        .ExtraParams(p => p.Add(new { OrganId = ViewBag.OrganId }))
                                            )
                                    ),
                                X.Label("نوع پرداخت:"),
                                X.ComboBox()
                                    .ItemID("CboNoePardakht")
                                    .EmptyText("نوع پرداخت...")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا نوع پرداخت را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .Items(
                                        new ListItem("تعدادی", "0"),
                                        new ListItem("دائمی", "1")
                                        )
                                    .Listeners(a =>
                                        {
                                            a.Change.Handler = "ChangeStatusGroupMo()";
                                            a.AfterRender.Handler = "App.MotalebateparametriGroup.queryById('CboNoePardakht').setValue('0');";
                                        }),
                                X.Label("مبلغ:"),
                                X.TextField()
                                    .ItemID("txtMablagh")
                                    .MaskRe("/[0-9-.]/")
                                    .Listeners(l => { l.Change.Handler = "App.MotalebateparametriGroup.queryById('txtMablagh').setValue(accounting.formatNumber(App.MotalebateparametriGroup.queryById('txtMablagh').getValue()));CheckInt(App.MotalebateparametriGroup.queryById('txtMablagh'));"; })
                                    .AllowBlank(false)
                                    .BlankText("لطفا مبلغ را وارد کنید."),
                                X.Label("تعداد:").ItemID("lblTedad"),
                                X.TextField()
                                    .ItemID("txtTedad")
                                    .MaskRe("/[0-9]/")
                                    .AllowBlank(false)
                                    .BlankText("لطفا تعداد را وارد کنید.")
                                    .Listeners(a =>
                                        {
                                            a.Change.Handler = "CheckInt(App.MotalebateparametriGroup.queryById('txtTedad'));ChangeStatusGroupMo()";
                                        }),
                                X.Label("تاریخ پرداخت:"),
                                X.PDateField()
                                    .ItemID("txtTrikhePardakht")
                                    .AllowBlank(false)
                                    .BlankText("لطفا تاریخ پرداخت را وارد کنید.")
                                    .Listeners(a =>
                                        {
                                            a.Change.Handler = "ChangeStatusGroupMo()";
                                            a.AfterRender.Handler = "setDateValMO()";
                                        }),
                                X.Label("وضعیت:"),
                                X.ComboBox()
                                    .ItemID("CboStatus")
                                    .EmptyText("وضعیت...")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا وضعیت را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .Items(
                                        new ListItem("غیر فعال", "0"),
                                        new ListItem("فعال", "1")
                                        )
                                    .Listeners(a =>
                                        {
                                            a.Change.Handler = "ChangeStatusGroupMo()";
                                            a.AfterRender.Handler = "App.MotalebateparametriGroup.queryById('CboStatus').setValue('1');";
                                        }),
                                X.Label().Text("تاریخ غیر فعالی:"),
                                X.FieldSet()
                                    .Border(false)
                                    .PaddingSpec("0 0 0 0")
                                    .Layout(LayoutType.HBox)
                                    .Items(
                                        X.Label("ماه:"),
                                        X.TextField()
                                            .ItemID("txtMonth")
                                            .Listeners(l => l.Change.Handler = "if(App.MotalebateparametriGroup.queryById('CboStatus').getValue()=='0'&& App.MotalebateparametriGroup.queryById('txtMonth').getValue()>12){App.MotalebateparametriGroup.queryById('txtMonth').setValue('');}")
                                            .Text("0")
                                            .MaskRe("/[0-9]/")
                                            .Width(30)
                                            .MaxLength(2)
                                            .MinLength(2)
                                            .EnforceMaxLength(true)
                                            .AllowBlank(false)
                                            .PaddingSpec("0 0 0 6px")
                                            .BlankText("لطفا ماه را وارد کنید."),
                                        X.Label().Text("/").MarginSpec("0 5px 0 0"),
                                        X.Label("سال:"),
                                        X.TextField()
                                            .ItemID("txtYear")
                                            .MaxLength(4)
                                            .MinLength(4)
                                            .EnforceMaxLength(true)
                                            .Text("0")
                                            .MaskRe("/[0-9]/")
                                            .Width(50)
                                            .AllowBlank(false)
                                            .BlankText("لطفا سال را وارد کنید.")
                                    ),
                                     X.FieldSet()
                            .Layout(LayoutType.Table).Border(false)
                            .ColSpan(4)
                            .LayoutConfig(new TableLayoutConfig { Columns = 3 }).Items(
                                X.FieldSet()
                                    .Layout(LayoutType.Table)
                                    .ColSpan(1)
                                    .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                                    .PaddingSpec("0 0 0 50px")
                                    .Border(false)
                                    .Defaults(new { Margin = 2 })
                                    .Items(
                                        X.Checkbox()
                                            .ItemID("chkMashmoolMaliyat")
                                            .PaddingSpec("0 0 0 4px"),
                                        X.Label("مشمول مالیات")),
                                X.FieldSet()
                                    .Layout(LayoutType.Table)
                                    .ColSpan(1)
                                    .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                                    .PaddingSpec("0 0 0 23px")
                                    .Border(false)
                                    .Defaults(new { Margin = 2 })
                                    .Items(
                                        X.Checkbox()
                                                .ItemID("chkMashmoolBime").Listeners(l => l.Change.Handler = " ChangeMashmoolBime()")
                                            .PaddingSpec("0 0 0 4px"),
                                            X.Label("مشمول بیمه")),
                                    X.FieldSet()
                                        .Layout(LayoutType.Table)
                                        .ColSpan(1)
                                        .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                                        .PaddingSpec("0 0 0 23px")
                                        .Border(false)
                                        .Defaults(new { Margin = 2 })
                                        .Items(
                                            X.Checkbox()
                                                    .ItemID("chkMazayaBime")
                                                .PaddingSpec("0 0 0 4px"),
                                            X.Label("مزایای مشمول بیمه"))
                                            )
                                    //, X.FieldSet()
                                    //.ColSpan(6)
                                    //.Border(false)
                                    //.Layout(LayoutType.Card)
                                    ////.LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Center})
                                    //.Items(
                                    //    X.Button()
                                    //        .ItemID("btnINS")
                                    //        .Text("درج")
                                    //        .Icon(Icon.NoteAdd)
                                    //        .Width(70)
                                    //        .Listeners(l => l.Click.Handler = "SaveINSMG();"))
                            )),
                X.Panel()
                    .Border(false)
                    .Items(
                        X.GridPanel()
                            .AutoScroll(true)
                            .ItemID("GridGroup")
                            .Listeners(l => l.AfterRender.Handler = "setHeightGridGroupMG()")
                            .View(
                                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true).GetRowClass(l => l.Fn = "getRowClassMotalebateparametriGroup")
                            )
                            .Store(
                                X.StoreForModel()
                            )
                            .ColumnModel(
                                Html.X().RowNumbererColumn(),
                                Html.X().Column().DataIndex(Model, m => m.fldPersonalInfoId).Hidden(true).Text("کد پرسنل").Flex(1),
                                Html.X().Column().DataIndex(Model, m => m.fldName_Father).Text("نام و نام خانوادگی").Flex(3).Wrap(true),
                                Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کدملی").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldSh_Personali).Text("شماره پرسنلی").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("انواع استخدام").Wrap(true).Flex(2)
                                //Html.X().Column().DataIndex("TypeParameter").Text("نوع پارامتر").Wrap(true).Flex(2),
                                //Html.X().Column().DataIndex("TypeParameterId").Text("کد نوع پارامتر").Hidden(true).Hideable(false).Flex(1),
                                //Html.X().Column().DataIndex("TypePay").Text("نوع پرداخت").Wrap(true).Flex(2),
                                //Html.X().Column().DataIndex("TypePaybool").Text("نوع پرداخت").Flex(1).Hidden(true).Hideable(false),
                                //Html.X().Column().DataIndex("Price").Text("مبلغ").Flex(2).Wrap(true).Flex(2),
                                //Html.X().Column().DataIndex("count").Text("تعداد").Flex(1),
                                //Html.X().Column().DataIndex("DatePay").Text("تاریخ پرداخت").Flex(2),
                                //Html.X().Column().DataIndex("Status").Text("وضعیت").Flex(2),
                                //Html.X().Column().DataIndex("Statusbool").Text("وضعیت").Flex(1).Hidden(true).Hideable(false),
                                //Html.X().Column().DataIndex("DateDeactive").Text("تاریخ غیرفعالی").Flex(2),
                                //Html.X().CheckColumn().Flex(2).DataIndex("mashmoolBime").Text("مشمول بیمه").Listeners(l=>l.BeforeCheckChange.Handler="return false;"),
                                //Html.X().CheckColumn().DataIndex("mashmoolMaliyat").Text("مشمول مالیات").Listeners(l => l.BeforeCheckChange.Handler = "return false;").Flex(2)
                                )
                            .Listeners(l =>
                            {
                                l.ViewReady.Handler = "ReloadMotalebat();";
                            })
                            .SelectionModel(
                                Html.X().CheckboxSelectionModel()
                                    .Mode(Ext.Net.SelectionMode.Multi).CheckOnly(true)
                            )
                            .Plugins(Html.X().CellEditing().ClicksToEdit(1))
                        )
                )

        )
)
)
<script type="text/javascript">
    function ChangeMashmoolBime() {
        var chkMashmoolBime = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
        var chkMazayaBime = App.NewMotalebatParametriSingle.queryById('chkMazayaBime');

        chkMazayaBime.setValue(chkMashmoolBime.getValue());

    }
    var getRowClassMotalebateparametriGroup = function (record, rowIndex, rowParams, store) {
        var color = 'white';
        if (rowIndex % 2 == 1)
            color = '#dfe8f6';
        var clsName = "row" + rowIndex,
            clsStyle = Ext.String.format(".{0} .x-grid-cell, .{0} .x-grid-rowwrap-div { background-color: {1} !important; })", clsName, color);
        Ext.net.ResourceMgr.registerCssClass(clsName, clsStyle);
        return clsName;
    };

    function setHeightGridGroupMG() {
        App.MotalebateparametriGroup.setHeight(App.PayWin.getHeight()-100);
        App.MotalebateparametriGroup.queryById("GridGroup").setHeight(App.PayWin.getHeight() - 330);
    }

    function setDateValMO() {
        App.MotalebateparametriGroup.queryById('txtTrikhePardakht').setValue('@ViewBag.TarikhPardakht');
    }

    function ChangeStatusGroupMo() {
        var Status = App.MotalebateparametriGroup.queryById('CboStatus');
        var CboNoePardakht = App.MotalebateparametriGroup.queryById('CboNoePardakht');
        var txtTedad = App.MotalebateparametriGroup.queryById('txtTedad');
        var lblTedad = App.MotalebateparametriGroup.queryById('lblTedad');
        var txtMonth = App.MotalebateparametriGroup.queryById('txtMonth');
        var txtYear = App.MotalebateparametriGroup.queryById('txtYear');
        var TrikhePardakht = App.MotalebateparametriGroup.queryById('txtTrikhePardakht');

        if (Status.getValue() == "1" && CboNoePardakht.getValue() == "1") {/*دایمی و فعال*/
            txtTedad.setReadOnly(true);
            txtTedad.setValue(0);
            txtMonth.setValue("99");
            txtMonth.setReadOnly(true);
            txtYear.setValue("9999");
            txtYear.setReadOnly(true);
        }
        else if (Status.getValue() == "0" && CboNoePardakht.getValue() == "1") {/*دایمی و غیرفعال*/
            txtTedad.setReadOnly(true);
            txtTedad.setValue(0);
            txtMonth.setValue('@ViewBag.TarikhPardakht'.substr(5, 2));
            txtMonth.setReadOnly(false);
            txtYear.setValue('@ViewBag.TarikhPardakht'.substr(0, 4));
            txtYear.setReadOnly(false);
        }
        else if (CboNoePardakht.getValue() == "0" && Status.getValue() == "0") {/*تعدادی و غیرفعال*/
            txtTedad.setReadOnly(false);
            txtMonth.setValue('@ViewBag.TarikhPardakht'.substr(5, 2));
            txtMonth.setReadOnly(false);
            txtYear.setValue('@ViewBag.TarikhPardakht'.substr(0, 4));
            txtYear.setReadOnly(false);
        }
        else {
            txtTedad.setReadOnly(false);
            if (txtTedad.getValue() != 0 && TrikhePardakht.rawValue != "" && TrikhePardakht.validate() == true && txtTedad.getValue() != "") {
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/KosuratParametri/DateDeactive',
                    params: {
                        TrikhePardakht: TrikhePardakht.rawValue,
                        Tedad: txtTedad.getValue()
                    },
                    success: function (data) {
                        if (data.Mah > 12 || data.Year.toString().length > 4) {
                            txtMonth.setValue(0);
                            txtYear.setValue(0);
                        }
                        else {
                            txtMonth.setValue(data.Mah);
                            txtYear.setValue(data.Year);
                        }
                        txtMonth.setReadOnly(true);
                        txtYear.setReadOnly(true);
                    }
                });
            }
            else if (txtTedad.getValue() == 0 || txtTedad.getValue() == "") {
                txtMonth.setValue(0);
                txtYear.setValue(0);
            }
        }
    }

    function SaveINSMG() {
        var selected = App.MotalebateparametriGroup.queryById('GridGroup').getSelectionModel().getSelection();
        if (selected.length == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا سطرهای مورد نظر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else {
            Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
            var CboParametrha = App.MotalebateparametriGroup.queryById('CboParametrha');
            var CboNoePardakht = App.MotalebateparametriGroup.queryById('CboNoePardakht');
            var txtMablagh = App.MotalebateparametriGroup.queryById('txtMablagh');
            var txtTedad = App.MotalebateparametriGroup.queryById('txtTedad');
            var txtTrikhePardakht = App.MotalebateparametriGroup.queryById('txtTrikhePardakht');
            var CboStatus = App.MotalebateparametriGroup.queryById('CboStatus');
            var txtMonth = App.MotalebateparametriGroup.queryById('txtMonth');
            var txtYear = App.MotalebateparametriGroup.queryById('txtYear');
            var chkMashmoolBime = App.MotalebateparametriGroup.queryById('chkMashmoolBime');
            var chkMazayaBime = App.MotalebateparametriGroup.queryById('chkMazayaBime');
            var chkMashmoolMaliyat = App.MotalebateparametriGroup.queryById('chkMashmoolMaliyat');
            var er = false;
            if (CboParametrha.validate() == false) {
                er = true;
            }

            if (CboNoePardakht.validate() == false) {
                er = true;
            }
            if (txtMablagh.validate() == false) {
                er = true;
            }
            if (txtTedad.validate() == false) {
                er = true;
            }
            if (txtTrikhePardakht.validate() == false) {
                er = true;
            }

            if (CboStatus.validate() == false) {
                er = true;
            }

            if (txtMonth.validate() == false) {
                er = true;
            }

            if (txtYear.validate() == false) {
                er = true;
            }
            if (er == true) {
                Ext.net.Mask.hide();
                return;
            }

            if (txtMonth.getValue() == 0 || txtYear.getValue() == 0) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "تاریخ غیر فعالی معتبر نیست.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
                return;
            }
            if (CboNoePardakht.getValue() == 0 && txtTedad.getValue() == 0) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا تعداد را وارد کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
                return;
            }
            for (var i = 0; i < selected.length ; i++) {
                var record = selected[i];

                record.set('Price', txtMablagh.getValue());
                record.set('count', txtTedad.getValue());
                record.set('DateDeactive', txtYear.getValue() + "/" + txtMonth.getValue());
                record.set('mashmoolBime', chkMashmoolBime.getValue());
                record.set('fldMazayaMashmool', chkMazayaBime.getValue());
                record.set('mashmoolMaliyat', chkMashmoolMaliyat.getValue());
                record.set('TypeParameter', CboParametrha.getDisplayValue());
                record.set('TypePay', CboNoePardakht.getDisplayValue());
                record.set('DatePay', txtTrikhePardakht.getRawValue());
                record.set('Status', CboStatus.getDisplayValue());
                record.set('TypeParameterId', CboParametrha.getValue());
                if (CboStatus.getValue() == "1") {
                    record.set('Statusbool', true);
                }
                else {
                    record.set('Statusbool', false);
                }
                if (CboNoePardakht.getValue() == "1") {
                    record.set('TypePaybool', true);
                }
                else {
                    record.set('TypePaybool', false);
                }
            }
            if (i == selected.length) {
                Ext.net.Mask.hide();
            }
        }
    }

    function ReloadMotalebat() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/MotalebatParametri/ReloadMotalebateParametriGroup',
            params: {
                OrganId:'@ViewBag.OrganId'
            },
            success: function (result) {
                App.MotalebateparametriGroup.queryById('GridGroup').getStore().loadData(result);
                App.MotalebateparametriGroup.queryById('GridGroup').getSelectionModel().selectAll();
                Ext.net.Mask.hide();
            }
        });
    }

    function SaveMotalebateparametriGroup() {
        var CboParametrha = App.MotalebateparametriGroup.queryById('CboParametrha');
        var CboNoePardakht = App.MotalebateparametriGroup.queryById('CboNoePardakht');
        var txtMablagh = App.MotalebateparametriGroup.queryById('txtMablagh');
        var txtTedad = App.MotalebateparametriGroup.queryById('txtTedad');
        var txtTrikhePardakht = App.MotalebateparametriGroup.queryById('txtTrikhePardakht');
        var CboStatus = App.MotalebateparametriGroup.queryById('CboStatus');
        var txtMonth = App.MotalebateparametriGroup.queryById('txtMonth');
        var txtYear = App.MotalebateparametriGroup.queryById('txtYear');
        var chkMashmoolBime = App.MotalebateparametriGroup.queryById('chkMashmoolBime');
        var chkMazayaBime = App.MotalebateparametriGroup.queryById('chkMazayaBime');
        var chkMashmoolMaliyat = App.MotalebateparametriGroup.queryById('chkMashmoolMaliyat');
        var er = false;
        if (CboParametrha.validate() == false) {
            er = true;
        }

        if (CboNoePardakht.validate() == false) {
            er = true;
        }
        if (txtMablagh.validate() == false) {
            er = true;
        }
        if (txtTedad.validate() == false) {
            er = true;
        }
        if (txtTrikhePardakht.validate() == false) {
            er = true;
        }

        if (CboStatus.validate() == false) {
            er = true;
        }

        if (txtMonth.validate() == false) {
            er = true;
        }

        if (txtYear.validate() == false) {
            er = true;
        }
        if (er == true) {
            Ext.net.Mask.hide();
            return;
        }

        if (txtMonth.getValue() == 0 || txtYear.getValue() == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "تاریخ غیر فعالی معتبر نیست.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            Ext.net.Mask.hide();
            return;
        }
        if (CboNoePardakht.getValue() == 0 && txtTedad.getValue() == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا تعداد را وارد کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            Ext.net.Mask.hide();
            return;
        }
        var MotalebatVal = new Array();
        var PersonalInfoId = "";
        var SelectedRows = App.MotalebateparametriGroup.queryById('GridGroup').getSelectionModel().getSelection();
        if (SelectedRows.length > 0) {
            for (var i = 0; i < SelectedRows.length ; i++) {
                PersonalInfoId = PersonalInfoId + SelectedRows[i].data.fldPersonalInfoId + ";";
            }
            /*if (SelectedRows[0].get('Price') != undefined) {
                for (var i = 0; i < SelectedRows.length ; i++) {
                    MotalebatVal.push({
                        fldPersonalId: SelectedRows[i].data.fldPersonalInfoId
                      /*  fldParametrId: SelectedRows[i].get('TypeParameterId'),
                        fldNoePardakht: SelectedRows[i].get('TypePaybool'),
                        fldMablagh: SelectedRows[i].get('Price').replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                        fldTedad: SelectedRows[i].get('count'),
                        fldTarikhPardakht: SelectedRows[i].get('DatePay'),
                        fldMashmoleBime: SelectedRows[i].get('mashmoolBime'),
                        fldMashmoleMaliyat: SelectedRows[i].get('mashmoolMaliyat'),
                        fldDateDeactive: parseInt(SelectedRows[i].get('DateDeactive').split("/")[0] + SelectedRows[i].get('DateDeactive').split("/")[1]),
                        fldStatus: SelectedRows[i].get('Statusbool')
                    });
                }
            /* }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا اطلاعات مطالبات را وارد کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }*/
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "هیچ سطری برای ذخیره انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        var status = false;
        if (CboStatus.getValue() == "1")
            status = true;
        var NoePardakht = false;
        if (CboNoePardakht.getValue() == "1")
            NoePardakht = true;
        var data = {
            PersonalId: PersonalInfoId,
            fldParametrId: CboParametrha.getValue(),
            fldNoePardakht: NoePardakht,
            fldMablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
            fldTarikhPardakht: txtTrikhePardakht.getRawValue(),
            fldTedad: txtTedad.getValue(),
            fldMashmoleBime: chkMashmoolBime.getValue(),
            fldMazayaMashmool: chkMazayaBime.getValue(),
            fldMashmoleMaliyat: chkMashmoolMaliyat.getValue(),
            fldDateDeactive: parseInt(txtYear.getValue() + txtMonth.getValue()),
            fldStatus: status,
            OrganId: '@ViewBag.OrganId'
        };

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/PayRoll/MotalebatParametri/SaveGroup',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (data) {
                var Message="";
                var result = data;/*JSON.parse(data);*/
                var ic = Ext.MessageBox.INFO;
                if (result.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                
                if (result.Er != 1 ) {
                    if (result.exist != "") {
                        Message = result.Msg + "اطلاعات مطالبات پرسنل(" + result.exist + ")قبلا ثبت گردیده است.";
                    }
                    else {
                        Message= result.Msg;
                    }
                }
                Ext.MessageBox.show({
                    title: result.MsgTitle,
                    msg: Message,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ReloadMotalebat();
                ClearGroupMotalebat();
                Ext.net.Mask.hide();
                for (var i = 0; i < App.FirstTabPay.items.length; i++) {
                    if (App.FirstTabPay.items.items[i].id == "MotalebatParametriSingle" && App.MotalebatParametriSingle.queryById('GridHeader').getSelectionModel().getSelection().length > 0) {
                        ReloadMotalebatParametriSingle();
                    }
                }
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }

    var addKeyMapMotalebateparametriGroup = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], 
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var nextfld;
                    if (Ext.Element.getActiveElement().name != "") {
                        var keyfield = App.MotalebateparametriGroup.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                        if (keyfield.itemId == "txtMablagh") {
                            if (App.MotalebateparametriGroup.queryById('CboNoePardakht').getValue() == "1") {
                                nextfld = App.MotalebateparametriGroup.queryById('txtTrikhePardakht');
                            }
                            else {
                                nextfld = App.MotalebateparametriGroup.queryById('txtTedad');
                            }
                        }
                        else if (keyfield.itemId == "CboStatus") {
                            if (App.MotalebateparametriGroup.queryById('CboStatus').getValue() == "0") {
                                nextfld = App.MotalebateparametriGroup.queryById('txtMonth');
                            }
                            else {
                                nextfld = App.MotalebateparametriGroup.queryById('chkMashmoolBime');
                                nextfld.focus();
                                return;
                            }
                        }
                        else if (keyfield.itemId == "txtMonth") {
                            nextfld = App.MotalebateparametriGroup.queryById('txtYear');
                        }
                        else if (keyfield.itemId == "txtYear") {
                            nextfld = App.MotalebateparametriGroup.queryById('chkMashmoolBime');
                            nextfld.focus();
                            return;
                        }
                        else {
                            nextfld = keyfield.nextSibling().nextSibling();
                        }
                    }
                    else {
                        var chkMazayaBime = App.MotalebateparametriGroup.queryById('chkMazayaBime');
                        if (App.MotalebateparametriGroup.queryById('chkMashmoolBime').hasFocus == true) {
                            nextfld = App.MotalebateparametriGroup.queryById('chkMazayaBime');
                            nextfld.focus();
                            return;
                        }
                        else if (App.MotalebateparametriGroup.queryById('chkMazayaBime').hasFocus == true) {
                            nextfld = App.MotalebateparametriGroup.queryById('chkMashmoolMaliyat');
                            nextfld.focus();
                            return;
                        }
                        else {
                            return;
                        }
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    };

    function ClearGroupMotalebat() {
        App.MotalebateparametriGroup.queryById('txtMablagh').setValue("");
        App.MotalebateparametriGroup.queryById('txtTedad').setValue("");
        App.MotalebateparametriGroup.queryById('chkMashmoolBime').setValue(false);
        App.MotalebateparametriGroup.queryById('chkMazayaBime').setValue(false);
        App.MotalebateparametriGroup.queryById('chkMashmoolMaliyat').setValue(false);
    }

</script>
