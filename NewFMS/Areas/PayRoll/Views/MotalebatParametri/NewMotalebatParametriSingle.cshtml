@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
@{
    var X = Html.X();
}
<script src="~/Scripts/accounting.js"></script>

@(Html.X().Window()
    .Width(550)
    .Modal(true)
    .Title("ثبت مطالبات پارامتری")
    .Closable(true)
        .ID("NewMotalebatParametriSingle")
        .Listeners(l => l.AfterRender.Fn = "addKeyMapMotalebateparametrisingle")
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .ButtonAlign(Ext.Net.Alignment.Center)
    .Buttons(
        X.Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
            .Listeners(l =>
            {
                l.Click.Handler = "checkSaveMotalebatParametriSingle();";
            }),
        X.Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
        //.ToolTip("کلید میانبر Esc")
            .OnClientClick("App.NewMotalebatParametriSingle.destroy()"))
    .Items(
        X.Panel()
            .Border(false)
            .Items(
                X.FieldSet()
                    .Title("مشخصات مطالبات")
                    .Border(true)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 2 })
                    .Items(
                        X.Hidden().ItemID("fldId"),
                        X.Label("نام و نام خانوادگی:"),
                        X.TextField()
                            .ItemID("txtName")
                            .AllowBlank(false),
                        X.Label("کد ملی:"),
                        X.TextField()
                            .ItemID("txtNationalCode")
                            .AllowBlank(false),
                        X.Label("شماره پرسنلی:"),
                        X.TextField()
                            .ItemID("txtShomarePersoneli")
                            .AllowBlank(false),
                        X.Label("نوع پارامترها:"),
                        X.ComboBox()
                            .ItemID("CboParametrha")
                            .TypeAhead(true)
                            .Editable(true)
                            .AllowBlank(false)
                            .AutoFocus(true)
                            .BlankText("لطفا نوع پارامتر را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldParametrName")
                            .ValueField("fldId")
                            //.SelectedItems(new { Value = "1" })
                            .Store(X.Store().Listeners(li => li.Load.Handler = "LoadMotalebatParametri()")
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldParametrName", ModelFieldType.String) { Mapping = "fldParametrName" }
                                            )
                                        )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetMotalebatParametri"))
                                    .Reader(X.JsonReader().Root("data"))
                                    .ExtraParams(p => p.Add(new { OrganId = ViewBag.OrganId }))
                                    )
                                ),
                        X.Label("نوع پرداخت:"),
                        X.ComboBox()
                            .ItemID("CboNoePardakht")
                            .EmptyText("نوع پرداخت...")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا نوع پرداخت را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("تعدادی", "0"),
                                new ListItem("دائمی", "1")
                                )
                            .Listeners(a =>
                                {
                                    a.Change.Handler = "ChangeStatusMo()";
                                }),
                        X.Label("مبلغ:"),
                        X.TextField()
                            .ItemID("txtMablagh")
                            .MaskRe("/[0-9-.]/")
                            .Listeners(l => { l.Change.Handler = "App.NewMotalebatParametriSingle.queryById('txtMablagh').setValue(accounting.formatNumber(App.NewMotalebatParametriSingle.queryById('txtMablagh').getValue()));CheckInt(App.NewMotalebatParametriSingle.queryById('txtMablagh'));"; })
                            .AllowBlank(false)
                            .BlankText("لطفا مبلغ را وارد کنید."),
                        X.Label("تعداد:").ItemID("lblTedad"),
                        X.TextField()
                            .ItemID("txtTedad")
                            .MaskRe("/[0-9]/")
                            .AllowBlank(false)
                            .BlankText("لطفا تعداد را وارد کنید.")
                            .Listeners(a =>
                                {
                                    a.Change.Handler = "CheckInt(App.NewMotalebatParametriSingle.queryById('txtTedad'));ChangeStatusMo()";
                                }),
                        X.Label("تاریخ پرداخت:"),
                        X.PDateField()
                            .ItemID("txtTrikhePardakht")
                            .AllowBlank(false)
                            .BlankText("لطفا تاریخ پرداخت را وارد کنید.")
                            .Listeners(a =>
                                {
                                    a.Change.Handler = "ChangeStatusMo()";
                                }),
                        X.Label("وضعیت:"),
                        X.ComboBox()
                            .ItemID("CboStatus")
                            .EmptyText("وضعیت...")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا وضعیت را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("غیر فعال", "0"),
                                new ListItem("فعال", "1")
                                )
                            .Listeners(a =>
                                {
                                    a.Change.Handler = "ChangeStatusMo()";
                                }),
                        X.Label().Text("تاریخ غیر فعالی:"),
                        X.FieldSet()
                            .Border(false)
                            .ColSpan(3)
                            .PaddingSpec("0 0 0 0")
                            .Layout(LayoutType.HBox)
                            .Items(
                                X.Label("ماه:"),
                                X.TextField()
                                    .ItemID("txtMonth")
                                    .Listeners(l => l.Change.Handler = "if(App.NewMotalebatParametriSingle.queryById('CboStatus').getValue()=='0'&& App.NewMotalebatParametriSingle.queryById('txtMonth').getValue()>12){App.NewMotalebatParametriSingle.queryById('txtMonth').setValue('');}")
                                    .Text("0")
                                    .MaskRe("/[0-9]/")
                                    .Width(30)
                                    .MaxLength(2)
                                    .MinLength(2)
                                    .EnforceMaxLength(true)
                                    .AllowBlank(false)
                                    .PaddingSpec("0 0 0 6px")
                                    .BlankText("لطفا ماه را وارد کنید."),
                                X.Label().Text("/").MarginSpec("0 5px 0 0"),
                                X.Label("سال:"),
                                X.TextField()
                                    .ItemID("txtYear")
                                    .MaxLength(4)
                                    .MinLength(4)
                                    .EnforceMaxLength(true)
                                    .Text("0")
                                    .MaskRe("/[0-9]/")
                                    .Width(50)
                                    .AllowBlank(false)
                                    .BlankText("لطفا سال را وارد کنید.")
                            ),
                             X.FieldSet()
                            .Layout(LayoutType.Table).Border(false)
                            .ColSpan(4)
                            .LayoutConfig(new TableLayoutConfig { Columns = 3 }).Items(
                        X.FieldSet()
                            .Layout(LayoutType.Table)
                            .ColSpan(1)
                            .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                            //.PaddingSpec("0 0 0 76px")
                            .Border(false)
                            .Defaults(new { Margin = 2 })
                            .Items(
                                X.Checkbox()
                                    .ItemID("chkMashmoolBime").Listeners(l => l.Change.Handler =" ChangeMashmoolBime()")
                                    .PaddingSpec("0 0 0 4px"),
                                X.Label("مشمول بیمه")),
                              X.FieldSet()
                                .Layout(LayoutType.Table)
                                .ColSpan(1)
                                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                                //.PaddingSpec("0 0 0 76px")
                                .Border(false)
                                .Defaults(new { Margin = 2 })
                                .Items(
                                    X.Checkbox()
                                        .ItemID("chkMazayaBime")
                                        .PaddingSpec("0 0 0 4px"),
                                    X.Label("مزایای مشمول بیمه")),      
                        X.FieldSet()
                            .Layout(LayoutType.Table)
                            .ColSpan(1)
                            .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                            //.PaddingSpec("0 0 0 60px")
                            .Border(false)
                            .Defaults(new { Margin = 2 })
                            .Items(
                                X.Checkbox()
                                    .ItemID("chkMashmoolMaliyat")
                                    .PaddingSpec("0 0 0 4px"),
                                X.Label("مشمول مالیات"))
                                )
                  )
                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                    )
)

<script type="text/javascript">
    function ChangeMashmoolBime() {
        var chkMashmoolBime = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
        var chkMazayaBime = App.NewMotalebatParametriSingle.queryById('chkMazayaBime');
        
            chkMazayaBime.setValue(chkMashmoolBime.getValue());
        
    }
    function ChangeStatusMo() {
        var Status = App.NewMotalebatParametriSingle.queryById('CboStatus');
        var CboNoePardakht = App.NewMotalebatParametriSingle.queryById('CboNoePardakht');
        var txtTedad = App.NewMotalebatParametriSingle.queryById('txtTedad');
        var lblTedad = App.NewMotalebatParametriSingle.queryById('lblTedad');
        var txtMonth = App.NewMotalebatParametriSingle.queryById('txtMonth');
        var txtYear = App.NewMotalebatParametriSingle.queryById('txtYear');
        var TrikhePardakht = App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht');

        if (Status.getValue() == "1" && CboNoePardakht.getValue() == "1") {/*دایمی و فعال*/
            txtTedad.setReadOnly(true);
            txtTedad.setValue(0);
            txtMonth.setValue("99");
            txtMonth.setReadOnly(true);
            txtYear.setValue("9999");
            txtYear.setReadOnly(true);
        }
        else if (Status.getValue() == "0" && CboNoePardakht.getValue() == "1") {/*دایمی و غیرفعال*/
            txtTedad.setReadOnly(true);
            txtTedad.setValue(0);
            txtMonth.setValue('@ViewBag.TarikhPardakht'.substr(5, 2));
            txtMonth.setReadOnly(false);
            txtYear.setValue('@ViewBag.TarikhPardakht'.substr(0, 4));
            txtYear.setReadOnly(false);
        }
        else if (CboNoePardakht.getValue() == "0" && Status.getValue() == "0") {/*تعدادی و غیرفعال*/
            txtTedad.setReadOnly(false);
            txtMonth.setValue('@ViewBag.TarikhPardakht'.substr(5, 2));
            txtMonth.setReadOnly(false);
            txtYear.setValue('@ViewBag.TarikhPardakht'.substr(0, 4));
            txtYear.setReadOnly(false);
        }
        else {
            txtTedad.setReadOnly(false);
            if (txtTedad.getValue() != 0 && TrikhePardakht.rawValue != "" && TrikhePardakht.validate() == true && txtTedad.getValue() != "") {
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/KosuratParametri/DateDeactive',
                    params: {
                        TrikhePardakht: TrikhePardakht.rawValue,
                        Tedad: txtTedad.getValue()
                    },
                    success: function (data) {
                        if (data.Mah > 12 || data.Year.toString().length > 4) {
                            txtMonth.setValue(0);
                            txtYear.setValue(0);
                        }
                        else {
                            txtMonth.setValue(data.Mah);
                            txtYear.setValue(data.Year);
                        }
                        txtMonth.setReadOnly(true);
                        txtYear.setReadOnly(true);
                    }
                });
            }
            else if (txtTedad.getValue() == 0 || txtTedad.getValue() == "") {
                txtMonth.setValue(0);
                txtYear.setValue(0);
            }
        }
    }

    function LoadMotalebatParametri() {
        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.DirectMethod.request({
                url: '/PayRoll/MotalebatParametri/Details',
                params: {
                    id: '@ViewBag.Id',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    App.NewMotalebatParametriSingle.queryById('CboNoePardakht').suspendEvent("change");
                    App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht').suspendEvent("change");
                    App.NewMotalebatParametriSingle.queryById('txtTedad').suspendEvent("change");

                    var txtName = App.NewMotalebatParametriSingle.queryById('txtName');
                    txtName.setValue(data.fldName);
                    txtName.setReadOnly(true);
                    txtName.setFieldStyle("background-image:none;background-color:#dfe8f6");

                    var txtNationalCode = App.NewMotalebatParametriSingle.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    txtNationalCode.setReadOnly(true);
                    txtNationalCode.setFieldStyle("background-image:none;background-color:#dfe8f6");

                    var txtShomarePersoneli = App.NewMotalebatParametriSingle.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    txtShomarePersoneli.setReadOnly(true);
                    txtShomarePersoneli.setFieldStyle("background-image:none;background-color:#dfe8f6");

                    var CboParametrha = App.NewMotalebatParametriSingle.queryById('CboParametrha');
                    CboParametrha.setValue(data.fldParametrId);

                    var CboNoePardakht = App.NewMotalebatParametriSingle.queryById('CboNoePardakht');
                    CboNoePardakht.setValue(data.fldNoePardakht);

                    var txtMablagh = App.NewMotalebatParametriSingle.queryById('txtMablagh');
                    txtMablagh.setValue(data.fldMablagh);

                    var txtTedad = App.NewMotalebatParametriSingle.queryById('txtTedad');
                    txtTedad.setValue(data.fldTedad);

                    var txtTrikhePardakht = App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht');
                    txtTrikhePardakht.setValue(data.fldTarikhPardakht);

                    var CboStatus = App.NewMotalebatParametriSingle.queryById('CboStatus');
                    CboStatus.setValue(data.fldStatus);

                    var txtYear = App.NewMotalebatParametriSingle.queryById('txtYear');
                    txtYear.setValue(data.Sal);

                    var txtMonth = App.NewMotalebatParametriSingle.queryById('txtMonth');
                    txtMonth.setValue(data.Month);

                    var Id = App.NewMotalebatParametriSingle.queryById('fldId');
                    Id.setValue(data.fldId);

                    var chkMashmoolBime = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
                    chkMashmoolBime.setValue(data.fldMashmoleBime);

                    var chkMazayaBime = App.NewMotalebatParametriSingle.queryById('chkMazayaBime');
                    chkMazayaBime.setValue(data.fldMazayaMashmool);

                    var chkMashmoolMaliyat = App.NewMotalebatParametriSingle.queryById('chkMashmoolMaliyat');
                    chkMashmoolMaliyat.setValue(data.fldMashmoleMaliyat);

                  /*  if (data.use == true) {
                        CboParametrha.setReadOnly(true);
                        CboParametrha.setFieldStyle("background-image:none;background-color:#dfe8f6");

                        CboNoePardakht.setReadOnly(true);
                        CboNoePardakht.setFieldStyle("background-image:none;background-color:#dfe8f6");

                        txtMablagh.setReadOnly(true);
                        txtMablagh.setFieldStyle("background-image:none;background-color:#dfe8f6");

                        txtTedad.setReadOnly(true);
                        txtTedad.setFieldStyle("background-image:none;background-color:#dfe8f6");

                        txtTrikhePardakht.setReadOnly(true);
                        txtTrikhePardakht.setFieldStyle("background-image:none;background-color:#dfe8f6");

                        chkMashmoolBime.setReadOnly(true);
                        chkMashmoolMaliyat.setReadOnly(true);
                    }
                    else {
                        CboParametrha.setReadOnly(false);
                        CboParametrha.setFieldStyle("");

                        CboNoePardakht.setReadOnly(false);
                        CboNoePardakht.setFieldStyle("");

                        txtMablagh.setReadOnly(false);
                        txtMablagh.setFieldStyle("");

                        txtTedad.setReadOnly(false);
                        txtTedad.setFieldStyle("");

                        txtTrikhePardakht.setReadOnly(false);
                        txtTrikhePardakht.setFieldStyle("");

                        chkMashmoolBime.setReadOnly(false);
                        chkMashmoolMaliyat.setReadOnly(false);
                    }*/
                    Ext.net.Mask.hide();
                    App.NewMotalebatParametriSingle.queryById('CboNoePardakht').resumeEvent('change');
                    App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht').resumeEvent('change');
                    App.NewMotalebatParametriSingle.queryById('txtTedad').resumeEvent('change');
                }
            });
        }
        else {
            Ext.net.DirectMethod.request({
                url: '/PayRoll/KosuratParametri/DetailsHeader',
                params: {
                    id: '@ViewBag.PersonalId',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    var txtName = App.NewMotalebatParametriSingle.queryById('txtName');
                    txtName.setValue(data.fldName);
                    txtName.setReadOnly(true);
                    txtName.setFieldStyle("background-image:none;background-color:#dfe8f6");

                    var txtNationalCode = App.NewMotalebatParametriSingle.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    txtNationalCode.setReadOnly(true);
                    txtNationalCode.setFieldStyle("background-image:none;background-color:#dfe8f6");

                    var txtShomarePersoneli = App.NewMotalebatParametriSingle.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    txtShomarePersoneli.setReadOnly(true);
                    txtShomarePersoneli.setFieldStyle("background-image:none;background-color:#dfe8f6");
                    Ext.net.Mask.hide();
                }
            });
            App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht').setValue('@ViewBag.TarikhPardakht');
            App.NewMotalebatParametriSingle.queryById('CboStatus').setValue("1");
            App.NewMotalebatParametriSingle.queryById('CboNoePardakht').setValue("0");
            App.NewMotalebatParametriSingle.queryById('CboParametrha').setValue(ParametrDefultM);
        }
    }
    function checkSaveMotalebatParametriSingle() {
        var SelectedRow = App.MotalebatParametriSingle.queryById('GridHeader').selModel.getLastSelected();
        if (SelectedRow.data.fldStatusId == 1) {
            SaveMotalebatParametriSingle();
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "وضعیت فرد مورد نظر " + SelectedRow.data.fldStatusTitle + " است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveMotalebatParametriSingle() {
        var CboParametrha = App.NewMotalebatParametriSingle.queryById('CboParametrha');
        var CboNoePardakht = App.NewMotalebatParametriSingle.queryById('CboNoePardakht');
        var txtMablagh = App.NewMotalebatParametriSingle.queryById('txtMablagh');
        var txtTedad = App.NewMotalebatParametriSingle.queryById('txtTedad');
        var txtTrikhePardakht = App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht');
        var CboStatus = App.NewMotalebatParametriSingle.queryById('CboStatus');
        var txtMonth = App.NewMotalebatParametriSingle.queryById('txtMonth');
        var txtYear = App.NewMotalebatParametriSingle.queryById('txtYear');
        var Id = App.NewMotalebatParametriSingle.queryById('fldId');
        var chkMashmoolBime = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
        var chkMazayaBime = App.NewMotalebatParametriSingle.queryById('chkMazayaBime');
        var chkMashmoolMaliyat = App.NewMotalebatParametriSingle.queryById('chkMashmoolMaliyat');

        var er = false;

        if (CboParametrha.validate() == false) {
            er = true;
        }

        if (CboNoePardakht.validate() == false) {
            er = true;
        }

        if (txtMablagh.validate() == false) {
            er = true;
        }

        if (txtTedad.validate() == false) {
            er = true;
        }

        if (txtTrikhePardakht.validate() == false) {
            er = true;
        }

        if (CboStatus.validate() == false) {
            er = true;
        }

        if (txtMonth.validate() == false) {
            er = true;
        }

        if (txtYear.validate() == false) {
            er = true;
        }

        if (er == true)
            return;

        if (txtMonth.getValue() == 0 || txtYear.getValue() == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "تاریخ غیر فعالی معتبر نیست.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        if (CboNoePardakht.getValue() == 0 && txtTedad.getValue() == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا تعداد را وارد کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        var NoePardakht = false;
        if (CboNoePardakht.getValue() == "1")
            NoePardakht = true;
        var Status = false;
        if (CboStatus.getValue() == "1")
            Status = true;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/MotalebatParametri/SaveSingle',
            params: {
                fldId: Id.getValue(),
                fldPersonalId: '@ViewBag.PersonalId',
                fldParametrId: CboParametrha.getValue(),
                fldNoePardakht: NoePardakht,
                fldMablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                fldTedad: txtTedad.getValue(),
                fldTarikhPardakht: txtTrikhePardakht.rawValue,
                fldMashmoleBime:chkMashmoolBime.getValue(),
                fldMashmoleMaliyat: chkMashmoolMaliyat.getValue(),
                fldMazayaMashmool: chkMazayaBime.getValue(),
                fldMonth: txtMonth.getValue(),
                fldYear: txtYear.getValue(),
                fldStatus: Status,
                DelCalc: '@ViewBag.DelCalc',
                OrganId: '@ViewBag.OrganId'
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK,
                    fn: function (btn) {
                        if (btn == 'ok' && data.Er != 1) {
                            App.NewMotalebatParametriSingle.destroy();
                        }
                    }
                });
                ReloadMotalebatParametriSingle();
                ParametrDefultM = CboParametrha.getValue();
                Ext.net.Mask.hide();
            }
        });
    }

    var addKeyMapMotalebateparametrisingle= function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], 
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var nextfld;
                    if (Ext.Element.getActiveElement().name != "") {
                        var keyfield = App.NewMotalebatParametriSingle.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                        if (keyfield.itemId == "txtMablagh") {
                            if (App.NewMotalebatParametriSingle.queryById('CboNoePardakht').getValue() == "1") {
                                nextfld = App.NewMotalebatParametriSingle.queryById('txtTrikhePardakht');
                            }
                            else {
                                nextfld = App.NewMotalebatParametriSingle.queryById('txtTedad');
                            }
                        }
                        else if (keyfield.itemId == "CboStatus") {
                            if (App.NewMotalebatParametriSingle.queryById('CboStatus').getValue() == "0") {
                                nextfld = App.NewMotalebatParametriSingle.queryById('txtMonth');
                            }
                            else {
                                nextfld = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
                                nextfld.focus();
                                return;
                            }
                        }
                        else if (keyfield.itemId == "txtMonth") {
                            nextfld = App.NewMotalebatParametriSingle.queryById('txtYear');
                        }
                        else if (keyfield.itemId == "txtYear") {
                            nextfld = App.NewMotalebatParametriSingle.queryById('chkMashmoolBime');
                            nextfld.focus();
                            return;
                        }
                        else {
                            nextfld = keyfield.nextSibling().nextSibling();
                        }
                    }
                    else {
                        if (App.NewMotalebatParametriSingle.queryById('chkMashmoolBime').hasFocus == true) {
                            nextfld = App.NewMotalebatParametriSingle.queryById('chkMazayaBime');
                            nextfld.focus();
                            return;
                        }
                        
                        if (App.NewMotalebatParametriSingle.queryById('chkMazayaBime').hasFocus == true) {
                            nextfld = App.NewMotalebatParametriSingle.queryById('chkMashmoolMaliyat');
                            nextfld.focus();
                            return;
                        }

                        else {
                            return;
                        }
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
    });
    };
</script>
