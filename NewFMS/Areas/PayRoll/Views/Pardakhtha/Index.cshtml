@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    td {
        text-align: left;
    }
</style>

@(Html.X().Window()
    .Closable(true)
    .CloseAction(CloseAction.Destroy)
    .Listeners(l=>l.Render.Handler="setTitleWin()")
    .Layout(LayoutType.Fit)
    .Modal(true)
    .Width(530)
    .ID("SayerPardakhthaWin")
    //.Title("سایر پرداخت ها")
    .ButtonAlign(Alignment.Center)
    .Buttons(
        Html.X().Button()
            .Text("ادامه")
            .Icon(Ext.Net.Icon.PageGo)
            .Listeners(l => l.Click.Handler = "NextSayerPardakhtha()"),
       X.Button()
       .Text("راهنما")
       .Icon(Ext.Net.Icon.Help)
           .Listeners(l => { l.Click.Handler = "HelpSayerPardakhtha();"; }),
        Html.X().Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .Listeners(l => l.Click.Handler = "App.SayerPardakhthaWin.destroy()")
    )
    .Items(
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Center})
            .PaddingSpec("4px 12px 4px 12px")
            .Items(
                X.FieldSet()
                    .Border(true)
                    .Title("مشخصات پرداخت")
                    .PaddingSpec("0 7px 7px 7px")
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 2 })
                    .Items(
                        X.Label("سازمان:"),
                        X.ComboBox()
                            .ItemID("CboOrgan")
                            .TypeAhead(true)
                            .ColSpan(3)
                            .AutoFocus(true)
                            .Editable(true)
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .BlankText("لطفا سازمان را انتخاب کنید.")
                            .Listeners(l => l.Change.Handler = "if(App.SayerPardakhthaWin.queryById('CboCostCenter').getValue()==2){App.SayerPardakhthaWin.queryById('CboCostCenterType').getStore().load();}")
                            .AllowBlank(false)
                            .ForceSelection(true)
                            .DisplayField("fldTitle")
                            .ValueField("fldId")
                            .EmptyText("سازمان ...")
                            .Width(365)
                            .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldTitle", ModelFieldType.String) { Mapping = "fldTitle" }
                                    )
                                )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetOrgan"))
                                    .Reader(X.JsonReader().Root("data"))
                                )
                                .Listeners(l => l.Load.Handler = "setdefaultValueSayerPardakhtha()")
                                ),
                        X.Label("سال:"),
                        X.ComboBox()
                            .ItemID("CboYear")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا سال را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Listeners(l => {
                                l.AfterRender.Handler = "setValueYear()";
                                l.Change.Handler = "setYearClass()";
                            })
                            .Items(
                                new ListItem("1387", "1387"),
                                new ListItem("1388", "1388"),
                                new ListItem("1389", "1389"),
                                new ListItem("1390", "1390"),
                                new ListItem("1391", "1391"),
                                new ListItem("1392", "1392"),
                                new ListItem("1393", "1393"),
                                new ListItem("1394", "1394"),
                                new ListItem("1395", "1395"),
                                new ListItem("1396", "1396"),
                                new ListItem("1397", "1397"),
                                new ListItem("1398", "1398"),
                                new ListItem("1399", "1399"),
                                new ListItem("1400", "1400"),
                                new ListItem("1401", "1401"),
                                new ListItem("1402", "1402"),
                                new ListItem("1403", "1403")
                        ),
                        X.Label("ماه:").ItemID("lblMonth"),
                        X.ComboBox()
                            .ItemID("CboMonth")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا ماه را انتخاب کنید.")
                            .Listeners(l => {
                                l.AfterRender.Handler = "setValueMonth()";
                                l.Change.Handler = "setMonthClass()";
                            })
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("فروردین", "01"),
                                new ListItem("اردیبهشت", "02"),
                                new ListItem("خرداد", "03"),
                                new ListItem("تیر", "04"),
                                new ListItem("مرداد", "05"),
                                new ListItem("شهریور", "06"),
                                new ListItem("مهر", "07"),
                                new ListItem("آبان", "08"),
                                new ListItem("آذر", "09"),
                                new ListItem("دی", "10"),
                                new ListItem("بهمن", "11"),
                                new ListItem("اسفند", "12")
                            ),
                        X.Label("ورود اطلاعات:"),
                        X.ComboBox()
                            .ItemID("CboType")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا اطلاعات را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("انفرادی", "1"),
                                new ListItem("گروهی", "2")
                            )
                            .Listeners(a =>
                                {
                                    a.AfterRender.Handler = "App.SayerPardakhthaWin.queryById('CboType').setValue('2');";
                                    a.Change.Handler = "ChangeCboTypeS()";
                                }
                            ),
                        X.Label("نوبت پرداخت:").ItemID("lblNobatePardakht"),
                        X.ComboBox()
                            .ItemID("CboNobatePardakht")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا نوبت پرداخت را انتخاب کنید.")
                            .Listeners(l =>{
                                l.AfterRender.Handler = "setValueNobatePardakht()";
                                l.Change.Handler = "setNobatePardakhtCalss()";
                            })
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("یک", "1"),
                                new ListItem("دو", "2"),
                                new ListItem("سه", "3"),
                                new ListItem("چهار", "4"),
                                new ListItem("پنج", "5")
                            ),
                        X.Label("نوع فیلتر:").ItemID("lblCostCenter"),
                        X.ComboBox()
                            .ItemID("CboCostCenter")
                            .Editable(false)
                            .TypeAhead(true)
                            .QueryMode(DataLoadMode.Local)
                            .AllowBlank(false)
                            .BlankText("لطفا نوع فیلتر را انتخاب نمایید.")
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .EmptyText("مراکز هزینه")
                            .Listeners(ls =>
                                {
                                    ls.AfterRender.Handler = "setValueCostCenter()";
                                    ls.Select.Handler = "setCostClass()";
                                    ls.Change.Handler = "if(App.SayerPardakhthaWin.queryById('CboCostCenter').getValue()==2 && App.SayerPardakhthaWin.queryById('CboOrgan').validate()){App.SayerPardakhthaWin.queryById('CboCostCenterType').getStore().load();}ChangeCostCenterS()";
                                })
                            .ValueNotFoundText("...")
                            .Items(
                                new ListItem("تمام پرسنل", "1"),
                                new ListItem("براساس مرکز هزینه", "2"),
                                new ListItem("براساس محل خدمت", "3")
                                ),
                                    X.Label("").ColSpan(2).ItemID("BlankLbl"),
                        X.Label("نوع مراکز هزینه:").ItemID("lblCostCenterType"),
                        X.ComboBox()
                            .ItemID("CboCostCenterType")
                            .Editable(false)
                            .TypeAhead(true)
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                            .EmptyText("نوع مراکز هزینه")
                            .ValueNotFoundText("...")
                            .Listeners(l => l.Select.Handler = "setCostClass();")
                            .Store(X.Store()
                                .AutoLoad(false)
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                    new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                    new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                    )
                                )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetCostCenter"))
                                    .Reader(X.JsonReader().Root("data"))
                                )
                                .Parameters(ps =>
                                    ps.Add(new StoreParameter("ID", "App.SayerPardakhthaWin.queryById('CboCostCenter').getValue()", ParameterMode.Raw))                                
                                )
                                    .Parameters(ps =>
                                        ps.Add(new StoreParameter("OrganId", "App.SayerPardakhthaWin.queryById('CboOrgan').getValue()", ParameterMode.Raw))
                                    )
                            ),
                        X.Label("نوع حساب:").ItemID("lblTypeHesab"),
                         X.ComboBox()
                            .AutoFocus(true)
                            .ItemID("CboTypeHesab")
                             .LabelAlign(Ext.Net.LabelAlign.Top)
                            .TypeAhead(true)
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .Editable(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .EmptyText("نوع حساب")
                           .Store(X.Store()
                                .Model(X.Model()
                                    .IDProperty("ID")
                                    .Fields(
                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                    )
                                )
                                .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetTypeHesab"))
                                    .Reader(X.JsonReader().Root("data"))
                                )
                                )
                                       .SelectedItems(new { Value = "2" })
                                ,
                        //X.ComboBox()
                        //    .ItemID("CboTypeHesab")
                        //    .Editable(false)
                        //    .AllowBlank(false)
                        //    .TypeAhead(true)
                        //    .QueryMode(DataLoadMode.Local)
                        //    .TriggerAction(TriggerAction.All)
                        //    .EmptyText("نوع حساب")
                        //    .Items(
                        //        new ListItem("حقوق", "0"),
                        //        new ListItem("بن کارت", "1")
                        //        )
                        //    .SelectedItems(new { Value = "1" }),
                        X.Label("مرحله پرداخت:").ItemID("lblMarhalePardakht"),
                        X.ComboBox()
                            .ItemID("CboMarhalePardakht")
                            .Editable(false)
                            .TypeAhead(true)
                            .AllowBlank(false)
                            .BlankText("لطفا مرحله پرداخت را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .Items(
                                new ListItem("یک", "1"),
                                new ListItem("دو", "2"),
                                new ListItem("سه", "3"),
                                new ListItem("چهار", "4"),
                                new ListItem("پنج", "5")
                                )
                            .SelectedItems(new { Value = "1" })
                        ,
                        X.Label("نوع مستمر:").ItemID("lblNoeMostamer"),
                        X.ComboBox()
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .ItemID("CboNoeMostamer")
                        .Editable(false)
                        .TypeAhead(true)
                            .BlankText("لطفا نوع مستمر را انتخاب کنید.")
                        .QueryMode(DataLoadMode.Local)
                        .TriggerAction(TriggerAction.All)
                        .Items(
                                new ListItem("مستمر", "1"),
                                new ListItem("غیر مستمر", "2")
                        )
                            .SelectedItems(new { Value = "1" })
                                .Listeners(l =>
                                {
                                    l.AfterRender.Handler = "setValueNoeMostamer()";
                                    l.Select.Handler = "setNoeMostamerCalss()";
                                })
                                
                                ,X.TreePanel()
                            .ID("TreePardakhtha")
                                    .AutoScroll(true)
                                    .Width(300)
                                    .ColSpan(4)
                                    .Height(200)
                                    .UseArrows(true)
                                    .Border(false)
                                        .Store(
                    Html.X().TreeStore()
                        .Proxy(
                                    Html.X().AjaxProxy().Url(Url.Action("Node"))
                        )
                )

                                    .Listeners(a =>
                                    {
                                        a.ItemClick.Handler = "GetIdChartOrgan(record)";
                                        a.AfterRender.Handler = "this.getRootNode().expand();";
                                       a.BeforeLoad.Fn = "nodeLoad";
                                    })
                       .Root(Html.X().Node().NodeID("0").Text("چارت سازمانی"))

                                    .View(
                                    X.TreeView()
                                    .Plugins(
                                    X.TreeViewDragDrop().AppendOnly(true).ContainerScroll(true)

                                )
                        )
                        )
            )
    )
)

<script type="text/javascript">
    function setdefaultValueSayerPardakhtha() {
        App.SayerPardakhthaWin.queryById('CboOrgan').select(App.SayerPardakhthaWin.queryById('CboOrgan').store.getAt(0));
    }
    var NodeId = 0;
    var nodeLoad = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/KarkardMahaneGroup/NodeLoad',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };
    function GetIdChartOrgan(record) {
        NodeId = record.getId();
    };

    function HelpSayerPardakhtha() {
        if ('@ViewBag.State' == "1") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/Help',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "2") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpEzafekar',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "3") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpTatilKar',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "4") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpMamoriyat',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "5") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpEydi',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "6") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpMorakhasi',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
        else if ('@ViewBag.State' == "7") {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Pardakhtha/HelpGhirNaghdi',
                success: function (data) {
                    Ext.net.Mask.hide();
                }
            });
        }
    }

    function setTitleWin() {
        if ('@ViewBag.State' == "1") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها");
        }
        else if ('@ViewBag.State' == "2") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(اضافه کاری)");
        }
        else if ('@ViewBag.State' == "3") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(تعطیل کاری)");
        }
        else if ('@ViewBag.State' == "4") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(مأموریت)");
        }
        else if ('@ViewBag.State' == "5") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(اطلاعات عیدی)");
        }
        else if ('@ViewBag.State' == "6") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(مرخصی)");
        }
        else if ('@ViewBag.State' == "7") {
            App.SayerPardakhthaWin.setTitle("سایر پرداخت ها(کمک غیر نقدی)");
        }
    }

    function setYearClass() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetYearClass',
            params: {
                Year: App.SayerPardakhthaWin.queryById("CboYear").getValue()
            }
        });
    }

    function setMonthClass() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetMonthClass',
            params: {
                Month: App.SayerPardakhthaWin.queryById("CboMonth").getValue()
            }
        });
    }

    function setCostClass() {
        var value = "";
        if (App.SayerPardakhthaWin.queryById('CboCostCenter').getValue() == "1") {
            value = "";
        }
        else {
            value = App.SayerPardakhthaWin.queryById('CboCostCenterType').getValue();
        }
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetCostClass',
            params: {
                Value: value
            }
        });
    }

    function setNobatePardakhtCalss() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/setNobatePardakhtCalss',
            params: {
                NobatePardakht: App.SayerPardakhthaWin.queryById("CboNobatePardakht").getValue()
            }
        });
    }
    function setNoeMostamerCalss() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/setNoeMostamerCalss',
            params: {
                NoeMostamer: App.SayerPardakhthaWin.queryById("CboNoeMostamer").getValue()
            }
        });
    }
    function setValueYear() {
        var CboYear = App.SayerPardakhthaWin.queryById('CboYear');
        CboYear.setValue('@ViewBag.Year');
    }

    function setValueNobatePardakht() {
        var CboNobatePardakht = App.SayerPardakhthaWin.queryById('CboNobatePardakht');
        CboNobatePardakht.setValue('@ViewBag.nobatePardakht');
    }
    function setValueNoeMostamer() {
        var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
        CboNoeMostamer.setValue('@ViewBag.noeMostamar');
    }
    function setValueMonth() {
        var CboMonth = App.SayerPardakhthaWin.queryById('CboMonth');
        CboMonth.setValue('@ViewBag.Month');
    }

    function setValueCostCenter() {
        var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
        var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');

        if ('@ViewBag.CostCenter' == "") {
            CboCostCenter.setValue("1");
        }
        else {
            CboCostCenter.setValue("2");
            CboCostCenterType.setValue('@ViewBag.CostCenter');
        }
    }

    function ChangeCostCenterS() {
        var CostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter').getValue();
        if (CostCenter == 2) {
            App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(377);
            App.SayerPardakhthaWin.queryById('CboCostCenterType').allowBlank = false;
            App.SayerPardakhthaWin.queryById('CboCostCenterType').validate();
            App.SayerPardakhthaWin.queryById('CboCostCenterType').show();
            App.SayerPardakhthaWin.queryById('lblCostCenterType').show();
            App.SayerPardakhthaWin.queryById('BlankLbl').hide();
            App.SayerPardakhthaWin.queryById('TreePardakhtha').hide();
        }
        else if (CostCenter == 3) {
            App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(372);
            App.SayerPardakhthaWin.queryById('CboCostCenterType').allowBlank = true;
            App.SayerPardakhthaWin.queryById('CboCostCenterType').validate();
            App.SayerPardakhthaWin.queryById('CboCostCenterType').hide();
            App.SayerPardakhthaWin.queryById('lblCostCenterType').hide();
            App.SayerPardakhthaWin.queryById('BlankLbl').show();
            App.SayerPardakhthaWin.queryById('TreePardakhtha').show();
        }
        else {
            App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(365);
            App.SayerPardakhthaWin.queryById('CboCostCenterType').allowBlank = true;
            App.SayerPardakhthaWin.queryById('CboCostCenterType').validate();
            App.SayerPardakhthaWin.queryById('CboCostCenterType').hide();
            App.SayerPardakhthaWin.queryById('lblCostCenterType').hide();
            App.SayerPardakhthaWin.queryById('BlankLbl').hide();
            App.SayerPardakhthaWin.queryById('TreePardakhtha').hide();
        }
    }

    function NextSayerPardakhtha() {
        var CboYear = App.SayerPardakhthaWin.queryById('CboYear').getValue();
        var CboMonth = App.SayerPardakhthaWin.queryById('CboMonth').getValue();
        var Month = App.SayerPardakhthaWin.queryById('CboMonth');
        var CboType = App.SayerPardakhthaWin.queryById('CboType').getValue();
        var CboTypeHesab = App.SayerPardakhthaWin.queryById('CboTypeHesab').getValue();
        var nobatPardakht = App.SayerPardakhthaWin.queryById('CboNobatePardakht');
        var marhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
        var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
        var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
        var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
        var CboOrgan = App.SayerPardakhthaWin.queryById('CboOrgan');

        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        if ('@ViewBag.State' == "1") {
            if (CboType == "1") {/*انفرادی*/
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Pardakhtha/SayerPardakhthaSingle?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    /*Ext.net.Mask.hide();*/
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {/*گروهی*/
                var valid = true;
                if (nobatPardakht.validate() == false)
                    valid = false;
                if (marhalePardakht.validate() == false)
                    valid = false;
                if (CboCostCenter.validate() == false)
                    valid = false;
                if (CboCostCenterType.validate() == false)
                    valid = false;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Pardakhtha/SayerPardakhthaGroup?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&NobatePardakht=' + nobatPardakht.getValue() + '&marhalePardakht=' + marhalePardakht.getValue() + '&CostCenter=' + CboCostCenter.getValue() + '&CostCenterType=' + CboCostCenterType.getValue() + '&TypeHesab=' + CboTypeHesab + '&OrganId=' + CboOrgan.getValue() + '&Mostamar=' + CboNoeMostamer.getValue(),
                                success: function () {
                                    /*Ext.net.Mask.hide();*/
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });


            }
        }
        else if ('@ViewBag.State' == "2") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            var fldType = "1";
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EzafeKari_TatilKari/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&Type=' + fldType + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "fldEzafeKari_TatilKari";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                var fldType = "1";
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EzafeKari_TatilKari/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&Type=' + fldType + '&nobatePardakht=' + nobatPardakht.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
        }
        else if ('@ViewBag.State' == "3") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            var fldType = "2";
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EzafeKari_TatilKari/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&Type=' + fldType + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "fldEzafeKari_TatilKari";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                var fldType = "2";
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EzafeKari_TatilKari/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&Type=' + fldType + '&nobatePardakht=' + nobatPardakht.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
        }
        else if ('@ViewBag.State' == "4") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Mamuriyat/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "fldMamuriyat";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Mamuriyat/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&nobatePardakht=' + nobatPardakht.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
        }
        else if ('@ViewBag.State' == "5") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EtelaatEydi/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "fldEtelaatEydi";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/EtelaatEydi/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&nobatePardakht=' + nobatPardakht.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
        }
        else if ('@ViewBag.State' == "6") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Morakhasi/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "fldMorakhasiId";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/Morakhasi/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&nobatePardakht=' + nobatPardakht.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });


            }
        }
        else if ('@ViewBag.State' == "7") {
            if (CboType == "1") {
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: nobatPardakht.getValue(),
                        MarhalePardakht: marhalePardakht.getValue(),

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/KomakGheyerNaghdi/Index?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
            else if (CboType == "2") {
                var FieldName = "KomakId";
                var CostCenter_ChartId = 0;
                var valid = true;
                if (CboOrgan.validate() == false)
                    valid = false;
                if (CboCostCenter.getValue() == 2) {
                    if (CboCostCenterType.validate() == false)
                        valid = false;

                    FieldName = "CostCenter";
                    CostCenter_ChartId = CboCostCenterType.getValue();
                }
                else if (CboCostCenter.getValue() == 3) {
                    if (NodeId == 0)
                        valid = false;

                    FieldName = "ChartOrgan";
                    CostCenter_ChartId = NodeId;
                }
                if (valid == false) {
                    Ext.net.Mask.hide();
                    return;
                }
                Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
                Ext.net.DirectMethod.request({
                    url: '/PayRoll/Pardakhtha/CheckPardakhtHa',
                    params: {
                        PersonalId: 0,
                        Year: CboYear,
                        Month: CboMonth,
                        OrganId: CboOrgan.getValue(),
                        NobatPardakht: 1,
                        MarhalePardakht: 0,

                    },
                    success: function (data) {

                        if (data.AllowGenerate == 1) {
                            App.SayerPardakhthaWin.destroy();
                            Ext.net.DirectMethod.request({
                                url: '/PayRoll/KomakGheyerNaghdi/GroupIndex?containerId=FirstTabPay&Year=' + CboYear + '&Month=' + CboMonth + '&NoeMostamer=' + CboNoeMostamer.getValue() + '&FieldName=' + FieldName + '&CostCenter_ChartId=' + CostCenter_ChartId + '&OrganId=' + CboOrgan.getValue(),
                                success: function () {
                                    Ext.net.Mask.hide();
                                }
                            });
                        }
                        else {
                            Ext.net.Mask.hide();
                            Ext.MessageBox.show({
                                title: "خطا",
                                msg: "کلیه عملیات ماه " + Month.getDisplayValue() + " بسته شده است. عملیات مجاز نیست",
                                icon: Ext.MessageBox.ERROR,
                                buttons: Ext.MessageBox.OK
                            });
                        }
                    }
                });

            }
        }
    }

    function ChangeCboTypeS() {
        var CboType = App.SayerPardakhthaWin.queryById('CboType').getValue();
        App.SayerPardakhthaWin.queryById('CboTypeHesab').hide();
        App.SayerPardakhthaWin.queryById('lblTypeHesab').hide();

        if (CboType == "1") {/*انفرادی*/
            App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(318);
            var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
            CboNoeMostamer.hide();
            var lblNoeMostamer = App.SayerPardakhthaWin.queryById('lblNoeMostamer');
            lblNoeMostamer.hide();

            var NobatePardakht = App.SayerPardakhthaWin.queryById('CboNobatePardakht');
            NobatePardakht.hide();
            var lblNobatePardakht = App.SayerPardakhthaWin.queryById('lblNobatePardakht');
            lblNobatePardakht.hide();

            var MarhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
            MarhalePardakht.hide();
            var lblMarhalePardakht = App.SayerPardakhthaWin.queryById('lblMarhalePardakht');
            lblMarhalePardakht.hide();

            var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
            CboCostCenter.hide();
            var lblCostCenter = App.SayerPardakhthaWin.queryById('lblCostCenter');
            lblCostCenter.hide();

            var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
            CboCostCenterType.hide();
            var lblCostCenterType = App.SayerPardakhthaWin.queryById('lblCostCenterType');
            lblCostCenterType.hide();
            App.TreePardakhtha.hide();

            if ('@ViewBag.State' == "5") {
                var Month = App.SayerPardakhthaWin.queryById('CboMonth');
                Month.hide();
                var lblMonth = App.SayerPardakhthaWin.queryById('lblMonth');
                lblMonth.hide();
            }
            else {
                var Month = App.SayerPardakhthaWin.queryById('CboMonth');
                Month.show();
                var lblMonth = App.SayerPardakhthaWin.queryById('lblMonth');
                lblMonth.show();
            }
        }
        else {
            var CostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter').getValue();
            if (CostCenter == 2) {
                App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(377);
            }
            else if (CostCenter == 3) {
                App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(372);

            }
            else {
                App.SayerPardakhthaWin.queryById('CboOrgan').setWidth(365);

            }
            var NobatePardakht = App.SayerPardakhthaWin.queryById('CboNobatePardakht');
            NobatePardakht.show();
            var lblNobatePardakht = App.SayerPardakhthaWin.queryById('lblNobatePardakht');
            lblNobatePardakht.show();

            var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
            CboNoeMostamer.hide();
            var lblNoeMostamer = App.SayerPardakhthaWin.queryById('lblNoeMostamer');
            lblNoeMostamer.hide();

            var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
            CboCostCenter.show();
            var lblCostCenter = App.SayerPardakhthaWin.queryById('lblCostCenter');
            lblCostCenter.show();

            if ('@ViewBag.State' == "1") {
                var MarhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
                MarhalePardakht.show();
                var lblMarhalePardakht = App.SayerPardakhthaWin.queryById('lblMarhalePardakht');
                lblMarhalePardakht.show();
                var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
                CboNoeMostamer.show();
                var lblNoeMostamer = App.SayerPardakhthaWin.queryById('lblNoeMostamer');
                lblNoeMostamer.show();
                var Month = App.SayerPardakhthaWin.queryById('CboMonth');
                Month.show();
                var lblMonth = App.SayerPardakhthaWin.queryById('lblMonth');
                lblMonth.show();



                /*var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
                CboCostCenterType.show();
                var lblCostCenterType = App.SayerPardakhthaWin.queryById('lblCostCenterType');
                lblCostCenterType.show();*/
                ChangeCostCenterS();

                App.SayerPardakhthaWin.queryById('CboTypeHesab').show();
                App.SayerPardakhthaWin.queryById('lblTypeHesab').show();
            }
            else if ('@ViewBag.State' == "5") {
                var MarhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
                MarhalePardakht.hide();
                var lblMarhalePardakht = App.SayerPardakhthaWin.queryById('lblMarhalePardakht');
                lblMarhalePardakht.hide();

                var Month = App.SayerPardakhthaWin.queryById('CboMonth');
                Month.hide();
                var lblMonth = App.SayerPardakhthaWin.queryById('lblMonth');
                lblMonth.hide();

                /* var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
                 CboCostCenter.hide();
                 var lblCostCenter = App.SayerPardakhthaWin.queryById('lblCostCenter');
                 lblCostCenter.hide();*/

                var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
                CboCostCenterType.hide();
                var lblCostCenterType = App.SayerPardakhthaWin.queryById('lblCostCenterType');
                lblCostCenterType.hide();
            }
            else if ('@ViewBag.State' == "7") {
                var CboNoeMostamer = App.SayerPardakhthaWin.queryById('CboNoeMostamer');
                CboNoeMostamer.show();
                var lblNoeMostamer = App.SayerPardakhthaWin.queryById('lblNoeMostamer');
                lblNoeMostamer.show();

                var NobatePardakht = App.SayerPardakhthaWin.queryById('CboNobatePardakht');
                NobatePardakht.hide();
                var lblNobatePardakht = App.SayerPardakhthaWin.queryById('lblNobatePardakht');
                lblNobatePardakht.hide();

                var MarhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
                MarhalePardakht.hide();
                var lblMarhalePardakht = App.SayerPardakhthaWin.queryById('lblMarhalePardakht');
                lblMarhalePardakht.hide();

                /*  var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
                  CboCostCenter.hide();
                  var lblCostCenter = App.SayerPardakhthaWin.queryById('lblCostCenter');
                  lblCostCenter.hide();*/

                var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
                CboCostCenterType.hide();
                var lblCostCenterType = App.SayerPardakhthaWin.queryById('lblCostCenterType');
                lblCostCenterType.hide();
            }
            else {
                var MarhalePardakht = App.SayerPardakhthaWin.queryById('CboMarhalePardakht');
                MarhalePardakht.hide();
                var lblMarhalePardakht = App.SayerPardakhthaWin.queryById('lblMarhalePardakht');
                lblMarhalePardakht.hide();

                var Month = App.SayerPardakhthaWin.queryById('CboMonth');
                Month.show();
                var lblMonth = App.SayerPardakhthaWin.queryById('lblMonth');
                lblMonth.show();

                /* var CboCostCenter = App.SayerPardakhthaWin.queryById('CboCostCenter');
                 CboCostCenter.hide();
                 var lblCostCenter = App.SayerPardakhthaWin.queryById('lblCostCenter');
                 lblCostCenter.hide();*/

                var CboCostCenterType = App.SayerPardakhthaWin.queryById('CboCostCenterType');
                CboCostCenterType.hide();
                var lblCostCenterType = App.SayerPardakhthaWin.queryById('lblCostCenterType');
                lblCostCenterType.hide();
            }
        }
    }
</script>