@model IEnumerable<NewFMS.WCF_PayRoll.OBJ_SayerPardakhtGroup>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}
<script src="~/Scripts/accounting.js"></script>
<style>
     .x-form-cb-wrap{
         text-align:center;
     }
     .redwarning{
         color:red;
     }
</style>
@*<script>
    Ext.define('MyApp.override.selection.CheckboxModel', {
        override: 'Ext.selection.CheckboxModel',
        selectByPosition: function (position, keepExisting) {
            if (!position.isCellContext) {
                position = new Ext.grid.CellContext(this.view).setPosition(position.row, position.column);
            }
            if (!this.checkOnly || position.column !== this.column) {
                this.callParent([position, keepExisting]);
            }
        }
    });
</script>*@

@(X.Panel()
    .Title("سایر پرداخت های گروهی")
    .Border(false)
    .ID("NewSayerPardakhthaGroup")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Height(670)
    .Layout(LayoutType.Fit)
    .Listeners(l => l.AfterRender.Fn = "addKeyMapSayerPardakhthaGroup")
    .TopBar(
        Html.X().Toolbar()
            .Items(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
                    .Listeners(l =>
                    {
                        l.Click.Handler = "SaveSayerPardakhtGroup();";
                    }),
                X.Button()
                    .Text("حذف")
                    .Icon(Ext.Net.Icon.Delete)
        //.ToolTip("کلید میانبر F9")
                    .Listeners(de =>
                    {
                        de.Click.Handler = "DeleteSayerPardakhtGroup();";
                    })
        //        X.Button()
        //            .Text("بارگزاری مجدد")
        //            .Icon(Ext.Net.Icon.Reload)
        ////.ToolTip("کلید میانبر F9")
        //            .Listeners(de =>
        //            {
        //                de.Click.Handler = "ReloadPardakht();";
        //            })
                )
        )
    .Items(
        X.Panel()
            .Border(false)
            .Items(
                    X.Panel()
                    .Border(false)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Center})
                    .Items(
                        X.FieldSet()
                            .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 7 })
                            .Defaults(new { Margin = 5 })
                            .Title("مشخصات پرداخت")
                            .Border(true)
                            .Items(
                                X.Label("عنوان:"),
                                X.TextField()
                                    .ItemID("txtTitle")
                                    .AutoFocus(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا عنوان را وارد کنید.")
                                    .Width(300),
                                X.Label("مبلغ:"),
                                X.TextField()
                                    .AllowBlank(false)
                                    .MaskRe("/[0-9]/")
                                    .BlankText("لطفا مبلغ را وارد کنید.")
                                    .Listeners(l => { l.Change.Handler = "App.NewSayerPardakhthaGroup.queryById('txtAmount').setValue(accounting.formatNumber(App.NewSayerPardakhthaGroup.queryById('txtAmount').getValue()));CheckInt(App.NewSayerPardakhthaGroup.queryById('txtAmount'));"; })  
                                    .Width(150)
                                    .ItemID("txtAmount"),
                                X.Button()
                                    .ItemID("btnINS")
                                    .Text("درج")
                                    .Icon(Icon.NoteAdd)
                                    .Width(70)
                                    .Listeners
                                    (l => l.Click.Handler = "SaveINS();")
                            ),
                                X.Label("").ItemID("lblNotHesab").Cls("redwarning").Width(600).Height(20)
                            ),
                X.Panel()
                    .Border(false)
                    .Items(
                        X.GridPanel()
                            .AutoScroll(true)
                            .ItemID("GridGroup")
                            .Listeners(l => l.AfterRender.Handler = "setHeightGridGroup()")
                            .View(
                                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true).GetRowClass(l => l.Fn = "getRowClassSayerPardakhthaGroup")
                            )
                            .Store(
                                X.StoreForModel()
                             //       .Listeners(l => l.DataChanged.Handler = "setHeightGridGroup()")
                            )
                            .ColumnModel(
                                Html.X().RowNumbererColumn(),
                                Html.X().Column().DataIndex(Model, m => m.fldPersonalInfoId).Text("کد پرسنل").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model, m => m.fldSayerPardakhtId).Text("کد سایر پرداخت ها").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model, m => m.fldShomareHesabsId).Text("کد شماره حساب").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام و نام خانوادگی").Flex(3).Wrap(true),
                                Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کدملی").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldSh_Personali).Text("شماره پرسنلی").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("عنوان").ItemID("txtTitlegrid").Flex(2).Editor(Html.X().TextField()),
                                Html.X().Column().DataIndex(Model, m => m.fldShomareHesab).Text("شماره حساب").Renderer("ExistHesab").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldAmount).Text("مبلغ").Flex(2).Renderer("seperateGroup")
                                    .Editor(Html.X().TextField().ItemID("txtAmountgrid").Listeners(l =>{
                                        l.Change.Handler = "App.NewSayerPardakhthaGroup.queryById('txtAmountgrid').setValue(accounting.formatNumber(App.NewSayerPardakhthaGroup.queryById('txtAmountgrid').getValue()));";
                                    })),
                                Html.X().CheckColumn().ID("ColMoaf").Flex(1).Editable(true).DataIndex("fldHasMaliyat").Text("مالیات").Listeners(l => {
                                    l.CheckChange.Fn = "SetMaliyat";
                                    l.BeforeCheckChange.Fn = "disableMaliyat";                                    
                                }),
                                Html.X().Column().ID("ColMaliyat").DataIndex(Model, m => m.fldMaliyat).Text("مبلغ مالیات").Renderer("seperateGroup"),
                                Html.X().Column().ID("ColPardakhti").DataIndex(Model, m => m.fldKhalesPardakhti).Text("خالص پرداختی").Renderer("seperateGroup"))
                            .Listeners(l =>
                            {
                                l.ViewReady.Handler = "ReloadPardakht();";
                            })
                            .SelectionModel(
                                Html.X().CheckboxSelectionModel()
                                    .Mode(Ext.Net.SelectionMode.Multi).CheckOnly(true)
                                    .Listeners(l => l.Select.Fn = "deselectNotingHesab")
                                        
                            )
                            .Plugins(Html.X().CellEditing().ClicksToEdit(1)
                            .Listeners(l=>{
                                l.Edit.Fn = "setAllValue";
                                l.BeforeEdit.Fn = "disableeditor";
                            }))
                        )
                )
            
        )
        )
<script type="text/javascript">
    var notHesab = "";


    var getRowClassSayerPardakhthaGroup = function (record, rowIndex, rowParams, store) {
        var color = 'white';
        if (rowIndex % 2 == 1)
            color = '#93C7DE';
        var clsName = "row" + rowIndex,
            clsStyle = Ext.String.format(".{0} .x-grid-cell, .{0} .x-grid-rowwrap-div { background-color: {1} !important; })", clsName, color);
        Ext.net.ResourceMgr.registerCssClass(clsName, clsStyle);
        return clsName;
    };

    var seperateGroup = function (value, metadata, record, rowIndex, colIndex, store) {
        return value.toLocaleString();
    };

    var disableMaliyat = function (column, rowIndex, record) {
        if (record.data.fldMoafAsMaliyat == true) {
            return false;
        }
    };

    var disableeditor = function (editor, e) {

        if (e.colIdx == 5 && e.record.get('fldShomareHesab') == "" || e.colIdx == 7 && e.record.get('fldShomareHesab') == "" || e.colIdx == 8 && e.record.get('fldShomareHesab') == "") {
            return false;
        }
        App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().setLocked(true);
    };

    var setAllValue = function (a, b) {
        App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().setLocked(false);
        if (b.field == "fldAmount") {
            var Amount = b.record.data.fldAmount;
            if (b.record.data.fldHasMaliyat == true) {
                var Maliyat = Amount * 10 / 100;
                b.record.set('fldMaliyat', Maliyat);
                b.record.set('fldKhalesPardakhti', Amount - Maliyat);
            }
            else {
                b.record.set('fldMaliyat', 0);
                b.record.set('fldKhalesPardakhti', Amount);
            }
        }
    };

    var SetMaliyat = function (column, rowIndex, record, value) {
        var Amount = record.data.fldAmount;
        if (value == 1) {
            var Maliyat = Amount * 10 / 100;
            record.set('fldMaliyat', Maliyat);
            record.set('fldKhalesPardakhti', Amount - Maliyat);
        }
        else {
            record.set('fldMaliyat', 0);
            record.set('fldKhalesPardakhti', Amount);
        }
    };

    var ExistHesab = function (value, metadata, record, rowIndex, colIndex, store) {
        if (value == "") {
            notHesab = notHesab + record.data.fldName + "، ";
        }
        return value;
    };

    var deselectNotingHesab = function (a, record) {
        var sm = App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel();
        if (record.data.fldShomareHesab == "") {
            sm.deselect(record, true, true);
        }
    };

    function setHeightGridGroup() {
        /*App.NewSayerPardakhthaGroup.setHeight(App.PayWin.getHeight());*/
        App.NewSayerPardakhthaGroup.queryById('GridGroup').setHeight(App.PayWin.getHeight()-280);
    }

    function SaveINS() {
        var selected = App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().getSelection();
        if (selected.length == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا سطرهای مورد نظر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else {
            var txtTitle = App.NewSayerPardakhthaGroup.queryById('txtTitle');
            var txtAmount = App.NewSayerPardakhthaGroup.queryById('txtAmount');
            if (txtTitle.validate() == false) {
                return;
            }
            if (txtAmount.validate() == false) {
                return;
            }
            for (var i = 0; i < selected.length ; i++) {
                var record = selected[i];
                record.set('fldTitle', txtTitle.getValue());
                record.set('fldAmount', txtAmount.getValue());
                /*var ind = App.NewSayerPardakhthaGroup.queryById('GridGroup').store.indexOf(record);*/

                if (record.data.fldMoafAsMaliyat == false) {
                    if (record.data.fldHasMaliyat== true) {
                        var Maliyat = (txtAmount.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '')) * 10 / 100;
                        record.set('fldMaliyat', accounting.formatNumber(Maliyat));
                        record.set('fldKhalesPardakhti', accounting.formatNumber(((txtAmount.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '')) - Maliyat)));
                    }
                    else {
                        record.set('fldMaliyat', 0);
                        record.set('fldKhalesPardakhti', txtAmount.getValue());
                    }
                }
                else {
                    record.set('fldMaliyat', 0);
                    record.set('fldKhalesPardakhti', txtAmount.getValue());
                }
            }
        }
    }

    function ReloadPardakht() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/ReloadPardakhtGroup?Year=' + '@ViewBag.Year' + '&Month=' + '@ViewBag.Month' + '&nobatPardakht=' + '@ViewBag.nobatPardakht' +
                '&marhalePardakht=' + '@ViewBag.marhalePardakht' + '&CostCenter=' + '@ViewBag.CostCenter' + '&CostCenterType=' + '@ViewBag.CostCenterType'
                + '&TypeHesab=' + '@ViewBag.TypeHesab',

            success: function (result) {
                App.NewSayerPardakhthaGroup.queryById('GridGroup').getStore().loadData(result);
                App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().selectAll();
                Ext.net.Mask.hide();
                if (notHesab != "") {
                    App.NewSayerPardakhthaGroup.queryById('lblNotHesab').setText("برای پرسنل( " + notHesab + ") شماره حساب تعریف نشده است.");
                    App.NewSayerPardakhthaGroup.queryById('btnINS').setTooltip("برای پرسنل( " + notHesab + ") شماره حساب تعریف نشده است." );
                }
                /*notHesab = "";*/
            }
        });
    }

    function SaveSayerPardakhtGroup() {
        var PardakhtVal = new Array();

        var SelectedRows = App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().getSelection();
        if (SelectedRows.length > 0) {
            for (var i = 0; i < SelectedRows.length ; i++) {
                PardakhtVal.push({
                    'fldSayerPardakhtId': SelectedRows[i].data.fldSayerPardakhtId,
                    'fldPersonalInfoId': SelectedRows[i].data.fldPersonalInfoId,
                    'fldYear': '@ViewBag.Year',
                    'fldMonth': '@ViewBag.Month',
                    'fldTitle': SelectedRows[i].data.fldTitle,
                    'fldAmount': SelectedRows[i].data.fldAmount,
                    'fldHasMaliyat': SelectedRows[i].data.fldHasMaliyat,
                    'fldNobatePardakt': '@ViewBag.nobatPardakht',
                    'fldMarhalePardakht': '@ViewBag.marhalePardakht',
                    'fldMaliyat': SelectedRows[i].data.fldMaliyat,
                    'fldKhalesPardakhti': SelectedRows[i].data.fldKhalesPardakhti,
                    'fldShomareHesabsId': SelectedRows[i].data.fldShomareHesabsId
                });
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "هیچ سطری برای ذخیره انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }

        var data = {
            PardakhtGroup: PardakhtVal,
            fldCostCenterId: '@ViewBag.CostCenterType',
        };
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/PayRoll/Pardakhtha/SaveGroup',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                var result = data;/*JSON.parse(data);*/
                if (result.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: result.MsgTitle,
                    msg: result.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ReloadPardakht();
                for (var i = 0; i < App.FirstTabPay.items.length; i++) {
                    if (App.FirstTabPay.items.items[i].id == "SayerPardakhthaSingle" && App.SayerPardakhthaSingle.queryById('GridHeader').getSelectionModel().getSelection().length>0) {
                        ReloadSayerPardakhthaSingle();
                    }
                }
                ClearGroupSayer();
                Ext.net.Mask.hide();
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }


    function DeleteSayerPardakhtGroup() {
        var PardakhtGroupVal = new Array();
        var SelectedRows = App.NewSayerPardakhthaGroup.queryById('GridGroup').getSelectionModel().getSelection();
        if (SelectedRows.length > 0) {
            for (var i = 0; i < SelectedRows.length ; i++) {
                PardakhtGroupVal.push({
                    'fldId': SelectedRows[i].data.fldSayerPardakhtId
                });
            }
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        var data = {
                            PardakhtGroupVal: PardakhtGroupVal
                        };
                        $.ajax({
                            type: "POST",
                            url: '/PayRoll/Pardakhtha/DeleteGroup',
                            datatype: "json",
                            data: JSON.stringify(data),
                            contentType: 'application/json',
                            success: function (data) {
                                var result = data;/*JSON.parse(data);*/
                                var ic = Ext.MessageBox.INFO;
                                if (result.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: result.MsgTitle,
                                    msg: result.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                ReloadPardakht();
                                for (var i = 0; i < App.FirstTabPay.items.length; i++) {
                                    if (App.FirstTabPay.items.items[i].id == "SayerPardakhthaSingle" && App.SayerPardakhthaSingle.queryById('GridHeader').getSelectionModel().getSelection().length > 0) {
                                        ReloadSayerPardakhthaSingle();
                                    }
                                }
                                Ext.net.Mask.hide();
                            },
                            failure: function (data) {
                                alert(data.data);
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "هیچ سطری برای حذف انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function ClearGroupSayer() {
        App.NewSayerPardakhthaGroup.queryById('txtTitle').setValue('');
        App.NewSayerPardakhthaGroup.queryById('txtAmount').setValue('');
        notHesab = "";
    }

    var addKeyMapSayerPardakhthaGroup = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.NewSayerPardakhthaGroup.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld = keyfield.nextSibling().nextSibling();
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    };

    /*function EnterNext() {
        var keyfield = App.NewSayerPardakhthaGroup.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling().nextSibling();
        nextfld.focus();
        nextfld.selectText();
    }*/

</script>
