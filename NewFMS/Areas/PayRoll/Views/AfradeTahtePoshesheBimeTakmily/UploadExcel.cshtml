@model IEnumerable<NewFMS.WCF_PayRoll.OBJ_AfradeTahtePoshesheBimeTakmily_Details>
@using Ext.Net.MVC
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Window()
    .Modal(true)
                .Listeners(li => {  li.AfterRender.Fn = "addKeyMapAfradExcel"; })
    .Width(550)
        //   .Height(300)
    .Resizable(false)
    .Title("ثبت افراد تحت پوشش از طریق بارگذاری اکسل")
    .ID("AfradExcel")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel()
        //.PaddingSpec("5 5 5 5")
            .ButtonAlign(Ext.Net.Alignment.Center)
            .Border(false)
            .KeyMap(Html.X().KeyMap()
                .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
                .Binding(b =>
                {
                    b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("SaveAfrad(); ")
                    );

                }))
            .DefaultButton("btn")
        //.Layout(Ext.Net.LayoutType.VBox)
        //.LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Buttons(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
                    .Listeners(l => l.Click.Handler = "SaveAfrad();")
                    .ItemID("btnSave"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .ToolTip("کلید میانبر Esc")
                    .OnClientClick("App.AfradExcel.destroy();")
                    )
            .Items(

           
                 X.Panel().Border(false)
            .Items(
                X.FieldSet()
                        .ItemID("Panel").Title("اطلاعات افراد")
                    .Layout(Ext.Net.LayoutType.Table)
                    .Border(true)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 2 })
                        .Items(
                         X.Hidden().ItemID("GHarardadBimeId")

                            , X.Label("قرار داد بیمه (Ins):")
                            , X.TextField()
                            .ItemID("txtGHarardadBime")
                            .AllowBlank(false)
                            .BlankText("لطفا قرار داد بیمه را انتخاب کنید.")
                                .ReadOnly(true)
                            .Listeners(l =>
                            {
                                l.SpecialKey.Handler = "SelectGharardadBime(e.getKey());";
                            }),
                            
                            X.FileUploadField()
                                .ButtonOnly(true)
                                .ButtonText("آپلود فایل اکسل")
                                .DirectEvents(l =>
                                {
                                    l.Change.Action = "Upload";
                                    l.Change.Success = "hideprogressExcel";
                                    l.Change.Delay = 1000;
                                    l.Change.Before = "if(GotoServerAfrad==false){return false;}";
                                })
                                .Listeners(l => l.Change.Fn = "showFileExcel")
                                .Icon(Ext.Net.Icon.DiskUpload)
        )
        )
            .Layout(Ext.Net.LayoutType.VBox)
            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
    ))
)

<script type="text/javascript">
    var GotoServerAfrad = false;
    var EndUploadExcel = false;

    var CheckExcel = setInterval(CheckEndExcel, 500);

    function SaveAfrad() {
        var GHarardadBimeId = App.AfradExcel.queryById('GHarardadBimeId');
        var txtGHarardadBime = App.AfradExcel.queryById('txtGHarardadBime');
        var m = "";
        if (txtGHarardadBime.validate() == false) {
            return;
        }
        
        Ext.net.DirectMethod.request({
            url: '/PayRoll/AfradeTahtePoshesheBimeTakmily/SaveExcel',
            params: {
                GharadadBime: GHarardadBimeId.getValue()
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                if (data.CodeMeli != "" && data.CodeMeli != null) {
                    m = "توجه: کد ملی های ذیل یافت نشد.  " + "<br>" + data.CodeMeli;
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg + "<br>" + m,
                        icon: ic,
                        width: 500,
                        buttons: Ext.MessageBox.OK
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                }
                    
                Ext.net.Mask.hide();
            },
            timeout: 90000
        });
    }
    


    function CheckEndExcel() {
        if (EndUploadExcel == true) {
            Ext.MessageBox.hide();
            clearInterval(CheckEndExcel);
            EndUploadExcel = false;
            GotoServerAfrad = false;
            var m = "";
            var txtGHarardadBime = App.AfradExcel.queryById('txtGHarardadBime');
            var GHarardadBimeId = App.AfradExcel.queryById('GHarardadBimeId');
            if (txtGHarardadBime.validate() == false) {
                return;
            }
            Ext.net.Mask.show({ msg: 'فایل با موفقیت آپلود شد. در حال ذخیره سازی اطلاعات....' });
            Ext.net.DirectMethod.request({
                url: '/PayRoll/AfradeTahtePoshesheBimeTakmily/SaveExcel',
                params: {
                    GharadadBime: GHarardadBimeId.getValue()
                },
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1)
                        ic = Ext.MessageBox.ERROR;
                    if (data.CodeMeli != "" && data.CodeMeli != null) {
                        m = "توجه: کد ملی های ذیل یافت نشد.  " + "<br>" + data.CodeMeli;
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg + "<br>" + m,
                            icon: ic,
                            width: 500,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    else
                    {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg ,
                            icon: ic,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    
                    Ext.net.Mask.hide();
                },
                timeout: 90000
            });
        }
    }

    var showFileExcel = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        if (v) {
            showProgressBarExcel();
            if (v.split('.').pop().toLowerCase() == "xls" || v.split('.').pop().toLowerCase() == "xlsx") {
                if (document.getElementById(id).files[0].size <= 1048576) {
                    GotoServerAfrad = true;
                }
                else {
                    clearInterval(CheckEndExcel);
                    Ext.MessageBox.show({
                        title: "خطا",
                        msg: "حجم فایل انتخاب شده غیرمجاز است.",
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
            else {
                clearInterval(CheckEndExcel);
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "فایل انتخاب شده غیرمجاز است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }
    };

    var hideprogressExcel = function (Responsdtxt, ResponseObj) {
        if (ResponseObj.IsValid == true) {
            EndUploadExcel = true;
        }
        else {
            GotoServerAfrad = false;
            clearInterval(CheckEndExcel);
            EndUploadExcel = false;
            Ext.MessageBox.show({
                title: "خطا",
                msg: ResponseObj.Message,
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    };

    function showProgressBarExcel() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
   
    function SelectGharardadBime(Code) {
        if (Code == 45) {
            Ext.net.DirectMethod.request({
                url: '/PayRoll/SearchGharardadBime/Index',
                params: {
                    State: 2
                }
            });
        }
    }
    

    
    
   
    var addKeyMapAfradExcel = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.AfradExcel.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtGHarardadBime") {
                        nextfld = App.AfradExcel.queryById('btnSave');
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                        nextfld.selectText();
                    }
                    nextfld.focus();
                }
            }]
        });
    }


</script>
