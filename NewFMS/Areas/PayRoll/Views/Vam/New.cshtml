@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Window()
    .Modal(true)
    .Listeners(li => li.AfterRender.Handler = "LoadVam();")
    .Width(520)
        //   .Height(300)
    .Resizable(false)
    .Title("اطلاعات وام جدید")
    .ID("NewVam")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel()
            .ButtonAlign(Ext.Net.Alignment.Center)
            .Border(false)
            .KeyMap(Html.X().KeyMap()
                .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
                .Binding(b =>
                {
                    b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("checkSaveVam(); ")
                    );

                }))
            .DefaultButton("btn")
            .Layout(Ext.Net.LayoutType.VBox)
            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Buttons(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F8")
                        .Listeners(l => l.Click.Handler = "checkSaveVam();")
                    .ItemID("btnSave"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .ToolTip("کلید میانبر Esc")
                    .OnClientClick("App.NewVam.destroy();")
                    )
            .Items(
                X.FieldSet()
                        .ItemID("Panel").Title("اطلاعات وام")
                    .Layout(Ext.Net.LayoutType.Table)
                    .Border(true)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                    .Defaults(new { Margin = 2 })
                        .Items(
                            X.Hidden().ItemID("fldId"),
                                X.Hidden().ItemID("fldPersonalId"),
                    X.Label("تاریخ دریافت:"),
                    X.PDateField()
                    .AutoFocus(true)
                    .ItemID("txtTarikhDaryaft")
                    .MaskRe("/[0-9 /]/")
                    .MaxLength(10)
                    .EnforceMaxLength(true)
                    .AllowBlank(false)
                    .Listeners(l => l.Change.Handler = "TarikhDaryaft()")
                    .BlankText("لطفا تاریخ دریافت را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    , X.Label("تاریخ شروع قسط:")
                    , X.PDateField()
                    .ItemID("txtStartDate")
                    .MaskRe("/[0-9 /]/")
                    .MaxLength(10)
                    .EnforceMaxLength(true)
                    .Listeners(l => l.Change.Handler = "StartDate()")
                    .AllowBlank(false)
                    .BlankText("لطفا تاریخ شروع قسط را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    , X.Label("نوع وام:")
                    , X.ComboBox()
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .ItemID("CboTypeVam")
                    .Editable(false)
                    .TypeAhead(true)
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .Items(
                        new ListItem("کوتاه مدت", "1"),
                        new ListItem("بلند مدت", "2"),
                        new ListItem("مسکن", "3")
                        )
                            .SelectedItems(new { Value = "1" })
                     , X.Label("مبلغ وام:")
                    , X.TextField()
                    .ItemID("txtMablaghVam")
                    .AllowBlank(false)
                    .MaxLength(13)
                    .EnforceMaxLength(true)
                    .BlankText("لطفا مبلغ وام را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Listeners(l => { l.Change.Handler = "App.NewVam.queryById('txtMandeVam').setValue(App.NewVam.queryById('txtMablaghVam').getValue());App.NewVam.queryById('txtMablaghVam').setValue(accounting.formatNumber(App.NewVam.queryById('txtMablaghVam').getValue()));MablaghGhest();"; })
                    , X.Label("تعداد قسط:")
                    , X.TextField()
                    .ItemID("txtCount")
                    .AllowBlank(false)
                    .BlankText("لطفا تعداد قسط را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .MaxLength(3)
                    .EnforceMaxLength(true)
                    .Listeners(l => { l.Change.Handler = "MablaghGhest();"; })
                    , X.Label("مبلغ قسط:")
                    , X.TextField()
                    .ItemID("txtMablagh")
                    .AllowBlank(false)
                    .ReadOnly(true)
                    .BlankText("لطفا مبلغ قسط را وارد کنید.")
                    .Listeners(l => { l.Change.Handler = "App.NewVam.queryById('txtMablagh').setValue(accounting.formatNumber(App.NewVam.queryById('txtMablagh').getValue()));"; })
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    , X.Label("مانده وام:")
                   , X.TextField()
                    .ItemID("txtMandeVam")
                    .AllowBlank(false)
                    .MaxLength(13)
                    .EnforceMaxLength(true)
                    .BlankText("لطفا مانده وام را وارد کنید.")
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .Listeners(l => { l.Change.Handler = "App.NewVam.queryById('txtMandeVam').setValue(accounting.formatNumber(App.NewVam.queryById('txtMandeVam').getValue()));CheckInt(App.NewVam.queryById('txtMandeVam'));"; })
        )
    ))
)

<script type="text/javascript">
    var status;
    function TarikhDaryaft() {
        var txtTarikhDaryaft = App.NewVam.queryById('txtTarikhDaryaft');
        var txtStartDate = App.NewVam.queryById('txtStartDate');
        txtStartDate.setMinValue(txtTarikhDaryaft.getValue());
        txtStartDate.minText = "تاریخ دریافت وام نباید از تاریخ شروع قسط بزرگتر باشد.";
    }
    function StartDate() {
        var txtTarikhDaryaft = App.NewVam.queryById('txtTarikhDaryaft');
        var txtStartDate = App.NewVam.queryById('txtStartDate');
        txtTarikhDaryaft.setMaxValue(txtStartDate.getValue());
        txtTarikhDaryaft.maxText = "تاریخ دریافت وام نباید از تاریخ شروع قسط بزرگتر باشد.";
    }
    function MablaghGhest() {
        var Ghest = 0;
        var txtMablaghVam = App.NewVam.queryById('txtMablaghVam').getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '');
        var txtCount = App.NewVam.queryById('txtCount').getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', '');
        if (txtCount != "" & txtMablaghVam != "") {
            Ghest = parseInt(txtMablaghVam) / parseInt(txtCount);
            App.NewVam.queryById('txtMablagh').setValue(accounting.formatNumber(Ghest));
        }
        CheckInt(App.NewVam.queryById('txtMablaghVam'));
    }
    function LoadVam() {
        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.DirectMethod.request({
                url: '/PayRoll/Vam/Details',
                params: {
                    id: '@ViewBag.Id',
                    OrganId:'@ViewBag.OrganId'
                },
                success: function (data) {
                    var fldPersonalId = App.NewVam.queryById('fldPersonalId');
                    fldPersonalId.setValue(data.fldPersonalId);
                    var txtTarikhDaryaft = App.NewVam.queryById('txtTarikhDaryaft');
                    txtTarikhDaryaft.setValue(data.fldTarikhDaryaft);
                    var txtStartDate = App.NewVam.queryById('txtStartDate');
                    txtStartDate.setValue(data.fldStartDate);
                    var CboTypeVam = App.NewVam.queryById('CboTypeVam');
                    CboTypeVam.setValue(data.fldTypeVam);
                    var txtMablaghVam = App.NewVam.queryById('txtMablaghVam');
                    txtMablaghVam.setValue(data.fldMablaghVam);
                    var txtCount = App.NewVam.queryById('txtCount');
                    txtCount.setValue(data.fldCount);
                    var txtMablagh = App.NewVam.queryById('txtMablagh');
                    txtMablagh.setValue(data.fldMablagh);
                    var txtMandeVam = App.NewVam.queryById('txtMandeVam');
                    txtMandeVam.setValue(data.fldMandeVam);
                    status = data.fldStatus;
                    var Id = App.NewVam.queryById('fldId');
                    Id.setValue(data.fldId);
                }
            });
        }
        else {
            var fldPersonalId = App.NewVam.queryById('fldPersonalId');
            fldPersonalId.setValue('@ViewBag.PersonalId');
            var txtMandeVam = App.NewVam.queryById('txtMandeVam');
            txtMandeVam.setValue("0");
        }
    }
    function checkSaveVam() {
        var SelectedRow = App.Vam.queryById('GridHeader').selModel.getLastSelected();
        if (SelectedRow.data.fldStatusId == 1) {
            SaveVam();
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "وضعیت فرد مورد نظر " + SelectedRow.data.fldStatusTitle + " است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SaveVam() {
        var txtTarikhDaryaft = App.NewVam.queryById('txtTarikhDaryaft');
        var txtStartDate = App.NewVam.queryById('txtStartDate');
        var CboTypeVam = App.NewVam.queryById('CboTypeVam');
        var txtMablaghVam = App.NewVam.queryById('txtMablaghVam');
        var txtCount = App.NewVam.queryById('txtCount');
        var txtMablagh = App.NewVam.queryById('txtMablagh');
        var txtMandeVam = App.NewVam.queryById('txtMandeVam');
        var Id = App.NewVam.queryById('fldId');
        var PersonalId = App.NewVam.queryById('fldPersonalId');

        var er = false;

       
        if (txtTarikhDaryaft.validate() == false) {
            er = true;
        }
        if (txtStartDate.validate() == false) {
            er = true;
        }
        if (txtMablaghVam.validate() == false) {
            er = true;
        }
        if (txtCount.validate() == false) {
            er = true;
        }
        if (txtMablagh.validate() == false) {
            er = true;
        }
        if (txtMandeVam.validate() == false) {
            er = true;
        }


        if (er == true)
            return;
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Vam/Save',
            params: {
                fldId: Id.getValue(),
                fldTarikhDaryaft: txtTarikhDaryaft.rawValue,
                fldStartDate: txtStartDate.rawValue,
                fldTypeVam: CboTypeVam.getValue(),
                fldMablaghVam: txtMablaghVam.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                fldCount: txtCount.getValue(),
                fldMablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                fldMandeVam: txtMandeVam.getValue(),
                fldPersonalId: PersonalId.getValue(),
                fldStatus: status,
                OrganId: '@ViewBag.OrganId'
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ClearVam();
                ReloadGridDetailVam();
               /* App.Vam.queryById('GridHeader').store.load();
                App.Vam.queryById('GridDetail').getStore().loadData("");*/
            }

        });
    }
    function ClearVam() {
        App.NewVam.queryById('txtTarikhDaryaft').setValue("");
        App.NewVam.queryById('txtStartDate').setValue("");
        App.NewVam.queryById('CboTypeVam').setValue("1");
        App.NewVam.queryById('txtMablaghVam').setValue("");
        App.NewVam.queryById('txtCount').setValue("");
        App.NewVam.queryById('txtMablagh').setValue("");
        App.NewVam.queryById('txtMandeVam').setValue("");
        App.NewVam.queryById('fldId').setValue(0);
    }

    function EnterNext() {
        var keyfield = App.NewVam.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld;
        if (keyfield.itemId == "txtCount") {
            nextfld = App.NewVam.queryById('txtMandeVam');
        }
        else if (keyfield.itemId == "txtMandeVam") {
            nextfld = App.NewVam.queryById('btnSave');
        }
        else {
            nextfld = keyfield.nextSibling().nextSibling();
            nextfld.selectText();
        }
        nextfld.focus();
    }


</script>
