@model IEnumerable<NewFMS.WCF_PayRoll.OBJ_SelectPayPersonalInfo_Ezafekar>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
@(Html.X().Panel()
    .Closable(true)
    .Border(false)
    .CloseAction(CloseAction.Destroy)
    .Title("تأیید اضافه کار")
    .Layout(LayoutType.Fit)
    .ID("TaeedEzafekari")
    .Items(
        X.Panel()
            .Border(false)            
            .Items(
                X.Panel()
                    .Border(false)
                    .ButtonAlign(Alignment.Center)
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Buttons(
                        Html.X().Button()
                            .Text("ذخیره")
                            .Icon(Ext.Net.Icon.Printer)
                            .Listeners(l => l.Click.Handler = "SaveTaeedE()"),
                          X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help).Listeners(l => { l.Click.Handler = "HelpTaeedE();"; }),

                        Html.X().Button()
                            .Text("خروج")
                            .Icon(Ext.Net.Icon.DoorOut)
                            .OnClientClick("App.TaeedEzafekari.destroy()")
                    )
                    .Items(
                        X.FieldSet()
                            .Border(true)
                            .Title("مشخصات تأیید")
                            //.PaddingSpec("7px 0 0 0")
                            .Height(77)
                            .Defaults(new { Margin="2px"})
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                            .Items(
                                X.Label("سال:").ItemID("lblYear"),
                                X.ComboBox()
                                    .ItemID("CboYear")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .AutoFocus(true)
                                    .BlankText("لطفا سال را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .Listeners(l =>
                                    {
                                        l.AfterRender.Handler = "setValueYearT()";
                                        l.Select.Handler = "setYearClassT();loadGrid();";
                                    })
                                    .Items(
                                        new ListItem("1387", "1387"),
                                        new ListItem("1388", "1388"),
                                        new ListItem("1389", "1389"),
                                        new ListItem("1390", "1390"),
                                        new ListItem("1391", "1391"),
                                        new ListItem("1392", "1392"),
                                        new ListItem("1393", "1393"),
                                        new ListItem("1394", "1394"),
                                        new ListItem("1395", "1395"),
                                        new ListItem("1396", "1396"),
                                        new ListItem("1397", "1397"),
                                        new ListItem("1398", "1398"),
                                        new ListItem("1399", "1399"),
                                        new ListItem("1400", "1400"),
                                        new ListItem("1401", "1401"),
                                            new ListItem("1402", "1402"),
                                            new ListItem("1403", "1403")
                                ),
                                X.Label("ماه:").ItemID("lblMonth"),
                                X.ComboBox()
                                    .ItemID("CboMonth")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا ماه را انتخاب کنید.")
                                    .Listeners(l =>
                                    {
                                        l.AfterRender.Handler = "setValueMonthT()";
                                        l.Select.Handler = "setMonthClassT();loadGrid();";
                                    })
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .Items(
                                        new ListItem("فروردین", "01"),
                                        new ListItem("اردیبهشت", "02"),
                                        new ListItem("خرداد", "03"),
                                        new ListItem("تیر", "04"),
                                        new ListItem("مرداد", "05"),
                                        new ListItem("شهریور", "06"),
                                        new ListItem("مهر", "07"),
                                        new ListItem("آبان", "08"),
                                        new ListItem("آذر", "09"),
                                        new ListItem("دی", "10"),
                                        new ListItem("بهمن", "11"),
                                        new ListItem("اسفند", "12")
                                    ),
                                X.Label("نوبت پرداخت:").ItemID("lblNobatePardakht"),
                                X.ComboBox()
                                    .ItemID("CboNobatePardakht")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا نوبت پرداخت را انتخاب کنید.")
                                    .Listeners(l =>
                                    {
                                        l.AfterRender.Handler = "setValueNobatePardakhtT()";
                                        l.Select.Handler = "setNobatePardakhtCalssT()";
                                    })
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .Items(
                                        new ListItem("یک", "1"),
                                        new ListItem("دو", "2"),
                                        new ListItem("سه", "3"),
                                        new ListItem("چهار", "4"),
                                        new ListItem("پنج", "5")
                                    ),
                                X.Label("مرکز هزینه:").ItemID("lblCostCenterType"),
                                X.ComboBox()
                                    .ItemID("CboCostCenterType")
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .EmptyText("مرکز هزینه")
                                    .ValueNotFoundText("Loading...")
                                    .Listeners(ls => ls.Select.Handler = "setCostClassT();loadGrid();")
                                    .Store(X.Store().Listeners(ls => ls.Load.Handler = "setValueCostCenterTypeT()")
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                            new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                            new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                        )
                                        .Proxy(X.AjaxProxy()
                                            .Url(Url.Action("GetCostCenter"))
                                            .Reader(X.JsonReader().Root("data"))
                                        )
                                    )
                        )),
                Html.X().Panel()
                    .ItemID("pnlGrid")
                    .PaddingSpec("7px 0 0 0")                    
                    .Border(false)
                    .Items(
                        X.GridPanel()
                            .ItemID("GridPayPersonal")
                            .BottomBar(Html.X().PagingToolbar())
                            .Store(
                                X.StoreForModel()
                                    .AutoLoad(false)
                                    .Proxy(Html.X().AjaxProxy()
                                        .Url(Url.Action("Read"))
                                        .Reader(Html.X().JsonReader().Root("data"))
                                    )
                                    .PageSize(2000)
                                    .RemoteFilter(true)
                                    .RemotePaging(false)
                                )
                            .View(
                                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true).RTL(true).GetRowClass(l => l.Fn = "getRowClassTaeedEzafekari")
                                )
                            .Listeners(l =>
                             {
                                 l.AfterRender.Handler = "var grid = App.TaeedEzafekari.queryById('GridPayPersonal');grid.setHeight(App.PayWin.getHeight() - 295); ";
                             })
                            .ColumnModel(
                                Html.X().RowNumbererColumn(),
                                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام و نام خانوادگی").Flex(4),
                                Html.X().Column().DataIndex(Model, m => m.fldFatherName).Text("نام پدر").Flex(4),
                                Html.X().Column().DataIndex(Model, m => m.fldCodemeli).Text("کد ملی").Flex(3),
                                Html.X().Column().DataIndex(Model, m => m.fldEzafeKari).Text("اضافه کار").Editor(Html.X().TextField().MaskRe("/[0-9]/")).Flex(4),
                                Html.X().ComponentColumn().DataIndex(Model, m => m.fldGhati).Editor(true).Component(Html.X().Checkbox()).Flex(2).Text("<input type='checkbox' id='headerrcheck' onchange='selectAll()'> تأیید")
                                )
                                    .Plugins(X.FilterHeader().Remote(true))
                            .Plugins(
                                Html.X().CellEditing().ClicksToEdit(1)
                                )
                            .SelectionModel(
                                Html.X().RowSelectionModel()
                                    .Mode(Ext.Net.SelectionMode.Single)
                                    
                                    
                                )
                        )
            )
    )
)

<script type="text/javascript">
    
    var getRowClassTaeedEzafekari = function (record, rowIndex, rowParams, store) {
        var color = 'white';
        if (rowIndex % 2 == 1)
            color = '#dfe8f6';
        var clsName = "row" + rowIndex,
            clsStyle = Ext.String.format(".{0} .x-grid-cell, .{0} .x-grid-rowwrap-div { background-color: {1} !important; })", clsName, color);
        Ext.net.ResourceMgr.registerCssClass(clsName, clsStyle);
        return clsName;
    };
    function HelpTaeedE() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/PayRoll/TaeedEzafekar/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function selectAll() {
        var el = document.getElementById("headerrcheck");
        var store = App.TaeedEzafekari.queryById("GridPayPersonal").getStore();
        for (var i = 0; i < store.getCount() ; i++) {
            var record = store.getAt(i);
            if (el.checked) {
                record.set("fldGhati", true);
            } else {
                record.set("fldGhati", false);
            }
        }
    }

    function setValueYearT() {
        var CboYear = App.TaeedEzafekari.queryById('CboYear');
        CboYear.setValue('@ViewBag.Year');
    }

    function setValueMonthT() {
        var CboMonth = App.TaeedEzafekari.queryById('CboMonth');
        CboMonth.setValue('@ViewBag.Month');
    }

    function setValueCostCenterTypeT() {
        if ('@ViewBag.CostCenter' == "") {
            var CboCostCenterType = App.TaeedEzafekari.queryById('CboCostCenterType');
            CboCostCenterType.setValue(CboCostCenterType.store.getAt(0));
        }
        else {
            var CboCostCenterType = App.TaeedEzafekari.queryById('CboCostCenterType');
            CboCostCenterType.setValue('@ViewBag.CostCenter');
        }
        loadGrid();
    }

    function setValueNobatePardakhtT() {
        var CboNobatePardakht = App.TaeedEzafekari.queryById('CboNobatePardakht');
        CboNobatePardakht.setValue('@ViewBag.nobatePardakht');
    }

    function setNobatePardakhtCalssT() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/setNobatePardakhtCalss',
            params: {
                NobatePardakht: App.TaeedEzafekari.queryById("CboNobatePardakht").getValue()
            }
        });
    }

    function loadGrid(){
        App.TaeedEzafekari.queryById("GridPayPersonal").getStore().getProxy().setExtraParam("CostCenterId", App.TaeedEzafekari.queryById("CboCostCenterType").getValue());
        App.TaeedEzafekari.queryById("GridPayPersonal").getStore().getProxy().setExtraParam("Yearr", App.TaeedEzafekari.queryById("CboYear").getValue());
        App.TaeedEzafekari.queryById("GridPayPersonal").getStore().getProxy().setExtraParam("Monthh", App.TaeedEzafekari.queryById("CboMonth").getValue());
        App.TaeedEzafekari.queryById("GridPayPersonal").getStore().getProxy().setExtraParam("NobatPardakht", App.TaeedEzafekari.queryById("CboNobatePardakht").getValue());
        App.TaeedEzafekari.queryById("GridPayPersonal").getStore().load();
    }

    function setYearClassT() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetYearClass',
            params: {
                Year: App.TaeedEzafekari.queryById("CboYear").getValue()
            }
        });
    }

    function setMonthClassT() {
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetMonthClass',
            params: {
                Month: App.TaeedEzafekari.queryById("CboMonth").getValue()
            }
        });
    }

    function setCostClassT() {
        var value = App.TaeedEzafekari.queryById('CboCostCenterType').getValue();
        Ext.net.DirectMethod.request({
            url: '/PayRoll/Pardakhtha/SetCostClass',
            params: {
                Value: value
            }
        });
    }


    function SaveTaeedE() {
        var Grid = App.TaeedEzafekari.queryById("GridPayPersonal");
        var KarKardeMahane = new Array();
        for (var i = 0; i < Grid.selModel.store.count() ; i++) {
            row = Grid.selModel.store.data.items[i];
            fldPrs_PersonalInfo = row.data.fldId;
            fldEzafeKari = row.data.fldEzafeKari;
            if (fldEzafeKari > 175) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "مقدار وارد شده برای " + row.data.fldName + " بیش از حد مجاز است. حداکثر مقدار 175 است.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }
            fldGhati = row.data.fldGhati;

            /*if (fldEzafeKari == "") {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا تعداد ساعات اضافه کاری " + row.data.fldName+" را وارد کنید.",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }*/
            KarKardeMahane.push({
                'fldPrs_PersonalInfoId': fldPrs_PersonalInfo,
                'fldEzafeKari': fldEzafeKari,
                'fldGhati': fldGhati
            });
        }

        if (KarKardeMahane.length == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "برای مشخصات انتخاب شده اضافه کاری ثبت نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else {
            Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
            var data1 = {
                KarKardeMahane: KarKardeMahane,
                Year: App.TaeedEzafekari.queryById("CboYear").getValue(),
                Month: App.TaeedEzafekari.queryById("CboMonth").getValue(),
                NobatePardakht: App.TaeedEzafekari.queryById("CboNobatePardakht").getValue()
            };

            $.ajax({
                type: "POST",
                url: '/PayRoll/TaeedEzafekar/Save',
                datatype: "json",
                data: JSON.stringify(data1),
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    var result = data;/*JSON.parse(data);*/
                    var ic = Ext.MessageBox.INFO;
                    if (result.Er == 1) {
                        ic = Ext.MessageBox.ERROR;
                    }
                    Ext.MessageBox.show({
                        title: result.MsgTitle,
                        msg: result.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    loadGrid();
                    Ext.net.Mask.hide();
                },
                failure: function (data) {
                    alert(data.data);
                }
            });
        }
    }
</script>