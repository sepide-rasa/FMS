@model IEnumerable<NewFMS.WCF_Common_Pay.OBJ_Items_Estekhdam>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net.Utilities
@using Ext.Net;
@{

    var X = Html.X();
}
<style>
    td {
        text-align: left;
    }
</style>
<script src="~/Scripts/accounting.js"></script>


@(X.Window().Title("کسورات بانک").Modal(true).Border(false)//.Listeners(li => li.AfterRender.Handler = "LoadHokm();")
    .ID("NewKosuratBank")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
          .Width(780)
        // .Height(580)
    .Items(
            X.FormPanel()
                .ButtonAlign(Ext.Net.Alignment.Center)
        .Border(false)
        .KeyMap(Html.X().KeyMap()
        .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
        .Binding(b =>
        {
            b.Add(Html.X().KeyBinding()
            .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
            .Handler("checkSaveKosuratBank(); ")
            );

        }))
        .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
        .Layout(Ext.Net.LayoutType.VBox)
        .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
        .Buttons(
            X.Button().ItemID("btnSave_K").Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8")
            .Listeners(l =>
            {
                l.Click.Handler = "checkSaveKosuratBank();";

            })
        //.ItemID("btnSave"),
        //X.Button().Text("محاسبه مجدد").Icon(Ext.Net.Icon.ArrowRefresh)
        //.Listeners(l =>
        //{
        //    l.Click.Handler = "Calc();";

            //})

            ,X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                .OnClientClick("App.NewKosuratBank.destroy()")
        )
        .Items(
                X.FieldSet().Border(true).Title("اطلاعات کسورات بانک")
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 6 })
                .Defaults(new { Margin = 2 })
                .Items(
                X.Hidden().ItemID("fldId")
                , X.Label().Text("نام و نام خانوادگی:")
                , X.TextField()
                    .ItemID("txtName")
                    .AllowBlank(true)
                    , X.Label().Text("کد ملی:")
                    , X.TextField()
                    .ItemID("txtNationalCode")
                    .AllowBlank(true)
                    , X.Label().Text("شماره پرسنلی:")
                    , X.TextField()
                    .ItemID("txtShomarePersoneli")
                    .AllowBlank(true)
                    , X.Label().Text("نام بانک:")
                    , X.ComboBox()
                        .ItemID("CboBank")
                        .AutoFocus(true)
                    .Editable(false)
                    .TypeAhead(true)
                    .QueryMode(DataLoadMode.Local)
                    .ForceSelection(true)
                    .TriggerAction(TriggerAction.All)
                    .DisplayField("Name")
                    .ValueField("ID")
                    .EmptyText("بانک ها")
                    .Listeners(ls =>
                                  ls.Select.Handler = "App.NewKosuratBank.queryById('CboShobe').getStore().load()"
                        )
                    .ValueNotFoundText("Loading...")
                        .Store(X.Store().Listeners(li => li.Load.Handler = "LoadKosuratBank();")
                        .Model(X.Model()
                            .IDProperty("ID")
                            .Fields(
                            new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                            )
                        )
                        .Proxy(X.AjaxProxy()
                                .Url(Url.Action("GetBank"))
                            .Reader(X.JsonReader().Root("data"))
                              )
                         )
                        , X.Label().Text("شعبه:") 
                        ,X.ComboBox()
                            .ItemID("CboShobe")
                            .TypeAhead(true)
                            .Editable(false)
                            .AllowBlank(false)
                            .BlankText("لطفا شعبه را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldId")
                                .Store(X.Store().AutoLoad(false)//.Listeners(li => li.Load.Handler = "LoadShobe();")
                                .Model(X.Model()
                                    .IDProperty("fldId")
                                    .Fields(
                                        new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                        )
                                    )
                                .Proxy(X.AjaxProxy()
                                        .Url(Url.Action("GetShobe"))
                                    .Reader(X.JsonReader().Root("data"))
                                    )
                                .Parameters(ps => ps.Add(new StoreParameter("ID", "App.NewKosuratBank.queryById('CboBank').getValue()", ParameterMode.Raw)))
                                
                                )
                                .EmptyText("شعبه...")
                       
                    , X.Label().Text("مبلغ:")
                    , X.TextField()
                    .ItemID("txtMablagh")
                    .Text("0")
                    .MaskRe("/[0-9-.]/")
                    .Listeners(l => { l.Change.Handler = "CheckInt(App.NewKosuratBank.queryById('txtMablagh'));App.NewKosuratBank.queryById('txtMablagh').setValue(accounting.formatNumber(App.NewKosuratBank.queryById('txtMablagh').getValue()))"; })
                    .AllowBlank(false)
                    .BlankText("لطفا مبلغ را وارد کنید.")
                        , X.Label().Text("تعداد:")
                    , X.TextField()
                    .ItemID("txtTedad")
                    .Text("0")
                    .MaskRe("/[0-9-.]/")
                          .Listeners(a =>
                                    {
                                        a.Change.Handler = "DateDeactive();CheckShort(App.NewKosuratBank.queryById('txtTedad'));";
                                    }
                        )
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .AllowBlank(false)
                    .BlankText("لطفا تعداد را وارد کنید.")
                    , X.Label().Text("تاریخ پرداخت:")
                    , X.PDateField()
                        .ItemID("txtTrikhePardakht")
                            .MaskRe("/[0-9 /]/")
                            .MaxLength(10)
                            .EnforceMaxLength(true)
                    .AllowBlank(false)
                    .BlankText("لطفا تاریخ پرداخت را وارد کنید.")
                    .Listeners(a =>
                                    {
                                        a.Change.Handler = "DateDeactive();";
                                    }
                        )
                    , X.Label().Text("شماره حساب:")
                    , X.TextField()
                    .ItemID("txtShomareHesab")
                    .Text("0")
                    .EnforceMaxLength(true)
                    .MaxLength(15)
                    .MaskRe("/[0-9]/")
                    .AllowBlank(false)
                    .BlankText("لطفا شماره حساب را وارد کنید.")

                         , X.Label().Text("شماره شبا:")
                        , X.TextField()
                        .ItemID("txtShSheba")
                            .MaskRe("[I,R,i,r,0-9]") 
                        .FieldStyle("direction:ltr;")
                            .EmptyText("IR------------------------")
                        .EnforceMaxLength(true)
                        .MaxLength(27)
                        .AllowBlank(true)
                        .BlankText("لطفا شماره شبا را وارد کنید.")
      
                    
                    , X.Label().Text("وضعیت:")
                    , X.ComboBox()
                    .ItemID("CboStatus")
                    .EmptyText("وضعیت...")
                    .Editable(false)
                    .TypeAhead(true)
                        .BlankText("لطفا وضعیت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .Items(
                        new ListItem("غیر فعال", "0"),
                        new ListItem("فعال", "1")

                        )
                        .Listeners(a =>
                                {
                                    a.Change.Handler = "ChangeStatus()";
                                }
                    )
                    //,X.FieldSet().ColSpan(2)
                    //.Border(false)
                    //    .Layout(Ext.Net.LayoutType.VBox)
                    //    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Right })
                        
                    //    .Items(
        , X.Label().Text("تاریخ غیر فعالی:")
                     , X.FieldSet().Border(false).ID("FieldSetKosuratBank")//.PaddingSpec("0 100px 0 0")//.Title("تاریخ غیر فعالی")
                    .Center()
                            .Layout(Ext.Net.LayoutType.HBox)//.ColSpan(2)
                            .LayoutConfig(new Ext.Net.HBoxLayoutConfig { Align = Ext.Net.HBoxAlign.Stretch }).Width(161)
                    .Defaults(new { Margin = 2 })
                    .Items(
       
                        X.Label().Text("ماه:"),
                         X.TextField()
                        .ItemID("txtMonth")
                        .Text("99")
                        .MaxLength(2)
                        .MinLength(2)
                        .EnforceMaxLength(true)
                        .MaskRe("/[0-9-.-/]/")
        //.FieldLabel("ماه")
                        .Width(30)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .AllowBlank(false)
                        .BlankText("لطفا ماه را وارد کنید.")
                        ,
        //X.Label().Text("/"),
                        X.Label().Text("سال:"),
                         X.TextField()
                         .Border(true)
                         .MaxLength(4)
                        .MinLength(4)
                        .EnforceMaxLength(true)
                        .ItemID("txtYear")
                        .Text("9999")
                        .MaskRe("/[0-9-.-/]/")
        //.FieldLabel("سال")
                            .Width(50)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .AllowBlank(false)
                        .BlankText("لطفا سال را وارد کنید.")
                        )
                        //)
                                           , X.FieldSet()
                                .Layout(LayoutType.Table)
                                .ColSpan(2)
                                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                                .PaddingSpec("0 0 0 65px")
                                .Border(false)
                                .Defaults(new { Margin = 2 })
                                .Items(
                                    X.Checkbox()
                                        .ItemID("chkCheckedMondeFish")
                                        .PaddingSpec("0 0 0 4px")
                                        .Listeners(a =>
                                            {
                                                a.Change.Handler = "CheckedMondeFish()";
                                            }),
                                    X.Label("نمایش مانده در فیش")),
                                    X.Label("مانده از قبل:"),
                                    X.TextField()
                                    .ItemID("txtMondeGHabl")
                                    .Text("0")
                                    .MaskRe("/[0-9-.]/")
                                    .Listeners(l => { l.Change.Handler = "App.NewKosuratBank.queryById('txtMondeGHabl').setValue(accounting.formatNumber(App.NewKosuratBank.queryById('txtMondeGHabl').getValue()));CheckInt(App.NewKosuratBank.queryById('txtMondeGHabl'));"; })
                                    .ReadOnly(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا مبلغ مانده از قبل را وارد کنید.")
                                    ,
                        X.Label().Text("توضیحات:")
                         ,X.TextField()
                        .ItemID("txtDesc")
                        //.Width(395)
                       // .ColSpan(3)
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                  )
        )
    )
)

<script type="text/javascript">
    function ChangeStatus() {
        var Status = App.NewKosuratBank.queryById('CboStatus');
        if (Status.getValue() == "1") {
            var txtMonth = App.NewKosuratBank.queryById('txtMonth');
            txtMonth.setReadOnly(true);
            var txtYear = App.NewKosuratBank.queryById('txtYear');
            txtYear.setReadOnly(true);
        }
        else if (Status.getValue() == "0") {
            var txtMonth = App.NewKosuratBank.queryById('txtMonth');
            txtMonth.setReadOnly(false);
            var txtYear = App.NewKosuratBank.queryById('txtYear');
            txtYear.setReadOnly(false);
        }
    }

    function CheckedMondeFish() {
        var chkCheckedMondeFish = App.NewKosuratBank.queryById('chkCheckedMondeFish');
        var txtMondeGHabl = App.NewKosuratBank.queryById('txtMondeGHabl');

        if (chkCheckedMondeFish.getValue() == true) {
            txtMondeGHabl.setReadOnly(false);
        }
        else if (chkCheckedMondeFish.getValue() == false) {
            txtMondeGHabl.setReadOnly(true);
            txtMondeGHabl.setValue(0);
        }
    }

    function DateDeactive() {
        
            var TrikhePardakht = App.NewKosuratBank.queryById('txtTrikhePardakht');
            var txtTedad = App.NewKosuratBank.queryById('txtTedad');
            var Tedad = 0;
            if (txtTedad.getValue() != 0 && TrikhePardakht.rawValue != "") {
                Tedad = txtTedad.getValue();
                Ext.net.DirectMethod.request({
                    url: '/KosuratBank/DateDeactive',
                    params: {
                        TrikhePardakht: TrikhePardakht.rawValue,
                        Tedad: Tedad
                        
                    },
                    success: function (data) {
                        var Month = App.NewKosuratBank.queryById('txtMonth');
                        Month.setValue(data.Mah);
                        var Year = App.NewKosuratBank.queryById('txtYear');
                        Year.setValue(data.Year);
                    }
                });
            }
    }
    function LoadShobe() {
        if ('@ViewBag.Id' == '0') {
            App.NewKosuratBank.queryById('CboShobe').getStore().load();
            var CboShobe = App.NewKosuratBank.queryById('CboShobe');
            CboShobe.setValue(CboShobe.store.getAt(0));
        }
    }
    function LoadKosuratBank() {
        if ('@ViewBag.Id' != '0') {
            /*Edit*/
            Ext.net.DirectMethod.request({
                url: '/KosuratBank/Details',
                params: {
                    id: '@ViewBag.Id',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    var txtName = App.NewKosuratBank.queryById('txtName');
                    txtName.setValue(data.fldName);
                    App.NewKosuratBank.queryById('txtName').setReadOnly(true);
                    var txtNationalCode = App.NewKosuratBank.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    App.NewKosuratBank.queryById('txtNationalCode').setReadOnly(true);
                    var txtShomarePersoneli = App.NewKosuratBank.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    App.NewKosuratBank.queryById('txtShomarePersoneli').setReadOnly(true);
                    var txtMablagh = App.NewKosuratBank.queryById('txtMablagh');
                    txtMablagh.setValue(data.fldMablagh);
                    var txtTedad = App.NewKosuratBank.queryById('txtTedad');
                    txtTedad.setValue(data.fldTedad);
                    var txtTrikhePardakht = App.NewKosuratBank.queryById('txtTrikhePardakht');
                    txtTrikhePardakht.setValue(data.fldTarikhPardakht);
                    var txtShomareHesab = App.NewKosuratBank.queryById('txtShomareHesab');
                    txtShomareHesab.setValue(data.fldShomareHesab); 
                    var txtShSheba = App.NewKosuratBank.queryById('txtShSheba');
                    txtShSheba.setValue(data.fldShomareSheba);
                    var CboBank = App.NewKosuratBank.queryById('CboBank');
                    CboBank.setValue(data.BankId);
                    App.NewKosuratBank.queryById('CboShobe').getStore().load();
                    var CboShobe = App.NewKosuratBank.queryById('CboShobe');
                    CboShobe.store.on('load', function () {
                        CboShobe.setValue(data.fldShobeId);
                    });
                    var CboStatus = App.NewKosuratBank.queryById('CboStatus');
                    CboStatus.setValue(data.fldStatus);
                    var txtYear = App.NewKosuratBank.queryById('txtYear');
                    txtYear.setValue(data.Sal);
                    var txtMonth = App.NewKosuratBank.queryById('txtMonth');
                    txtMonth.setValue(data.Month);

                    var chkCheckedMondeFish = App.NewKosuratBank.queryById('chkCheckedMondeFish');
                    chkCheckedMondeFish.setValue(data.fldMandeDarFish);
                    var txtMondeGHabl = App.NewKosuratBank.queryById('txtMondeGHabl');
                    txtMondeGHabl.setValue(data.fldMandeAzGhabl);

                    var Id = App.NewKosuratBank.queryById('fldId');
                    Id.setValue(data.fldId);

                    var txtDesc = App.NewKosuratBank.queryById('txtDesc');
                    txtDesc.setValue(data.fldDesc);
                    
                }
            });
        }
        else
        {
            Ext.net.DirectMethod.request({
                url: '/KosuratBank/DetailsHeader',
                params: {
                    id: '@ViewBag.PersonalId',
                    OrganId: '@ViewBag.OrganId'
                },
                success: function (data) {
                    var txtName = App.NewKosuratBank.queryById('txtName');
                    txtName.setValue(data.fldName);
                    App.NewKosuratBank.queryById('txtName').setReadOnly(true);
                    var txtNationalCode = App.NewKosuratBank.queryById('txtNationalCode');
                    txtNationalCode.setValue(data.fldNationalCode);
                    App.NewKosuratBank.queryById('txtNationalCode').setReadOnly(true);
                    var txtShomarePersoneli = App.NewKosuratBank.queryById('txtShomarePersoneli');
                    txtShomarePersoneli.setValue(data.fldShomarePersoneli);
                    App.NewKosuratBank.queryById('txtShomarePersoneli').setReadOnly(true);
                    var CboBank = App.NewKosuratBank.queryById('CboBank');
                    CboBank.setValue(CboBank.store.getAt(0));
                    App.NewKosuratBank.queryById('CboShobe').getStore().load();
                    var CboShobe = App.NewKosuratBank.queryById('CboShobe');
                    CboShobe.store.on('load', function () {
                        CboShobe.setValue(CboShobe.store.getAt(0));

                    });
                }
            });
            App.NewKosuratBank.queryById('txtTrikhePardakht').setValue('@ViewBag.TarikhPardakht');
            App.NewKosuratBank.queryById('CboStatus').setValue("1");
        }
    }

    function checkSaveKosuratBank() {
        var SelectedRow = App.KosuratBank.queryById('GridAshkhas').selModel.getLastSelected();
        if (SelectedRow.data.fldStatusId == 1) {
            SaveKosuratBank();
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "وضعیت فرد مورد نظر " + SelectedRow.data.fldStatusTitle + " است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SaveKosuratBank() {
        var txtMablagh = App.NewKosuratBank.queryById('txtMablagh');
        var txtTedad = App.NewKosuratBank.queryById('txtTedad');
        var CboShobe = App.NewKosuratBank.queryById('CboShobe');
        var txtTrikhePardakht = App.NewKosuratBank.queryById('txtTrikhePardakht');
        var txtShomareHesab = App.NewKosuratBank.queryById('txtShomareHesab');
        var txtShSheba = App.NewKosuratBank.queryById('txtShSheba');
        var CboStatus = App.NewKosuratBank.queryById('CboStatus');
        var txtMonth = App.NewKosuratBank.queryById('txtMonth');
        var txtYear = App.NewKosuratBank.queryById('txtYear');
        var chkCheckedMondeFish = App.NewKosuratBank.queryById('chkCheckedMondeFish');
        var txtMondeGHabl = App.NewKosuratBank.queryById('txtMondeGHabl');
        var txtDesc = App.NewKosuratBank.queryById('txtDesc');        
        var Id = App.NewKosuratBank.queryById('fldId');
        var er = false;

        if (CboShobe.validate() == false) {
            er = true;
        }
        if (txtMablagh.validate() == false) {
            er = true;
        }
        if (txtTedad.validate() == false) {
            er = true;
        }
        if (txtTrikhePardakht.validate() == false) {
            er = true;
        }
        if (txtShomareHesab.validate() == false) {
            er = true;
        }
        if (CboStatus.validate() == false) {
            er = true;
        }
        if (txtMondeGHabl.validate() == false) {
            er = true;
        }
        if (chkCheckedMondeFish.getValue() == 1 && txtMondeGHabl.getValue() == 0) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا مبلغ مانده از قبل را وارد کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }

        if (er == true)
            return;
        var Status = false;
        if (CboStatus.getValue() == "1")
            Status = true;
        Ext.net.DirectMethod.request({
            url: '/KosuratBank/Save',
            params: {
                fldId: Id.getValue(),
                fldPersonalId: '@ViewBag.PersonalId',
                fldShobeId: CboShobe.getValue(),
                fldMablagh: txtMablagh.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                fldCount: txtTedad.getValue(),
                fldTarikhPardakht: txtTrikhePardakht.rawValue,
                fldShomareHesab: txtShomareHesab.getValue(),
                fldShomareSheba: txtShSheba.getValue(),
                fldYear: txtYear.getValue(),
                fldMonth: txtMonth.getValue(),
                fldMandeDarFish: chkCheckedMondeFish.getValue(),
                fldMandeAzGhabl: txtMondeGHabl.getValue().replace(',', '').replace(',', '').replace(',', '').replace(',', '').replace(',', ''),
                fldStatus: Status,
                fldDesc: txtDesc.getValue(),
                OrganId: '@ViewBag.OrganId'
            },
            success: function (data) {
                var ico = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ico = Ext.MessageBox.ERROR;
                else {
                    ReloadKosuratBank();
                }
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ico,
                    buttons: Ext.MessageBox.OK,
                    fn: function (btn) {
                        if (btn == 'ok' && data.Er != 1) {
                            App.NewKosuratBank.destroy();
                        }
                    }
                });
                

            }

        });
    }

    function EnterNext() {
        var CboStatus = App.NewKosuratBank.queryById('CboStatus');
        var keyfield;
        var nextfld;

        keyfield = App.NewKosuratBank.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        if(keyfield.itemId=="CboStatus")
        {
            if (CboStatus.getValue() == "0")
                nextfld = App.NewKosuratBank.queryById("txtMonth");
            else
                nextfld = App.NewKosuratBank.queryById("txtDesc");
            nextfld.focus();
        }
        else if (keyfield.itemId == "txtYear") {
            nextfld = App.NewKosuratBank.queryById("txtDesc");
            nextfld.focus();
        }
        else
        {
            nextfld = keyfield.nextSibling().nextSibling();
            nextfld.focus();
        }
      /*  if (Ext.Element.getActiveElement().name != undefined) {
            keyfield = App.NewKosuratBank.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
            nextfld = keyfield.nextSibling().nextSibling();
            nextfld.focus();
        }
        else {
            keyfield = App.NewKosuratBank.queryById("txtMonth");
            nextfld = keyfield;
            nextfld.focus();
        }*/
       
       
           


    }
</script>